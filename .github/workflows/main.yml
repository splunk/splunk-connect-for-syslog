#   ########################################################################
#   Copyright 2021 Splunk Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#   ########################################################################
on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"
      - "develop"

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  build_action:
    runs-on: ubuntu-latest
    name: Build Action
    outputs:
      sc4s: ${{ fromJSON(steps.docker_action_meta.outputs.json).tags[0] }}
    steps:
      # To use this repository's private action,
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
          persist-credentials: false
      - name: Install yq
        run: sudo snap install yq
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Semantic Release
        id: version
        uses: cycjimmy/semantic-release-action@v2.5.4
        with:
          semantic_version: 17
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/git
          dry_run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
      - name: Docker meta
        id: docker_action_meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}/splunk-connect-for-syslog
          tags: |
            type=semver,priority=700,pattern=v{{major}}.{{minor}},value=${{ steps.version.outputs.new_release_version  }}
            type=semver,priority=700,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.new_release_version  }}
            type=semver,priority=800,pattern=v{{major}}.{{minor}}
            type=semver,priority=800,pattern=v{{major}}
            type=semver,priority=800,pattern=v{{version}}
            type=semver,priority=800,pattern={{major}}.{{minor}}
            type=semver,priority=800,pattern={{major}}
            type=semver,priority=800,pattern={{version}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=sha,format=long
      - name: Prep requirements.txt
        run: |
          pip3 install poetry
          poetry export --without-hashes >package/requirements.txt
      - name: Build and push action
        id: docker_action_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: package/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_action_meta.outputs.tags }}
          labels: ${{ steps.docker_action_meta.outputs.labels }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.docker_action_meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.docker_action_meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.docker_action_meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          #cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/splunk-connect-for-syslog:latest
          cache-from: type=registry,ref=${{ fromJSON(steps.docker_action_meta.outputs.json).tags[1] }}
          cache-to: type=inline
      - name: Run Snyk to check Docker image for vulnerabilities
        # Snyk can be used to break the build when it detects vulnerabilities.
        # In this case we want to upload the issues to GitHub Code Scanning
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ fromJSON(steps.docker_action_meta.outputs.json).tags[0] }}
          args: --file=package/Dockerfile

  test-generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
          persist-credentials: false
      - name: Checkout submodules
        uses: srt32/git-actions@v0.0.3
        with:
          args: git submodule update --init --recursive deps
      - id: matrix
        run: |
          python3 ./.github/matrix.py --features=METRICS_MULTI

  test-container:
    runs-on: ubuntu-latest
    needs:
      - test-generate-matrix
      - build_action
    strategy:
      matrix:
        splunk: ${{ fromJson(needs.test-generate-matrix.outputs.matrix) }}
    # runs all of the steps inside the specified container rather than on the VM host.
    # Because of this the network configuration changes from host based network to a container network.
    container:
      image: python:3.9-buster

    services:
      splunk:
        image: splunk/splunk:${{ matrix.splunk.version }}
        ports:
          - 8000:8000
          - 8088:8088
          - 8089:8089
        env:
          SPLUNK_HEC_TOKEN: 70b6ae71-76b3-4c38-9597-0c5b37ad9630
          SPLUNK_PASSWORD: Changed@11
          SPLUNK_START_ARGS: --accept-license
          SPLUNK_APPS_URL: https://github.com/splunk/addonfactory_test_matrix_splunk/releases/download/v1.0.0/addonfactory_all_indexes-1.0.0.tar.gz

      sc4s:
        image: ${{needs.build_action.outputs.sc4s}}
        ports:
          - 514:514
          - 601:601
          - 5614:5514
          - 5601:5601
          - 6000:6000
          - 6002:6002
        env:
          SC4S_DEST_SPLUNK_HEC_DEFAULT_URL: https://splunk:8088
          SC4S_DEST_SPLUNK_HEC_DEFAULT_TOKEN: 70b6ae71-76b3-4c38-9597-0c5b37ad9630
          SC4S_DEST_SPLUNK_HEC_DEFAULT_TLS_VERIFY: "no"
          SC4S_DEST_SPLUNK_SC4S_METRICS_HEC: "multi"
          SC4S_LISTEN_PFSENSE_TCP_PORT: 6000
          SC4S_LISTEN_SIMPLE_TEST_ONE_TCP_PORT: 5514
          SC4S_LISTEN_SIMPLE_TEST_ONE_UDP_PORT: 5514
          SC4S_LISTEN_SIMPLE_TEST_TWO_TCP_PORT: 5601
          SC4S_LISTEN_SPECTRACOM_NTP_TCP_PORT: 6002
          SC4S_LISTEN_CHECKPOINT_SPLUNK_NOISE_CONTROL: "yes"
          SC4S_SOURCE_RICOH_SYSLOG_FIXHOST: "yes"
          TEST_SC4S_ACTIVATE_EXAMPLES: "yes"
          SC4S_DEBUG_CONTAINER: "yes"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
          persist-credentials: false
      - run: |
          pip3 install poetry
          poetry install
          mkdir -p test-results || true
          poetry run pytest -v --tb=long \
            --splunk_type=external \
            --splunk_hec_token=70b6ae71-76b3-4c38-9597-0c5b37ad9630 \
            --splunk_host=splunk \
            --sc4s_host=sc4s \
            --junitxml=test-results/test.xml \
            -n 14

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - build_action
      #test-container
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2.5.4
        with:
          semantic_version: 17
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-semver:
    name: Move Respository semver tags
    if: startsWith(github.ref, 'refs/tags/v')
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: haya14busa/action-update-semver@v1
