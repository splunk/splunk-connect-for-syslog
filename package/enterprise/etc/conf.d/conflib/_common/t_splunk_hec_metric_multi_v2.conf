python {
import syslogng
import json
from io import StringIO
import re
from urllib.parse import urlparse

def splunk_hec_metric_multi_v2(log_message):
        logger = syslogng.Logger()
        logger.debug(log_message)
        output = StringIO()

        rawmetrics = log_message.get_as_str('MESSAGE', '').rstrip(", ").split(", ")

        metricset = {}

        for rm in rawmetrics:
                # print(rm)
                metric, locator = rm.split("=", 1)
                locator, value = locator.strip("'").split("=")
                t, instance = locator.split("(", 1)
                instance = instance.rstrip(")").replace("(", "_")

                dims={}

                if "." in t:
                        tparts=t.split('.')
                        t=tparts[0]
                        dims['module'] = tparts[1]
                else:
                        dims['module'] = t

                iparts=[]

                if t in ["center", "global"]:
                        mn=f"{t}.{instance}"
                else:
                        if "," in instance:
                                iparts = instance.split(',')
                                if '#' in iparts[0]:
                                        dims['name'] = iparts[0].split('#')[0]
                                        dims['workernum'] = iparts[0].split('#')[1]
                                else:
                                        dims['name'] = iparts[0]
                                        dims['workernum'] = "agg"
                        else:
                                dims['name'] = instance
                        mn=f"{t}"

                if t in ["center", "global"]:
                        mk=f"{t}"
                elif t=="dst":
                        if len(iparts)==2 and iparts[1].startswith('/'):
                                dims['path']=iparts[1]
                        elif len(iparts)==3:
                                dims['proto']=iparts[1]
                                dims['uri']=iparts[2]
                                if dims['module'] in ['syslog', 'network']:
                                        dest = iparts[2].split(':')
                                        dims['dest']=dest[0]
                                        dims['dest_port']=dest[1]
                                elif dims['module'] in ['http']:
                                        parsed=urlparse(iparts[2])
                                        dims['dest']=parsed.hostname
                                        dims['dest_port']=parsed.port
                                        dims['scheme']=parsed.scheme
                                else:
                                        dims['name']=instance
                        mk =  f"{t}.{instance}"
                elif t=="src":
                        if dims['module'] == "internal":
                                if '#' in instance:
                                        dims['name'] = instance.split('#')[0]
                                        dims['workernum'] = instance.split('#')[1]
                        elif len(iparts)==2 and dims['module']=="file" and iparts[1].startswith('/'):
                                dims['path']=iparts[1]
                        elif len(iparts)==2 and dims['module'] in ["syslog", "network"]:
                                if iparts[1].startswith('afsocket_sd'):
                                        #afsocket_sd.DEFAULT_6587_601_1
                                        #afsocket_sd.PFSENSE_tcp_6000_1
                                        socketparts = iparts[1].split('_')
                                        dims['proto']=socketparts[-3]
                                        dims['port']=socketparts[-2]
                                else:
                                        dims['dest']=iparts[1]
                        elif len(iparts)==3:
                                dims['proto']=iparts[1]
                                if dims['module'] in ['syslog', 'network']:
                                        dims['src']=iparts[2]
                                else:
                                        dims['name']=instance
                        mk =  f"{t}.{instance}"
                else:
                        mk =  f"{t}.{instance}"

                if mk not in metricset:
                        metricset[mk]={}
                        metricset[mk]['time']=log_message.get_as_str('S_UNIXTIME', '', repr='internal')
                        metricset[mk]['host']=log_message.get_as_str('HOST', '').lower()
                        metricset[mk]['source']=log_message.get_as_str('.splunk.source', '')
                        metricset[mk]['sourcetype']=log_message.get_as_str('.splunk.sourcetype', '')
                        metricset[mk]['index']=log_message.get_as_str('.splunk.index', '')
                        metricset[mk]['fields']={}

                        for field in log_message.keys():
                                dfield = field.decode("utf-8")
                                if dfield.startswith('fields.'):
                                        sfield=dfield[7:]
                                        metricset[mk]['fields'][sfield]=log_message.get_as_str(field, '', repr='internal')

                for k,v in dims.items():
                        metricset[mk]['fields'][k]=v


                metricset[mk]['fields'][f"metric_name:spl.sc4syslog.{mn}.{metric.replace('.', '_')}"] = value
        feed=False
        for k,v in metricset.items():
                if feed:
                        output.write("\n")
                feed=True
                output.write(json.dumps(v))
        message = output.getvalue()
        logger.debug(message)
        return message
};

template t_splunk_hec_metric_multi_v2 {
    template('$(python splunk_hec_metric_multi_v2)');
};
