# ===============================================================================================
# Internal sources
# ===============================================================================================


source s_internal {
    channel {
        source {
            internal();
        };
        

        rewrite { 
            r_set_splunk_dest_default(
                index('main')
                source("sc4s")
                sourcetype("sc4s:events")
                vendor_product('sc4s_events')
                template('t_5424_hdr_sdata_msg')
            ) 
        };
        rewrite {
            subst('^.*@','' value('HOST'));
            set("`SC4S_CONTAINER_HOST`", value("fields.sc4s_loghost") condition('`SC4S_CONTAINER_HOST`' ne ""));        
            set($LOGHOST, value("fields.sc4s_container") condition(match('container' template('${SC4S_DEST_SPLUNK_INDEXED_FIELDS}') type(string) flags(substring)) ));
            
        };

        if (message("Log statistics; " type('string') flags(prefix))) {

            rewrite {
                subst('.*Log statistics; ', '', value("MESSAGE"), flags("utf8" "global"));                
                subst('([^= ]+=\x27[^\(]+\(#anon[^,\)]+(?:,[^,]+,[^\)]+)?\)\=\d+\x27(?:, )?)', '', value("MESSAGE"), flags("utf8" "global"));
#Note special format for readability new line between metrics
                subst('\d\d\d\d-\d\d-\d\d-', '', value("MESSAGE"), flags("utf8" "global"));                
                
            };
            rewrite {                 
                r_set_splunk_dest_update(
                    template_hec("t_splunk_hec_metric_event")
                );
            }; 
            rewrite {                 
                r_set_splunk_dest_update(
                    index('em_metrics')
                    sourcetype("sc4s:metrics")
                    vendor_product("sc4s_metrics")
                    template_hec("t_splunk_hec_metric_single")
                    condition("`SC4S_DEST_SPLUNK_SC4S_METRICS_HEC`" eq "single" or "`SC4S_DEST_SPLUNK_SC4S_METRICS_HEC`" eq "yes")
                );
            }; 
            rewrite {                 
                r_set_splunk_dest_update(
                    index('em_metrics')
                    sourcetype("sc4s:metrics")
                    vendor_product("sc4s_metrics")
                    template_hec("t_splunk_hec_metric_multi")
                    condition("`SC4S_DEST_SPLUNK_SC4S_METRICS_HEC`" eq "multi")
                );
            }; 
            
        } else {
            rewrite { 
                r_set_splunk_dest_update(
                    vendor_product('null_queue')
                    condition(
                        match("Input is valid utf8, but the log message is not tagged as such," value("MESSAGE"))
                        or match("Syslog connection closed; fd=" value("MESSAGE"))
                        or match("Syslog connection accepted; fd=" value("MESSAGE"))                    
                    )
                ) 
            };
            rewrite {
                set('yes' value('.dest.global.stdout') condition( "$fields.sc4s_vendor_product}" ne "null_queue" ));
            };            
        };
        parser {p_add_context_splunk(); };
        parser (compliance_meta_by_source);

    }; 
};


source s_startup_out {
    channel {
        source {
            file("`SC4S_VAR`/log/syslog-ng.out"
            program-override("syslog-ng-config")
            flags(no-hostname,no-parse,assume-utf8)
            );
        };
        rewrite { 
            set("`SC4S_CONTAINER_HOST`", value("fields.sc4s_loghost") condition('`SC4S_CONTAINER_HOST`' ne ""));        
            set($LOGHOST, value("fields.sc4s_container") condition(match('container' template('${SC4S_DEST_SPLUNK_INDEXED_FIELDS}') type(string) flags(substring)) ));

            r_set_splunk_dest_default(
                source("sc4s")
                sourcetype("sc4s:events:startup:out")
                vendor_product("sc4s_events")
            )

        };
        parser {p_add_context_splunk(); };
        parser (compliance_meta_by_source);
    };
};

source s_startup_err {
    channel {
        source {
            file("`SC4S_VAR`/log/syslog-ng.err"
            program-override("syslog-ng-config")
            flags(no-hostname,no-parse,assume-utf8)
            );
        };
        rewrite { 
            set("`SC4S_CONTAINER_HOST`", value("fields.sc4s_loghost") condition('`SC4S_CONTAINER_HOST`' ne ""));        
            set($LOGHOST, value("fields.sc4s_container") condition(match('container' template('${SC4S_DEST_SPLUNK_INDEXED_FIELDS}') type(string) flags(substring)) ));
                
            r_set_splunk_dest_default(
                source("sc4s")
                sourcetype("sc4s:events:startup:err")
                vendor_product("sc4s_events")
            )
        };
        parser {p_add_context_splunk(); };
        parser (compliance_meta_by_source);
    };
};