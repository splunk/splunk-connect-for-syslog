# ===============================================================================================
# Internal sources
# ===============================================================================================


source s_internal {
    channel {
        source {
            internal();
        };

        rewrite {
            subst('^.*@','' value('HOST'));
            set("`SC4S_CONTAINER_HOST`", value("fields.sc4s_loghost") condition('`SC4S_CONTAINER_HOST`' ne ""));
            set("`SC4S_VERSION`", value("fields.sc4s_version") condition('`SC4S_VERSION`' ne ""));
            set($LOGHOST, value("fields.sc4s_container") condition(match('container' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring)) ));
        };

        if (message("Log statistics; " type('string') flags(prefix))) {

            rewrite {
                subst('.*Log statistics; ', '', value("MESSAGE"), flags("utf8" "global"));
                subst('([^= ]+=\x27[^\(]+\(#anon[^,\)]+(?:,[^,]+,[^\)]+)?\)\=\d+\x27(?:, )?)', '', value("MESSAGE"), flags("utf8" "global"));
                #Note special format for readability new line between metrics
                subst('\d\d\d\d-\d\d-\d\d-', '', value("MESSAGE"), flags("utf8" "global"));

            };
            if {
                filter {
                    "`SC4S_DEST_SPLUNK_SC4S_METRICS_HEC`" eq "event"
                };
                rewrite {
                    r_set_splunk_dest_default(
                        index('main')
                        sourcetype("sc4s:metrics")
                        vendor('splunk')
                        product('sc4s')
                        class("metrics")
                    );
                };
                rewrite {
                    r_set_splunk_dest_update(
                        template_hec("t_splunk_hec_metric_event")
                    );
                };
            } elif {
                filter {
                    "`SC4S_DEST_SPLUNK_SC4S_METRICS_HEC`" eq "single" or "`SC4S_DEST_SPLUNK_SC4S_METRICS_HEC`" eq "yes"
                };
                rewrite {
                    r_set_splunk_dest_default(
                        index('_metrics')
                        sourcetype("sc4s:metrics")
                        vendor('splunk')
                        product('sc4s')
                        class("metrics")
                    );
                };
                rewrite {
                    r_set_splunk_dest_update(
                        template_hec("t_splunk_hec_metric_single")
                    );
                };
            } elif {
                filter {
                   "`SC4S_DEST_SPLUNK_SC4S_METRICS_HEC`" eq "multi"
                };
                rewrite {
                    r_set_splunk_dest_default(
                        index('_metrics')
                        sourcetype("sc4s:metrics")
                        vendor('splunk')
                        product('sc4s')
                        class("metrics")
                    );
                };
                rewrite {
                    r_set_splunk_dest_update(
                        template_hec("t_splunk_hec_metric_multi")
                    );
                };
            } else {
                rewrite {
                    r_set_splunk_dest_default(
                        index('_metrics')
                        sourcetype("sc4s:metrics:v2")
                        vendor('splunk')
                        product('sc4s')
                        class("metrics")
                    );
                };
                rewrite {
                    r_set_splunk_dest_update(
                        template_hec("t_splunk_hec_metric_multi_v2")
                    );
                };
            };

        } else {
            rewrite {
                r_set_splunk_dest_default(
                    index('main')
                    source("sc4s")
                    sourcetype("sc4s:events")
                    vendor('splunk')
                    product('sc4s')
                    class("events")
                    template('t_5424_hdr_sdata_compact')
                )
            };
            if {
                filter {
                    match("Input is valid utf8, but the log message is not tagged as such," value("MESSAGE"))
                    or match("Syslog connection closed; fd=" value("MESSAGE"))
                    or match("Syslog connection accepted; fd=" value("MESSAGE"))
                    or match("xml-parser failed; " value("MESSAGE"))
                };
                rewrite(r_set_dest_splunk_null_queue);
            };           

        };
    };
};


source s_startup_out {
    channel {
        source {
            file("`SC4S_VAR`/log/syslog-ng.out"
            program-override("syslog-ng-config")
            flags(no-hostname,no-parse,assume-utf8)
            );
        };
        rewrite {
            set("`SC4S_CONTAINER_HOST`", value("fields.sc4s_loghost") condition('`SC4S_CONTAINER_HOST`' ne ""));
            set($LOGHOST, value("fields.sc4s_container") condition(match('container' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring)) ));

            r_set_splunk_dest_default(
                source("sc4s")
                sourcetype("sc4s:events:startup:out")
                vendor('splunk')
                product('sc4s')
                class("events")
            )

        };
    };
};

source s_startup_err {
    channel {
        source {
            file("`SC4S_VAR`/log/syslog-ng.err"
            program-override("syslog-ng-config")
            flags(no-hostname,no-parse,assume-utf8)
            );
        };
        rewrite {
            set("`SC4S_CONTAINER_HOST`", value("fields.sc4s_loghost") condition('`SC4S_CONTAINER_HOST`' ne ""));
            set($LOGHOST, value("fields.sc4s_container") condition(match('container' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring)) ));

            r_set_splunk_dest_default(
                source("sc4s")
                sourcetype("sc4s:events:startup:err")
                vendor('splunk')
                product('sc4s')
                class("events")
            )
        };
    };
};