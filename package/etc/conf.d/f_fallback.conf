# ===============================================================================================
# "Fallback" destination; all unprocessed messages end up here
# ===============================================================================================

log {
# ===============================================================================================
# Section 1:  source configuration
# Defaults: default source and ports as defined in s_sources.conf and syslog-ng.conf.
#
# IMPORTANT:  In order to ensure proper startup, select only one source in this section.
# If a source other than the default is used, ensure that any UDP/TCP protocol/port pairs passed
# are unique throughout the *entire* sylog-ng config.  If there are any port overlaps with those
# in source declarations from other filter files, an "Address already in use" error will occur
# at startup.
#
# NOTE:  The "Fallback" should not use any source other than the default.  Be extremely careful
# when defining an alternate source here.  Default ports can be changed in the global declarations
# in the main syslog-ng.conf file.
# ===============================================================================================

source(s_default-ports);

# ===============================================================================================
# Section 2:  parser configuration
# Default syslog-parser() should work for most messages
#
# If a new data source is not properly parsing using the default, you may wish to comment out 
# all parsers to see the raw message as it appeared "on the wire".  This can be useful for 
# creating custom parsers for non-syslog-compliant meessages.
#
# For the "Fallback" destination, no parser should be used so that the full unprocessed message
# can be seen, after which a parser/filter can be developed for production.
# ===============================================================================================

# This is "normal" RFC3164-formatted (BSD-syslog) messages. Always try this one first if unsure.
# parser { syslog-parser(time-zone(`default-timezone`)); };
# parser { date-parser(format("%Y-%m-%d %H:%M:%S") template("$(substr ${MESSAGE} 8 26)")); };
# parser { p_test-parser(); };

# For RFC5424-formatted messages, use this instead
# parser { syslog-parser(time-zone(`default-timezone`) flags(syslog-protocol)); };

# ===============================================================================================
# Section 3:  filter configuration
# Filter below may be omitted in the log path if a dedicated source is configured above
# Filter typically not used for a fallback destination
# ===============================================================================================

# filter { };

# ===============================================================================================
# Section 4:  destination configuration
# Select the desired destination to use in the log path from the three choices below,
# based on the transfer method (UF/HEC/Kafka) desired. Then, using the rewrite rule below,
# provide the sourcetype and optional index (if different from the default) for thie data
# source. Then, uncomment the second rewrite declartion to add any additional indexed fields
# desired.
# ===============================================================================================

# ===============================================================================================
# This fallback file should be the *only* one where the rewrite rules use the default index and
# sourcetype.  Use the "t_JSON or "t_msg_only" template here; check indexed event data in Splunk 
# for full message. This can be helpful to determine the compliance of message to standard syslog 
# formats, and as an aid for custom parser development for production.
# ===============================================================================================

#   rewrite { r_set_splunk(template("t_msg_only"))}; #--UF--
#   destination(d_splunk_logfile);  #--UF--
    rewrite { r_set_splunk(template("t_JSON"))}; #--HEC--
    destination(d_hec);  #--HEC--
#   rewrite { r_set_splunk(template("t_msg_only"))}; #--KAFKA--
#   destination(d_kafka);  #--KAFKA--
#   };

# ===============================================================================================
# Fallback flag set here; will catch all unfiltered traffic
# ===============================================================================================
flags(fallback);
};
