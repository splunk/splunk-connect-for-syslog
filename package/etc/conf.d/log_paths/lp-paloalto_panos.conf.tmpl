# PaloAlto PanOS
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "PALOALTO_PANOS" "parser" "rfc3164_version" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_paloalto_panos {
    tags("pan");
};

log {
    junction {
{{- if or (or (or (getenv  (print "SC4S_LISTEN_" $context.port_id "_TCP_PORT")) (getenv  (print "SC4S_LISTEN_" $context.port_id "_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_" $context.port_id "_TLS_PORT"))) (getenv  (print "SC4S_LISTEN_" $context.port_id "_RFC6587_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for PALOALTO_PANOS traffic
            source (s_PALOALTO_PANOS);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for PALOALTO_PANOS traffic
            source (s_DEFAULT);
            filter(f_paloalto_panos);
            flags(final);
        };
    };

    # Palo IETF (5424) event is entirely contained in $MESSAGE; for BSD format event needs to be constructed from
    # constituent parts.  LEGACY_MSGHDR is null in IETF so concatenation is a no-op (so no test is needed).

    parser {
        # Parse the date
        # 2012/04/10 04:39:55
        date-parser-nofilter(format(
                '%Y/%m/%d %H:%M:%S.%f',
                '%Y/%m/%d %H:%M:%S')
                template("${.pan.generated_time}")
        );
    };

    parser { p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
    rewrite {
        set("${.pan.dvc_name}" value("HOST") 
            condition( match('^.' value('.pan.dvc_name') )) );
    };
    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };

{{- if (print (getenv "SC4S_DEST_PALOALTO_PANOS_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_PALOALTO_PANOS_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_PALOALTO_PANOS_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_PALOALTO_PANOS_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_PALOALTO_PANOS_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_PALOALTO_PANOS" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_PALOALTO_PANOS_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_PALOALTO_PANOS_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_PALOALTO_PANOS_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
