# PaloAlto PanOS
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "PALOALTO_PANOS" "parser" "rfc3164_version" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_is_palalto_format{
    match("^rfc" value("fields.sc4s_syslog_format"))
};

filter f_paloalto_panos {
    message(',[0-9A-F]+,(THREAT|TRAFFIC|SYSTEM|CONFIG|HIPMATCH|CORRELATION|USERID),');
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_PALOALTO_PANOS_TCP_PORT")) (getenv  (print "SC4S_LISTEN_PALOALTO_PANOS_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_PALOALTO_PANOS_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for PALOALTO_PANOS traffic
            source (s_PALOALTO_PANOS);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for PALOALTO_PANOS traffic
            source (s_DEFAULT);
            filter(f_is_palalto_format);
            filter(f_paloalto_panos);
            flags(final);
        };
    };

    # Palo IETF (5424) event is entirely contained in $MESSAGE; for BSD format event needs to be constructed from
    # constituent parts.  LEGACY_MSGHDR is null in IETF so concatenation is a no-op (so no test is needed).

    rewrite {
        set("paloalto_panos", value("fields.sc4s_vendor_product"));
        set("${LEGACY_MSGHDR}${MESSAGE}" value("MESSAGE"));
    };

    parser {

        # We need the actual event time from the field GeneratedTime. Use csv-parser to extract it.
        csv-parser(
            columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time")
            prefix(".pan.")
            delimiters(',')
            );

        # Parse the date
        # 2012/04/10 04:39:55
        date-parser-nofilter(format(
                '%Y/%m/%d %H:%M:%S.%f',
                '%Y/%m/%d %H:%M:%S')
                template("${.pan.generated_time}")
        );
    };

    
    if (match('THREAT', value('.pan.type'))) {
        parser {
            csv-parser(
                columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","src_ip","dest_ip","src_translated_ip","dest_translated_ip","rule","src_user","dest_user","app","vsys","src_zone","dest_zone","src_interface","dest_interface","log_forwarding_profile","future_use3","session_id","repeat_count","src_port","dest_port","src_translated_port","dest_translated_port","session_flags","transport","action","misc","threat","raw_category","severity","direction","sequence_number","action_flags","src_location","dest_location","future_use4","content_type","pcap_id","file_hash","cloud_address","url_index","user_agent","file_type","xff","referrer","sender","subject","recipient","report_id","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name")
                prefix(".pan.")
                delimiters(',')
                quote-pairs('""')
                flags(escape-double-char)
            );
        };
        rewrite { r_set_splunk_dest_default(sourcetype("pan:threat"))};
        parser {p_add_context_splunk(key("pan_threat")); };
    } elif (match('TRAFFIC', value('.pan.type'))) {    
        parser {
            csv-parser(
                columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","src_ip","dest_ip","src_translated_ip","dest_translated_ip","rule","src_user","dest_user","app","vsys","src_zone","dest_zone","src_interface","dest_interface","log_forwarding_profile","future_use3","session_id","repeat_count","src_port","dest_port","src_translated_port","dest_translated_port","session_flags","transport","action","bytes","bytes_out","bytes_in","packets","start_time","duration","http_category","future_use4","sequence_number","action_flags","src_location","dest_location","future_use5","packets_out","packets_in","session_end_reason","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name")
                prefix(".pan.")
                delimiters(',')
                quote-pairs('""')
                flags(escape-double-char)
            );
        };
        rewrite { r_set_splunk_dest_default(sourcetype("pan:traffic"))};
        parser {p_add_context_splunk(key("pan_traffic")); };
    } elif (match('SYSTEM', value('.pan.type'))) {    
        parser {
            csv-parser(
                columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","vsys","event_id","object","future_use3","future_use4","module","severity","description","sequence_number","action_flags","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name")
                prefix(".pan.")
                delimiters(',')
                quote-pairs('""')
                flags(escape-double-char)
            );
        };
        rewrite { r_set_splunk_dest_default(sourcetype("pan:system"))};
        parser {p_add_context_splunk(key("pan_system")); };
    } elif (match('CONFIG', value('.pan.type'))) {    
        parser {
            csv-parser(
                columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","host_name","vsys","command","admin","client","result","configuration_path","sequence_number","action_flags","before_change_detail","after_change_detail","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name")
                prefix(".pan.")
                delimiters(',')
                quote-pairs('""')
                flags(escape-double-char)
            );
        };
        rewrite { r_set_splunk_dest_default(sourcetype("pan:config"))};
        parser {p_add_context_splunk(key("pan_config")); };
    } elif (match('HIPMATCH', value('.pan.type'))) {    
        parser {
            csv-parser(
                columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","src_user","vsys","host_name","os","src_ip","hip_name","hip_count","hip_type","future_use3","future_use4","sequence_number","action_flags","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name")
                prefix(".pan.")
                delimiters(',')
                quote-pairs('""')
                flags(escape-double-char)
            );
        };
        rewrite { r_set_splunk_dest_default(sourcetype("pan:hipmatch"))};
        parser {p_add_context_splunk(key("pan_hipmatch")); };
    } elif (match('CORRELATION', value('.pan.type'))) {    
        parser {
            csv-parser(
                columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","src_ip","src_user","vsys","category","severity","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name","vsys_id","object","object_id","evidence")
                prefix(".pan.")
                delimiters(',')
                quote-pairs('""')
                flags(escape-double-char)
            );
        };
        rewrite { r_set_splunk_dest_default(sourcetype("pan:correlation"))};
        parser {p_add_context_splunk(key("pan_correlation")); };
    } elif (match('USERID', value('.pan.type'))) {    
        parser {
            csv-parser(
                columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","vsys","src_ip","source_name","event_id","repeat_count","timeout_threshold","src_port","dest_port","source","source_type","sequence_number","action_flags","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name")
                prefix(".pan.")
                delimiters(',')
                quote-pairs('""')
                flags(escape-double-char)
            );
        };
        rewrite { r_set_splunk_dest_default(sourcetype("pan:userid"))};
        parser {p_add_context_splunk(key("pan_userid")); };
    } elif (match('GLOBALPROTECT', value('.pan.type'))) {    
        parser {
            csv-parser(
                columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","vsys","src_ip","source_name","event_id","repeat_count","timeout_threshold","src_port","dest_port","source","source_type","sequence_number","action_flags","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name")
                prefix(".pan.")
                delimiters(',')
                quote-pairs('""')
                flags(escape-double-char)
            );
        };
        rewrite { r_set_splunk_dest_default(sourcetype("pan:globalprotect"))};
        parser {p_add_context_splunk(key("pan_globalprotect")); };
    } else {
        parser {
            csv-parser(
                columns()
                prefix(".pan.")
                delimiters(',')
                quote-pairs('""')
                flags(escape-double-char)
            );
        };
        rewrite { r_set_splunk_dest_default(sourcetype("pan:log"))};
        parser {p_add_context_splunk(key("pan_log")); };
    };
    rewrite {
        #Set both HOST and .splunk.host to allow compliance override
        set("${.pan.dvc_name}" value(".splunk.host")
            condition( match('^.' value('.pan.dvc_name') )) );
        set("${.pan.dvc_name}" value("HOST") 
            condition( match('^.' value('.pan.dvc_name') )) );
    };

    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_PALOALTO_PANOS_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_PALOALTO_PANOS" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_PALOALTO_PANOS_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_PALOALTO_PANOS_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

    flags(flow-control,final);
};
