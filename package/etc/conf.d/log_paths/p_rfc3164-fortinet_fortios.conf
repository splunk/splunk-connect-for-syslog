log {
    source(s_default-ports);
    filter(f_is_rfc3164);
    filter(f_fortinet_fortios);

    parser {
        kv-parser(prefix(".kv.") template("${MSGHDR} ${MSG}"));
        date-parser(format("%Y-%m-%d:%H:%M:%S") template("${.kv.date}:${.kv.time}") time-zone(`default-timezone`));
    };

    rewrite { set("${.kv.devname}", value("HOST")); };

    #set the source type based on program field and lookup index from the splunk context csv
    if (match("traffic" value(".kv.type"))) {
       parser {p_add_context_splunk(key("fgt_traffic")); };
    } elif (match("utm" value(".kv.type"))) {
       parser {p_add_context_splunk(key("fgt_utm")); };
    } elif (match("event" value(".kv.type"))) {
       parser {p_add_context_splunk(key("fgt_event")); };
    } else {
       parser {p_add_context_splunk(key("fgt_log")); };
    };

    #rewrite the final message for splunk json
    #sourcetype and index are set in the filter defaults won't be used
    rewrite {r_set_splunk(template("t_standard")) }; #--HEC--
    destination(d_hec);  #--HEC--

    flags(flow-control);
};

