# Mcafee EPO (Structured, RFC5424-compliant)
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "MCAFEE_EPO_STRUCTURED" "parser" "rfc5424_strict" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_mcafee_epo {
    program("EPOEvents")
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_MCAFEE_EPO_STRUCTURED_TCP_PORT")) (getenv  (print "SC4S_LISTEN_MCAFEE_EPO_STRUCTURED_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_MCAFEE_EPO_STRUCTURED_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for MCAFEE_EPO_STRUCTURED traffic
            source (s_MCAFEE_EPO_STRUCTURED);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for MCAFEE_EPO_STRUCTURED traffic
            source (s_DEFAULT);
            filter(f_is_rfc5424_strict);
            filter(f_mcafee_epo);
            flags(final);
        };
    };

    if {
        filter {
            message('ProductName="([^"]+)"' flags(store-matches));
        };
        rewrite {
            set("$(lowercase $1)" value(".mcafee.product"));
            subst('\s', '_', value(".mcafee.product") flags("global"));
            r_set_splunk_dest_default(sourcetype("mcafee:epo:syslog"), source("${.mcafee.product}"))
        };    
    } else {
        # If the product is not provided by EPO we will just use a constant for the value
   	    rewrite {
	      	set("mcafee_epo", value("fields.sc4s_vendor_product"));
		      r_set_splunk_dest_default(sourcetype("mcafee:epo:syslog"), source("epo"))
  	    };    

    };

    parser {p_add_context_splunk(key("mcafee_epo")); };
    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };

{{- if (print (getenv "SC4S_DEST_MCAFEE_EPO_STRUCTURED_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_MCAFEE_EPO_STRUCTURED_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_MCAFEE_EPO_STRUCTURED_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_MCAFEE_EPO_STRUCTURED_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_MCAFEE_EPO_STRUCTURED_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_MCAFEE_EPO_STRUCTURED" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_MCAFEE_EPO_STRUCTURED_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_MCAFEE_EPO_STRUCTURED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_MCAFEE_EPO_STRUCTURED_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
