# Fallback for un-parsed sources

log {
    source(s_DEFAULT);

    rewrite { set("SC4S_fallback", value("fields.sc4s_vendor_product")); };

    if {
        filter(f_is_rfc5424_strict);
        rewrite { r_set_splunk_dest_default(sourcetype("sc4s:fallback")); };
        parser { p_add_context_splunk(key("sc4s_fallback")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_JSON_5424))" value("MSG")); };

    } else {

        rewrite { r_set_splunk_dest_default(sourcetype("sc4s:fallback")); };
        parser { p_add_context_splunk(key("sc4s_fallback")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_JSON_3164))" value("MSG")); };
    };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_FALLBACK_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_FALLBACK" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_FALLBACK_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_FALLBACK_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

    flags(flow-control,fallback);
};
