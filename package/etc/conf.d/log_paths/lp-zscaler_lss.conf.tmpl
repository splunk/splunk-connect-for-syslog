# Zscaler

{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "ZSCALER_LSS" "parser" "common" }}
{{- tmpl.Exec "t/source_network.t" $context }}

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_ZSCALER_LSS_TCP_PORT")) (getenv  (print "SC4S_LISTEN_ZSCALER_LSS_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_ZSCALER_LSS_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for ZSCALER_LSS traffic
            source (s_ZSCALER_LSS);
            parser {
                #.jsonLog.Timestamp Mar 04 20:37:53 2020
                date-parser-nofilter(
                format('%a %b %d %H:%M:%S %Y',
                       '%a %b %d %k:%M:%S %Y')
                template("${.json.LogTimestamp}")
                );
            };
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for ZSCALER_LSS traffic
            source (s_DEFAULT);
            filter(f_msg_is_tcp_json);
            parser {
                #.jsonLog.Timestamp Mar 04 20:37:53 2020
                date-parser(
                format('%a %b %d %H:%M:%S %Y',
                       '%a %b %d %k:%M:%S %Y')
                template("${.json.LogTimestamp}")
                time-zone({{- getenv "SC4S_DEFAULT_TIMEZONE" "GMT"}})
                flags(guess-timezone)
                );
            };
            flags(final);
        };
    };

    if {
        filter {
            match('.' value('.json.ClientZEN'))
            and match('.' value('.json.AppGroup'))
            and match('.' value('.json.Application'))
        };
        rewrite { r_set_splunk_dest_default(sourcetype("zscalerlss-zpa-app"))};
        parser { p_add_context_splunk(key("zscaler_lss")); };
    } elif {
        filter {
            match('.' value('.json.Exporter'))
            and match('.' value('.json.Customer'))
            and match('.' value('.json.ConnectionID'))
        };
        rewrite { r_set_splunk_dest_default(sourcetype("zscalerlss-zpa-bba"))};
        parser { p_add_context_splunk(key("zscaler_lss")); };
    } elif {
        filter {
            match('.' value('.json.Connector'))
            and match('.' value('.json.Customer'))
            and match('.' value('.json.ConnectorGroup'))
        };
        rewrite { r_set_splunk_dest_default(sourcetype("zscalerlss-zpa-connector"))};
        parser { p_add_context_splunk(key("zscaler_lss")); };
    } elif {
        filter {
            match('.' value('.json.SAMLAttributes'))
            and match('.' value('.json.Customer'))
        };
        rewrite { r_set_splunk_dest_default(sourcetype("zscalerlss-zpa-auth"))};
        parser { p_add_context_splunk(key("zscaler_lss")); };
    } else {
        rewrite {
            set("zscaler_lss_rogue_message", value("fields.sc4s_vendor_product"));
            set("rogue-zscaler_lss", value("fields.sc4s_error"));
            r_set_splunk_dest_default(sourcetype("zscalerlss:rogue"))
        };
        parser { p_add_context_splunk(key("zscaler_lss")); };
        # Rogue message needs a different template than valid LSS events.  Final rewrite (further below) will be a
        # no-op in this case.
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };
    };

    # Parser for all valid LSS events.  Rogue events, having previously loaded $MSG with the entire payload,
    # will be unaffected by the rewrite here.
    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };
    
{{- if (print (getenv "SC4S_DEST_ZSCALER_LSS_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_ZSCALER_LSS_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_ZSCALER_LSS_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_ZSCALER_LSS_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_ZSCALER_LSS_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_ZSCALER_LSS" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_ZSCALER_LSS_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_ZSCALER_LSS_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_ZSCALER_LSS_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
