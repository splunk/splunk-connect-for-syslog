#Ubiquiti unifi
{{ $context := dict "port_id" "UBIQUITI_UNIFI" "parser" "common"}}
{{ tmpl.Exec "t/source_network.t" $context }}

# The following is an inline template; we will use this to generate the actual log path
{{ define "log_path" }}
log {
{{- if eq (.) "yes"}}
    source(s_DEFAULT);
    filter(f_is_rfc3164);
    filter(f_ubiquiti_unifi);
{{- end}}
{{- if eq (.) "no"}}
    source (s_UBIQUITI_UNIFI);
{{- end}}


    parser {p_add_context_splunk(key("ubiquiti_unifi")); };

    #Fiewall
    if {
        filter {
            match("ubiquiti_unifi_fw", value("fields.sc4s_vendor_product") type(glob) );
        };

        if (match("[^)]\s\S+\skernel:\s[^ll\sheader][^\[\d+.\d+\]]\S+\s\w+:" value("RAWMSG"))) {
            rewrite { r_set_splunk_dest_default(sourcetype("ubnt:threat"), index("netids"))
            set("${LEGACY_MSGHDR}${MSG}" value("MSG"));};
            parser {p_add_context_splunk(key("ubiquiti_unifi_threat")); };
        } elif (match("\S+\slinkcheck:" value("RAWMSG"))) {
            rewrite { r_set_splunk_dest_default(sourcetype("ubnt:link"), index("netops"))
            set("${LEGACY_MSGHDR}${MSG}" value("MSG"));};
            parser {p_add_context_splunk(key("ubiquiti_unifi_link")); };
        } elif (match("\d+:\d+:\d+\s\S+\ssudo:" value("RAWMSG"))) {
            rewrite { r_set_splunk_dest_default(sourcetype("ubnt:sudo"), index("netops"))
            set("${LEGACY_MSGHDR}${MSG}" value("MSG"));};
            parser {p_add_context_splunk(key("ubiquiti_unifi_sudo")); };
        } else {
            rewrite {
                r_set_splunk_dest_default(sourcetype("ubnt:fw"), index("netfw"));
                set("${LEGACY_MSGHDR}${MSG}" value("MSG"));
            };
            parser {p_add_context_splunk(key("ubiquiti_unifi_fw")); };
        };
    #Switch
    } elif {
        filter {
            host('^(?<model>US[^,]{1,10}),(?<serial>[a-z0-9]{9,16}),(?<firmware>v\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,6})', flags("store-matches"));
        };
        if (match("hostapd:\s+ath" value("RAWMSG"))) {
            rewrite {
                r_set_splunk_dest_default(sourcetype("ubnt:hostapd"), index("netops"));
                set("${LEGACY_MSGHDR}${MSG}" value("MSG"));
                set("${HOST_FROM}", value("HOST"));
            };
            parser {p_add_context_splunk(key("ubiquiti_unifi_wireless")); };
        } elif (match("\d+:\d+:\d+\s\S+\smcad:" value("RAWMSG"))) {
            rewrite {
                r_set_splunk_dest_default(sourcetype("ubnt:mcad"), index("netops"));
                set("${LEGACY_MSGHDR}${MSG}" value("MSG"));
                set("${HOST_FROM}", value("HOST"));
            };
            parser {p_add_context_splunk(key("ubiquiti_unifi_wireless")); };
        } else {
            rewrite {
                r_set_splunk_dest_default(sourcetype("ubnt:switch"), index("netops"));
                set("${LEGACY_MSGHDR}${MSG}" value("MSG"));
                set("${FROM_HOST}",value("HOST"));
                set("${model}", value("fields.model"));
                set("${serial}", value("fields.serial"));
                set("${firmware}", value("fields.firmware"));
            };
            parser {p_add_context_splunk(key("ubiquiti_unifi_switch")); };

        };

    } elif {
        filter {
            program('^(?<model>U\d[^,]{1,10}),(?<serial>[a-z0-9]{9,16}),(?<firmware>v\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,6})', flags("store-matches"));
        };
        rewrite {
            r_set_splunk_dest_default(sourcetype("ubnt:wireless"), index("netops"));
            set("${FROM_HOST}",value("HOST"));
            set("${model}", value("fields.model"));
            set("${serial}", value("fields.serial"));
            set("${firmware}", value("fields.firmware"));
        };
       parser {p_add_context_splunk(key("ubiquiti_unifi_wireless")); };

    } elif (match("traputil.c\(696\) " value("RAWMSG"))) {
        rewrite {
            r_set_splunk_dest_default(sourcetype("ubnt:edgeswitch"), index("netops"));
            set("${HOST_FROM}", value("HOST"));
            set("${LEGACY_MSGHDR}${MSG}" value("MSG"));
        };
       parser {p_add_context_splunk(key("ubiquiti_unifi_edge_switch")); };

    } else {
       rewrite {
        r_set_splunk_dest_default(sourcetype("ubnt"), index("netops"));
        set("${HOST_FROM}", value("HOST"));
        set("${LEGACY_MSGHDR}${MSG}" value("MSG"));
       };
       parser {p_add_context_splunk(key("ubiquiti_unifi")); };
    };


    parser (compliance_meta_by_source);

    #We want to unset the fields we won't need, as this is copied into the
    #disk queue for network destinations. This can be very disk expensive
    #if we don't
    rewrite {

        unset(value("RAWMSG"));
        unset(value("PROGRAM"));
        unset(value("LEGACY_MSGHDR"));
    };

    destination(d_hec);

{{- if (getenv "SC4S_ARCHIVE_GLOBAL") or (getenv "SC4S_ARCHIVE_UBIQUITI_UNIFI") }}
    destination(d_archive);
{{- end}}

    flags(flow-control);

};
{{- end}}

{{- if or (or (getenv  (print "SC4S_LISTEN_UBIQUITI_UNIFI_TCP_PORT")) (getenv  (print "SC4S_LISTEN_UBIQUITI_UNIFI_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_UBIQUITI_UNIFI_TLS_PORT")) }}
# Listen on the specified dedicated port(s) for UBIQUITI_UNIFI traffic
    {{tmpl.Exec "log_path" "no" }}
{{- end}}

# Listen on the default port (typically 514) for UBIQUITI_UNIFI traffic
{{tmpl.Exec "log_path" "yes" }}
