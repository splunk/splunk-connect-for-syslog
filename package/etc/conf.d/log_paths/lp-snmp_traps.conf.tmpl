# SNMP trap collection
# Enable with "SC4S_SNMP_TRAP_COLLECT=yes" in env_var

{{- if eq (getenv "SC4S_SNMP_TRAP_COLLECT" "no") "yes"}}
log {
    source {snmptrap(
            filename("`SC4S_VAR`/log/snmptrapd.log")
            );
        };

    rewrite { r_set_splunk_dest_default(sourcetype("snmp:trap"))};
    parser {p_add_context_splunk(key("snmp_trap")); };

    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_snmp_trap))" value("MSG")); };

{{- if (print (getenv "SC4S_DEST_SNMP_TRAPS_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_SNMP_TRAPS_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_SNMP_TRAPS_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_SNMP_TRAPS_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_SNMP_TRAPS_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if eq (getenv "SC4S_DEBUG_STDOUT" "yes") "no"}}
    destination(d_stdout);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_SNMP_TRAPS_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_SNMP_TRAPS_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_SNMP_TRAPS_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
 };
{{- end }}
