# PaloAlto PanOS
{{ $context := dict "port_id" "PALOALTO_PANOS" "parser" "common" }}
{{ tmpl.Exec "t/source_network.t" $context }}
# The following is an inline template; we will use this to generate the actual log path
{{ define "log_path" }}
log {
{{- if eq (.) "yes"}}
    source(s_DEFAULT);
    filter(f_is_rfc3164);
    filter(f_paloalto_panos);
{{- end}}
{{- if eq (.) "no"}}
    source (s_PALOALTO_PANOS);
{{- end}}

    # The palo message does not include a program value in the header, unfortunately.
    # The use of colon in the message tricks the RFC3164 parser; We will re-write the message
    # so the parser will not incorrectly break it apart.
    # While we are at it we will save the mesage type into the program field so parser can find it.

    rewrite {
        set("paloalto_panos", value("fields.sc4s_vendor_product"));
        set("${LEGACY_MSGHDR}${MESSAGE}" value("MESSAGE"));
        unset(value("LEGACY_MSGHDR"));
        unset(value("PROGRAM"));
    };
    parser {
        #basic parsing

        #we need to actual even time from the field GeneratedTime. Use csv-parser to extract it.
        csv-parser(
            columns('FUTURE_USE', 'ReceiveTime', 'SerialNumber', 'Type', 'Subtype', 'FUTURE_USE2', 'GeneratedTime')
            prefix(".pan.")
            delimiters(',')
            );
        #2012/04/10 04:39:55
        #parse the date
        date-parser(
                format("%Y/%m/%d %H:%M:%S")
                template("${.pan.GeneratedTime}")
                time-zone({{- getenv "SC4S_DEFAULT_TIMEZONE" "GMT"}})
                flags(guess-timezone)
        );
    };

    #set the source type based on program field and lookup index from the splunk_context csv

    if (message(',\d+,THREAT')) {
        rewrite { r_set_splunk_dest_default(sourcetype("pan:threat"), index("netproxy"))};
        parser {p_add_context_splunk(key("pan_threat")); };
    } elif (message(',\d+,TRAFFIC')) {
        rewrite { r_set_splunk_dest_default(sourcetype("pan:traffic"), index("netfw"))};
        parser {p_add_context_splunk(key("pan_traffic")); };
    } elif (message(',\d+,SYSTEM')) {
        rewrite { r_set_splunk_dest_default(sourcetype("pan:system"), index("netops"))};
        parser {p_add_context_splunk(key("pan_system")); };
    } elif (message(',\d+,CONFIG')) {
        rewrite { r_set_splunk_dest_default(sourcetype("pan:config"), index("netops"))};
        parser {p_add_context_splunk(key("pan_config")); };
    } elif (message(',\d+,HIPWATCH')) {
        rewrite { r_set_splunk_dest_default(sourcetype("pan:hipwatch"), index("main"))};
        parser {p_add_context_splunk(key("pan_hipwatch")); };
    } elif (message(',\d+,CORRELATION')) {
        rewrite { r_set_splunk_dest_default(sourcetype("pan:correlation"), index("main"))};
        parser {p_add_context_splunk(key("pan_correlation")); };
    } elif (message(',\d+,USERID')) {
        rewrite { r_set_splunk_dest_default(sourcetype("pan:userid"), index("netauth"))};
        parser {p_add_context_splunk(key("pan_userid")); };
    } else {
        rewrite { r_set_splunk_dest_default(sourcetype("pan:log"), index("netops"))};
        parser {p_add_context_splunk(key("pan_log")); };
    };

    parser (compliance_meta_by_source);

    #We want to unset the fields we won't need, as this is copied into the
    #disk queue for network destinations. This can be very disk expensive
    #if we don't
    rewrite {
        set("$(template ${fields.sc4s_template} $(template t_hdr_msg))" value("MSG"));
        unset(value("RAWMSG"));
        unset(value("PROGRAM"));
        unset(value("LEGACY_MSGHDR"));
        groupunset(values(".pan.*"));
    };

    destination(d_hec);

{{- if (getenv "SC4S_ARCHIVE_GLOBAL") or (getenv "SC4S_ARCHIVE_PALOALTO_PANOS") }}
    destination(d_archive);
{{- end}}

    flags(flow-control);
};
{{- end}}
{{- if (ne (getenv (print "SC4S_LISTEN_PALOALTO_PANOS_TCP_PORT") "no") "no") or (ne (getenv (print "SC4S_LISTEN_PALOALTO_PANOS_UDP_PORT") "no") "no") or (ne (getenv (print "SC4S_LISTEN_PALOALTO_PANOS_TLS_PORT") "no") "no") }}
# Listen on the specified dedicated port(s) for PALOALTO_PANOS traffic
    {{ tmpl.Exec "log_path" "no" }}
{{- end}}

# Listen on the default port (typically 514) for PALOALTO_PANOS traffic
{{ tmpl.Exec "log_path" "yes" }}
