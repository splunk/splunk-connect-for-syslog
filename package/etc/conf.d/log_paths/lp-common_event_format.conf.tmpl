# Common Event Format
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CEF" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

parser p_cef_header {
    csv-parser(
        columns("fields.cef_version", "fields.cef_device_vendor", "fields.cef_device_product", "fields.cef_device_version", "fields.cef_device_event_class", "fields.cef_name", "fields.cef_severity", MESSAGE)
        delimiters(chars("|"))
        template(t_legacy_hdr_msg)
        flags(strip-whitespace, escape-none, greedy)
    );

    kv-parser(prefix(".cef.") template("t_msg_trim")
    );

};

parser p_cef_ts_rt {
    date-parser-nofilter(format(
                '%s.%f',
                '%s',
                '%b %d %H:%M:%S',
                '%b %d %Y %H:%M:%S')
                template("${.cef.rt}")
    );
};
parser p_cef_ts_end {
    date-parser-nofilter(format(
                '%s.%f',
                '%s',
                '%b %d %H:%M:%S',
                '%b %d %Y %H:%M:%S')
                template("${.cef.end}")
    );
};

parser p_cef_class {
    add-contextual-data(
        selector("${fields.cef_device_vendor}_${fields.cef_device_product}_${fields.cef_device_event_class}"),
        database("conf.d/local/context/splunk_metadata.csv")
        ignore-case(yes)
        prefix(".splunk.")
    );
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_CEF_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CEF_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CEF_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CEF traffic
            source (s_CEF);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for CEF traffic
            source (s_DEFAULT);
            filter(f_cef);
            flags(final);
        };
    };

    rewrite {
        r_set_splunk_dest_default(sourcetype("cef"))
        set("CEF" value("fields.sc4s_syslog_format"));
    };

    parser (p_cef_header);

    rewrite {
        set("${fields.cef_device_vendor}_${fields.cef_device_product}", value("fields.sc4s_vendor_product"));
    };

    # We already have the syslog msg time stamp however that may not be the best one
    # If we have an rt or end field that is best we use the If trick here so if this parser fails
    # We don't get sent to fallback.
    if {
        filter{
            match('^.', value('.cef.rt'))
        };
        parser (p_cef_ts_rt);
    } elif {
        filter{
            match('^.', value('.cef.end'))
        };
        parser (p_cef_ts_end);
    } else {
    }; #Do nothing this is allows for both rt and end to be missing and still pass with the message ts

    # CEF TAs use the source as their bounds in props.conf
    # CEF source entries in splunk_metadata.csv should reflect the proper source as well as sourcetype

    parser {
        p_add_context_splunk(key("${fields.cef_device_vendor}_${fields.cef_device_product}"));
    };
    parser(p_cef_class);

    parser (compliance_meta_by_source);

    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CEF_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CEF" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_CEF_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_CEF_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

    flags(flow-control,final);
};
