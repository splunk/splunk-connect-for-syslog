# Generate the custom port if defined
{{ $context := dict "port_id" "CHECKPOINT_SPLUNK" "parser" "common" }}
{{ tmpl.Exec "t/source_network.t" $context }}

# The following is an inline template; we will use this to generate the actual log path
{{ define "log_path" }}
log {
{{- if eq (.) "yes"}}
    source(s_DEFAULT);
    filter(f_is_rfc3164);
    filter(f_checkpoint_splunk);
{{- end}}
{{- if eq (.) "no"}}
    source (s_CHECKPOINT_SPLUNK);
{{- end}}

    parser {
        kv-parser(prefix(".kv.") pair-separator("|") template("${MSGHDR} ${MSG}"));
        date-parser(format("%s") template("${.kv.time}") time-zone({{- getenv "SC4S_DEFAULT_TIMEZONE" "GMT"}}) flags(guess-timezone));
    };

    rewrite {
        set("${.kv.hostname}", value("HOST"));
        set("checkpoint_splunk", value("fields.sc4s_vendor_product"));
        r_set_splunk_dest_default(sourcetype("cp_log"), index("netops"))
    };

    parser {p_add_context_splunk(key("checkpoint_splunk")); };

    if  {
       filter(f_checkpoint_splunk_NetworkTraffic);
       rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("firewall"), index("netfw"))};
       parser {p_add_context_splunk(key("checkpoint_splunk_firewall")); };
    } elif  {
       filter(f_checkpoint_splunk_Web);
       rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("web"), index("netproxy"))};
       parser {p_add_context_splunk(key("checkpoint_splunk_web")); };
    } elif  {
       filter(f_checkpoint_splunk_NetworkSessions);
       rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("sessions"), index("netops"))};
       parser {p_add_context_splunk(key("checkpoint_splunk_sessions")); };
    } elif  {
       filter(f_checkpoint_splunk_IDS_Malware);
       rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("ids_malware"), index("netids"))};
       parser {p_add_context_splunk(key("checkpoint_splunk_ids")); };
    } elif  {
       filter(f_checkpoint_splunk_IDS);
       rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("ids"), index("netids"))};
       parser {p_add_context_splunk(key("checkpoint_splunk_ids")); };
    } elif  {
       filter(f_checkpoint_splunk_email);
       rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("email"), index("email"))};
       parser {p_add_context_splunk(key("checkpoint_splunk_email")); };
    } elif  {
       filter(f_checkpoint_splunk_DLP);
       rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("firewall"), index("netdlp"))};
       parser {p_add_context_splunk(key("checkpoint_splunk_dlp")); };
    };

    parser (compliance_meta_by_source);

    #We want to unset the fields we won't need, as this is copied into the
    #disk queue for network destinations. This can be very disk expensive
    #if we don't
    rewrite {
        set("$(template ${fields.sc4s_template} $(template t_hdr_msg))" value("MSG"));
        unset(value("RAWMSG"));
        unset(value("PROGRAM"));
        unset(value("LEGACY_MSGHDR"));
        groupunset(values(".kv.*"));
    };

    destination(d_hec);

{{- if (getenv "SC4S_ARCHIVE_GLOBAL") or (getenv "SC4S_ARCHIVE_CHECKPOINT_SPLUNK") }}
    destination(d_archive);
{{- end}}

    flags(flow-control);
};
{{- end}}
{{- if (ne (getenv (print "SC4S_LISTEN_CHECKPOINT_SPLUNK_TCP_PORT") "no") "no") or (ne (getenv (print "SC4S_LISTEN_CHECKPOINT_SPLUNK_UDP_PORT") "no") "no") or (ne (getenv (print "SC4S_LISTEN_CHECKPOINT_SPLUNK_TLS_PORT") "no") "no") }}
# Listen on the specified dedicated port(s) for CHECKPOINT_SPLUNK traffic
    {{ tmpl.Exec "log_path" "no" }}
{{- end}}

# Listen on the default port (typically 514) for CHECKPOINT_SPLUNK traffic
{{ tmpl.Exec "log_path" "yes" }}
