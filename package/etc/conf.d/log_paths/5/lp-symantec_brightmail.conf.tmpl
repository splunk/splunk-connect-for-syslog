# Symantec Brightmail
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "SYMANTEC_BRIGHTMAIL" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_symantec_brightmail {
      not tags("log_path_known") and
    (message('\[Brightmail\]') or program("bmserver"))
};
filter f_symantec_brightmail_details {
    program("bmserver") and not message('\[Brightmail\]')
};

{{- if (conv.ToBool (getenv "SC4S_SOURCE_FF_SYMANTEC_BRIGHTMAIL_GROUPMSG" "yes")) }}
filter f_symantec_brightmail_complete{
    match("yes", value("SMG.COMPLETE") type(glob));
};

parser symantec_brightmail_grouping {
    csv-parser(
        columns(PID, SMG.seq, MESSAGE)
        delimiters(chars("|"))
        flags(greedy)
    );
    grouping-by(
        scope(program)
        key("${SMG.seq}")
        timeout(2)
        aggregate(
             value("MESSAGE" "${PID}|${SMG.seq}|$(implode ';' $(context-values ${MESSAGE}))")
             value("SMG.COMPLETE" "yes")
        )
    );
};
{{- end }}

log {
    junction {
        channel {
        # Listen on the specified dedicated port(s) for SYMANTEC_BRIGHTMAIL traffic
            source (s_SYMANTEC_BRIGHTMAIL);
            flags (final);
	    };
        channel {
        # Listen on the default port (typically 514) for SYMANTEC_BRIGHTMAIL traffic
            source (s_DEFAULT);
            filter(f_is_rfc3164);
            filter(f_symantec_brightmail);
            flags(final);
        };
    };

{{- if (conv.ToBool (getenv "SC4S_SOURCE_FF_SYMANTEC_BRIGHTMAIL_GROUPMSG" "yes")) }}
    if {

        filter(f_symantec_brightmail_details);
        parser(symantec_brightmail_grouping);

        if {
            filter(f_symantec_brightmail_complete);

            rewrite {
                set("symantec_brightmail", value("fields.sc4s_vendor_product"));
                r_set_splunk_dest_default(sourcetype("symantec:smg:mail"),  source("program:${.PROGRAM}"))
            };
            parser { p_add_context_splunk(key("symantec_brightmail")); };
            parser (compliance_meta_by_source);
            rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };

            {{- if (print (getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

            if (filter({{ print (getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_ALT_FILTER") }})) {
            {{- if (print (getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_FILTERED_ALTERNATES")) }}
                {{ getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n                destination(" }});
            {{- end }}
            }
            else {
            {{- end }}

            {{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_HEC" "no")) }}
            destination(d_hec);
            {{- end}}

            {{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_SYMANTEC_BRIGHTMAIL" "no")) }}
            destination(d_archive);
            {{- end}}

            {{- if (print (getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_ALT_FILTER")) }}
            };
            {{- end }}
        };
    } else {
{{- end }}

        rewrite {
            set("symantec_brightmail", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("symantec:smg"),  source("program:${.PROGRAM}"))
        };
        parser { p_add_context_splunk(key("symantec_brightmail")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };

        {{- if (print (getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

        if (filter({{ print (getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_ALT_FILTER") }})) {
        {{- if (print (getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_FILTERED_ALTERNATES")) }}
            {{ getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n            destination(" }});
        {{- end }}
        }
        else {
        {{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_HEC" "no")) }}
        destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_SYMANTEC_BRIGHTMAIL" "no")) }}
        destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_ALT_FILTER")) }}
        };
{{- end }}
{{- if (conv.ToBool (getenv "SC4S_SOURCE_FF_SYMANTEC_BRIGHTMAIL_GROUPMSG" "yes")) }}
    };
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_SYMANTEC_BRIGHTMAIL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

    flags(flow-control,final);
};
