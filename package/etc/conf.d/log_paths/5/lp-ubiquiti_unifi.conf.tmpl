# Ubiquiti unifi
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "UBIQUITI_UNIFI" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_ubiquiti_unifi {
      
    #(host('^U[^,]{1,10},[a-z0-9]{9,16},v\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,6}')
    #or
    #message('^U[^,]{1,10},[a-z0-9]{9,16},v\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,6}')
    #or
    match("ubiquiti_unifi_*", value("fields.sc4s_vendor_product") type(glob) );
};

log {
    junction {
        channel {
        # Listen on the specified dedicated port(s) for UBIQUITI_UNIFI traffic
            source (s_UBIQUITI_UNIFI);
            flags (final);
	    };
        channel {
        # Listen on the default port (typically 514) for UBIQUITI_UNIFI traffic
            source (s_DEFAULT);
            filter {
                filter(f_soup_is_ubiquiti_unifi)
                or (
                   filter(f_ubiquiti_unifi)
                );
            };
            
            flags(final);
        };
    };

    #Used only by USG 
    if {
        filter {
            match("ubiquiti_unifi_fw", value("fields.sc4s_vendor_product") type(glob) );
        };

        rewrite { set("${LEGACY_MSGHDR}${MSG}" value("MSG")); };

        if (match("[^)]\s\S+\skernel:\s[^ll\sheader][^\[\d+.\d+\]]\S+\s\w+:" value("MSG"))) {
            rewrite { r_set_splunk_dest_default(sourcetype("ubnt:threat")) };
            parser {p_add_context_splunk(key("ubiquiti_unifi_threat")); };
        } elif (match("\S+\slinkcheck:" value("MSG"))) {
            rewrite { r_set_splunk_dest_default(sourcetype("ubnt:link")) };
            parser {p_add_context_splunk(key("ubiquiti_unifi_link")); };
        } elif (match("\d+:\d+:\d+\s\S+\ssudo:" value("MSG"))) {
            rewrite { r_set_splunk_dest_default(sourcetype("ubnt:sudo")) };
            parser {p_add_context_splunk(key("ubiquiti_unifi_sudo")); };
        } else {
            rewrite {
                r_set_splunk_dest_default(sourcetype("ubnt:fw"));
            };
            parser {p_add_context_splunk(key("ubiquiti_unifi_fw")); };
        };
        parser (compliance_meta_by_source);

        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };
    
    };

{{- if (print (getenv "SC4S_DEST_UBIQUITI_UNIFI_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_UBIQUITI_UNIFI_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_UBIQUITI_UNIFI_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_UBIQUITI_UNIFI_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_UBIQUITI_UNIFI_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_UBIQUITI_UNIFI" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_UBIQUITI_UNIFI_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_UBIQUITI_UNIFI_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_UBIQUITI_UNIFI_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
