# DELL_RSA_SECUREID
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "DELL_RSA_SECUREID" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_dell_rsa_secureid {
  (
    message('\.com\.rsa\.'))
    or 
    "${fields.sc4s_vendor_product}" eq "dell_rsa_secureid"
};

log {
    junction {
        channel {
        # Listen on the specified dedicated port(s) for DELL_RSA_SECUREID traffic
            source (s_DELL_RSA_SECUREID);
            flags (final);
	    };
        channel {
        # Listen on the default port (typically 514) for DELL_RSA_SECUREID traffic
            source (s_DEFAULT);
            filter(f_is_rfc3164);
            filter(f_dell_rsa_secureid);
            flags(final);
        };
    };
    if {
        filter{
            message('\.com\.rsa\.');
        };
        parser {
         #basic parsing

            #we need to actual even time from the field GeneratedTime. Use csv-parser to extract it.
            csv-parser(
                columns("time","ms","host","type")
                prefix(".rsa.")
                delimiters(',')
                );
            #2012/04/10 04:39:55
            #parse the date
            date-parser-nofilter(format(
                    '%Y-%m-%d %H:%M:%S,%f')
                    template("${LEGACY_MSGHDR} ${.rsa.time},${.rsa.ms}")
            );
        };
        rewrite {
            set("${.rsa.host}" value("HOST")
                condition( match('^.' value('.rsa.host') )) );
        };
        if {
            filter{match('audit\.admin' value('.rsa.type'))};
            rewrite {
                set("dell_rsa_secureid", value("fields.sc4s_vendor_product"));
                r_set_splunk_dest_default(sourcetype("rsa:securid:admin:syslog"))
            };
            parser { p_add_context_splunk(key("dell_rsa_secureid")); };
        } elif {
            filter{match('system\.com\.rsa|,\s+system\.erationsconsole' value('.rsa.type'))};
            rewrite {
                set("dell_rsa_secureid", value("fields.sc4s_vendor_product"));
                r_set_splunk_dest_default(sourcetype("rsa:securid:system:syslog"))
            };
            parser { p_add_context_splunk(key("dell_rsa_secureid")); };
        } elif {
            filter{match('audit\.runtime\.com\.rsa' value('.rsa.type'))};
            rewrite {
                set("dell_rsa_secureid", value("fields.sc4s_vendor_product"));
                r_set_splunk_dest_default(sourcetype("rsa:securid:runtime:syslog"))
            };
            parser { p_add_context_splunk(key("dell_rsa_secureid")); };
        } else {
            rewrite {
                set("dell_rsa_secureid", value("fields.sc4s_vendor_product"));
                r_set_splunk_dest_default(sourcetype("rsa:securid:syslog"))
            };
            parser { p_add_context_splunk(key("dell_rsa_secureid")); };
        };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };
    } elif {
        filter{
            program('...*')
            and not program('at')
            and not program('Caused')
        };
        rewrite {
            set("dell_rsa_secureid", value("fields.sc4s_vendor_product"));
            subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("nix:syslog"),  source("program:${.PROGRAM}"))
        };
        parser { p_add_context_splunk(key("dell_rsa_secureid")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };
    } else {
        parser {
            grouping-by(
                scope(host)
                key('x')
                timeout(1)
                aggregate(
                    value("MESSAGE" "$(implode '\n' $(context-values ${LEGACY_MSGHDR}${MESSAGE}))")
                )
            );
        };
        rewrite {
            set("dell_rsa_secureid", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("rsa:securid:trace"));
        };
        parser { p_add_context_splunk(key("dell_rsa_secureid")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };

    };


{{- if (print (getenv "SC4S_DEST_DELL_RSA_SECUREID_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_DELL_RSA_SECUREID_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_DELL_RSA_SECUREID_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_DELL_RSA_SECUREID_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_DELL_RSA_SECUREID_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_DELL_RSA_SECUREID" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_DELL_RSA_SECUREID_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_DELL_RSA_SECUREID_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_DELL_RSA_SECUREID_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
