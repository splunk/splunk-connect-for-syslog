# VMware ESXi and NSX
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "VMWARE_VSPHERE" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_is_soup_vmware_all {
    match('vmware_' value('fields.sc4s_vendor_product') type(string) flags(prefix) )     
};


log {
    junction {
        channel {
        # Listen on the specified dedicated port(s) for VMWARE_VSPHERE traffic
            source (s_VMWARE_VSPHERE);
            flags (final);
	    };
        channel {
        # Listen on the default port (typically 514) for VMWARE_VSPHERE traffic
            source (s_DEFAULT);
            filter(f_is_soup_vmware_all);
            flags(final);
        };
    };

    
    if {
        filter{
            not filter(f_is_soup_vmware_all);
        };
        rewrite {
            set("nix_syslog", value("fields.sc4s_vendor_product"));
            subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
        };

        rewrite { r_set_splunk_dest_default(sourcetype("nix:syslog"),  source("program:${.PROGRAM}")) };
        parser { p_add_context_splunk(key("nix_syslog")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_5424_hdr_sdata_msg))" value("MSG")); };
        
    };

{{- if (print (getenv "SC4S_DEST_VMWARE_VSPHERE_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_VMWARE_VSPHERE_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_VMWARE_VSPHERE_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_VMWARE_VSPHERE_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_VMWARE_VSPHERE_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_VMWARE_VSPHERE" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_VMWARE_VSPHERE_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_VMWARE_VSPHERE_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_VMWARE_VSPHERE_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
