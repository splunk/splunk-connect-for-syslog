# CYBERARK
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CYBERARK" "parser" "rfc5424_noversion" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_cyberark {
    not tags("log_path_known") and
    "${fields.sc4s_vendor_product}" eq "Cyber-Ark_Vault" or
    "${fields.sc4s_vendor_product}" eq "CyberArk_PTA"
};

filter f_cyberark_vault {
    "${fields.sc4s_vendor_product}" eq "Cyber-Ark_Vault"
};

filter f_cyberark_pta {
    "${fields.sc4s_vendor_product}" eq "CyberArk_PTA"
};

log {
    junction {
        channel {
        # Listen on the specified dedicated port(s) for CYBERARK traffic
            source (s_CYBERARK);
            flags (final);
	    };
        channel {
        # Listen on the default port (typically 514) for CYBERARK traffic
            source (s_DEFAULT);
            filter(f_cyberark);
            flags(final);
        };
    };
    if {
        filter(f_cyberark_vault);
        rewrite {
            r_set_splunk_dest_default(sourcetype("cyberark:epv:cef"))
        };
        parser {p_add_context_splunk(key("Cyber-Ark_Vault")); };
    }elif{
        filter(f_cyberark_pta);
        rewrite {
            r_set_splunk_dest_default(sourcetype("cyberark:pta:cef"))
        };
        parser {p_add_context_splunk(key("CyberArk_PTA")); };
    };
    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_JSON_3164))" value("MSG")); };


{{- if (print (getenv (print "SC4S_DEST_CYBERARK_ALT_FILTER"))) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv (print "SC4S_DEST_CYBERARK_ALT_FILTER")) }})) {
{{- if (print (getenv (print "SC4S_DEST_CYBERARK_FILTERED_ALTERNATES"))) }}
        {{ getenv (print "SC4S_DEST_CYBERARK_FILTERED_ALTERNATES") | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv (print "SC4S_DEST_CYBERARK_HEC") "no")) }}
    destination(d_hec);
{{- end}}

{{- /* Check environment variables (and defaults if unset) for sending to the local EWMM-format */}}
{{- /* disk archive */}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv (print "SC4S_ARCHIVE_" $context.port_id) "no")) }}
    destination(d_archive);
{{- end}}

{{- /* Check environment variables for sending to a global list of alternate destinations */}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- /* Check environment variables for sending to a list of alternate destinations only for this specific source */}}

{{- if (print (getenv (print "SC4S_DEST_CYBERARK_ALTERNATES"))) }}
    {{ getenv (print "SC4S_DEST_CYBERARK_ALTERNATES") | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv (print "SC4S_DEST_CYBERARK_ALT_FILTER"))) }}
    };
{{- end }}

# All passes through any matching log path will be final
    flags(flow-control,final);
};