# Juniper JunOS (Structured, RFC5424-compliant)
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "JUNIPER_JUNOS_STRUCTURED" "parser" "rfc5424_strict" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_juniper_junos_structured {
      not tags("log_path_known") and

    match('^\[junos@2636' value("SDATA"))
};

log {
    junction {
{{- if or (or (or (getenv  (print "SC4S_LISTEN_" $context.port_id "_TCP_PORT")) (getenv  (print "SC4S_LISTEN_" $context.port_id "_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_" $context.port_id "_TLS_PORT"))) (getenv  (print "SC4S_LISTEN_" $context.port_id "_RFC6587_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for JUNIPER_JUNOS_STRUCTURED traffic
            source (s_JUNIPER_JUNOS_STRUCTURED);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for JUNIPER_JUNOS_STRUCTURED traffic
            source (s_DEFAULT);
            filter(f_is_rfc5424_strict);
            filter(f_juniper_junos_structured);
            flags(final);
        };
    };

    rewrite {
        set("juniper_junos", value("fields.sc4s_vendor_product"));
    };
    if (program('RT_IDP')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:idp:structured")) };
        parser {p_add_context_splunk(key("juniper_idp_structured")); };
    } elif (program('RT_FLOW')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:firewall:structured")) };
        parser {p_add_context_splunk(key("juniper_junos_fw_structured")); };
    } elif (program('RT_IDS')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:firewall:structured")) };
        parser {p_add_context_splunk(key("juniper_junos_ids_structured")); };
    } elif (program('RT_UTM')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:firewall:structured")) };
        parser {p_add_context_splunk(key("juniper_junos_utm_structured")); };
    } elif (program('RT_AAMW')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:aamw:structured")) };
        parser {p_add_context_splunk(key("juniper_junos_aamw_structured")); };
    } elif (program('RT_SECINTEL')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:secintel:structured")) };
        parser {p_add_context_splunk(key("juniper_junos_secintel_structured")); };
    } else {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:structured")) };
        parser {p_add_context_splunk(key("juniper_structured")); };
    };

    parser (compliance_meta_by_source);


    #We want to unset the fields we won't need, as this is copied into the
    #disk queue for network destinations. This can be very disk expensive
    #if we don't
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_sdata_msg))" value("MSG")); };

{{- if (print (getenv "SC4S_DEST_JUNIPER_JUNOS_STRUCTURED_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_JUNIPER_JUNOS_STRUCTURED_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_JUNIPER_JUNOS_STRUCTURED_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_JUNIPER_JUNOS_STRUCTURED_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_JUNOS_STRUCTURED_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_JUNOS_STRUCTURED" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_JUNOS_STRUCTURED_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_JUNOS_STRUCTURED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_JUNIPER_JUNOS_STRUCTURED_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
