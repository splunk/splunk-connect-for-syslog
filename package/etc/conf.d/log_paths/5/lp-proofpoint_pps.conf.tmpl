# Proofpoint Protection Server
# Proofpoint
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "PROOFPOINT_PPS" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_proofpoint_pps_filter {
    "${fields.sc4s_vendor_product}" eq "proofpoint_pps_filter" or
      not tags("log_path_known") and
    ((
        match('^(background|cvt|filter|pps)_instance\d+$' value("PROGRAM") type("pcre")) or
        match('^\/opt\/proofpoint\/pps-\d\.\d\.\d\.\d+\/\S' value("PROGRAM") type("pcre")) or
        match('^queued-(alert|default|digest|reinject|released)$' value("PROGRAM") type("pcre"))
    ));
};

filter f_proofpoint_pps_sendmail {
      not tags("log_path_known") and (
    match('sendmail' value("PROGRAM") type("pcre")) and
    match("proofpoint_pps_sendmail", value("fields.sc4s_vendor_product") type(glob)));
};

log {
    junction {
        channel {
        # Listen on the specified dedicated port(s) for PROOFPOINT_PPS traffic
            source (s_PROOFPOINT_PPS);
            flags (final);
	    };
        channel {
        # Listen on the default port (typically 514) for PROOFPOINT_PPS traffic
            source (s_DEFAULT);
            filter { filter(f_proofpoint_pps_filter) or filter(f_proofpoint_pps_sendmail) };
            flags(final);
        };
    };

    if (filter(f_proofpoint_pps_filter)) {
        rewrite {
            set("proofpoint_pps_filter", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("pps_filter_log"))};
        parser { p_add_context_splunk(key("proofpoint_pps_filter")); };
    } else {
        rewrite {
            set("proofpoint_pps_sendmail", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("pps_mail_log"))};
        parser { p_add_context_splunk(key("proofpoint_pps_sendmail")); };
    };

    parser (compliance_meta_by_source);

    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };

{{- if (print (getenv "SC4S_DEST_PROOFPOINT_PPS_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_PROOFPOINT_PPS_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_PROOFPOINT_PPS_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_PROOFPOINT_PPS_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_PROOFPOINT_PPS_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_PROOFPOINT_PPS" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_PROOFPOINT_PPS_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_PROOFPOINT_PPS_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_PROOFPOINT_PPS_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
