# VMware ESXi and NSX
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "VMWARE_VSPHERE" "parser" "common" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_vmware_all {
      not tags("log_path_known") and
    #begin base vmware
    (program("applmgmt-audit", flags(ignore-case))
    or program("cimslp", flags(ignore-case))    
    or program("esxupdate", flags(ignore-case))
    or program("Fdm", flags(ignore-case))
    or program("Hostd", flags(ignore-case))
    or program("hostd-probe", flags(ignore-case))
    or program("iofiltervpd", flags(ignore-case))
    or program("indcfg", flags(ignore-case))
    or program("lwsmd", flags(ignore-case))
    or program("netcpa", flags(ignore-case))
    or program("pktcap-agent", flags(ignore-case))
    or program("Rhttpproxy", flags(ignore-case))
    or program("sdrsInjector", flags(ignore-case))
    or program("sfcb-.*", flags(ignore-case))
    or program("storageRM", flags(ignore-case))
    or program("updatemgr", flags(ignore-case))
    or program("vmauthd", flags(ignore-case))
    or program("vmafdd", flags(ignore-case))
    or program("vmcad", flags(ignore-case))
    or program("vmdird", flags(ignore-case))
    or program("vmkernel", flags(ignore-case))
    or program("vmkwarning", flags(ignore-case))
    or program("vmon", flags(ignore-case))
    or program("vobd", flags(ignore-case))
    or program("Vpxa", flags(ignore-case))
    or program("Vpxd", flags(ignore-case))
    or program("Vpxd-svcs", flags(ignore-case))
    or program("VSANMGMTSVC", flags(ignore-case))
    or program("osfsd", flags(ignore-case))
    or program("vsfwd", flags(ignore-case))
    or program("vsantraceurgent", flags(ignore-case))
    #begin nsx
    or program("NSX", flags(ignore-case))
    or program("NSXV", flags(ignore-case))
    or program("dfwpktlogs", flags(ignore-case))
    or program("nsx-.*", flags(ignore-case))
    or program("view", flags(ignore-case))
    or program("vsansystem", flags(ignore-case)))
};

filter f_vmware_esx {
    program("cimslp", flags(ignore-case))
    or program("esxupdate", flags(ignore-case))
    or program("Fdm", flags(ignore-case))
    or program("Hostd", flags(ignore-case))
    or program("hostd-probe", flags(ignore-case))
    or program("indcfg", flags(ignore-case))
    or program("iofiltervpd", flags(ignore-case))        
    or program("lwsmd", flags(ignore-case))
    or program("netcpa", flags(ignore-case))
    or program("pktcap-agent", flags(ignore-case))
    or program("Rhttpproxy", flags(ignore-case))
    or program("sdrsInjector", flags(ignore-case))
    or program("sfcb-.*", flags(ignore-case))
    or program("storageRM", flags(ignore-case))
    or program("vmkernel", flags(ignore-case))
    or program("vmkwarning", flags(ignore-case))
    or program("vobd", flags(ignore-case))
    or program("Vpxa", flags(ignore-case))
    or program("VSANMGMTSVC", flags(ignore-case))
    or program("vsfwd", flags(ignore-case))
    or program("vmauthd", flags(ignore-case))
};

filter f_vmware_nsx {
    program("NSX", flags(ignore-case))
    or
    program("NSXV", flags(ignore-case))
    or
    program("dfwpktlogs", flags(ignore-case))
    or
    program("nsx-.*", flags(ignore-case))
};
filter f_vmware_vcenter {
    program("applmgmt-audit", flags(ignore-case))    
    or program("updatemgr", flags(ignore-case))    
    or program("vmafdd", flags(ignore-case))
    or program("vmcad", flags(ignore-case))
    or program("vmdird", flags(ignore-case))
    or program("vmon", flags(ignore-case))
    or program("Vpxd", flags(ignore-case))
    or program("Vpxd-svcs", flags(ignore-case))
    or program("vsantraceurgent", flags(ignore-case))
    or program("vsansystem", flags(ignore-case))
    or program("osfsd", flags(ignore-case))

};    
filter f_vmware_horizon {
    program("View")    
};    

log {
    junction {
{{- if or (or (or (getenv  (print "SC4S_LISTEN_" $context.port_id "_TCP_PORT")) (getenv  (print "SC4S_LISTEN_" $context.port_id "_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_" $context.port_id "_TLS_PORT"))) (getenv  (print "SC4S_LISTEN_" $context.port_id "_RFC6587_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for VMWARE_VSPHERE traffic
            source (s_VMWARE_VSPHERE);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for VMWARE_VSPHERE traffic
            source (s_DEFAULT);
            filter(f_vmware_all);
            flags(final);
        };
    };

    #NSX first because its the cheapest check
    if {
        filter(f_is_rfc5424_strict);
        filter(f_vmware_nsx);

        rewrite {
            set("vmware_nsx", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("vmware:vsphere:nsx"),  source("program:${PROGRAM}"));
        };
        parser { p_add_context_splunk(key("vmware_nsx")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_JSON_5424))" value("MSG")); };

    } elif {

        filter(f_vmware_nsx);

        rewrite {
            set("vmware_nsx", value("fields.sc4s_vendor_product"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("vmware:vsphere:nsx"),  source("program:${.PROGRAM}"));
        };
        parser { p_add_context_splunk(key("vmware_nsx")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };
    } elif {
        filter(f_is_rfc5424_strict);
        filter(f_vmware_vcenter);

        rewrite {
            set("vmware_vcenter", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("vmware:vsphere:vcenter"),  source("program:${PROGRAM}"));
        };
        parser { p_add_context_splunk(key("vmware_vcenter")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_JSON_5424))" value("MSG")); };    
    } elif {

        filter(f_vmware_vcenter);

        rewrite {
            set("vmware_vcenter", value("fields.sc4s_vendor_product"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("vmware:vsphere:vcenter"),  source("program:${.PROGRAM}"));
        };
        parser { p_add_context_splunk(key("vmware_vcenter")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };

    #esx things
    } elif {
        filter(f_is_rfc5424_strict);
        filter(f_vmware_esx);

        rewrite {
            set("vmware_vsphere_esx", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("vmware:vsphere:esx"),  source("program:${PROGRAM}"));
        };
        parser { p_add_context_splunk(key("vmware_esx")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_JSON_5424))" value("MSG")); };

    } elif {

        filter(f_vmware_esx);

        rewrite {
            set("vmware_vsphere_esx", value("fields.sc4s_vendor_product"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("vmware:vsphere:esx"),  source("program:${.PROGRAM}"));
        };
        parser { p_add_context_splunk(key("vmware_esx")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };
    } elif {
        filter(f_is_rfc5424_strict);
        filter(f_vmware_horizon);

        rewrite {
            set("vmware_horizon", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("vmware:horizon"),  source("program:${PROGRAM}"));
        };
        parser { p_add_context_splunk(key("vmware_horizon")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_JSON_5424))" value("MSG")); }; 

    } else {

        rewrite {
            set("nix_syslog", value("fields.sc4s_vendor_product"));
            subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
        };

        rewrite { r_set_splunk_dest_default(sourcetype("nix:syslog"),  source("program:${.PROGRAM}")) };
        parser { p_add_context_splunk(key("nix_syslog")); };
        parser (compliance_meta_by_source);
        if {
            filter(f_is_rfc5424_strict);
            rewrite { set("$(template ${.splunk.sc4s_template} $(template t_JSON_5424))" value("MSG")); };
        } else {
            rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };        
        };
    };

{{- if (print (getenv "SC4S_DEST_VMWARE_VSPHERE_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_VMWARE_VSPHERE_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_VMWARE_VSPHERE_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_VMWARE_VSPHERE_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_VMWARE_VSPHERE_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_VMWARE_VSPHERE" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_VMWARE_VSPHERE_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_VMWARE_VSPHERE_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_VMWARE_VSPHERE_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
