# Cisco ASA
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CISCO_ASA" "parser" "common" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_is_cisco_asa{
    tags("cisco_syslog") and
    ("${.cisco.facility}" eq "ASA" or
    "${.cisco.facility}" eq "FTD" or 
    message('^%(ASA|FTD)-'))

};

filter f_cisco_ftd {
    "${.cisco.facility}" eq "FTD" and
    match('^43000' value(".cisco.mnemonic"));
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_CISCO_ASA_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CISCO_ASA_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CISCO_ASA_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CISCO_ASA traffic
            source (s_CISCO_ASA);
            flags (final);
	    };
{{- end}}
{{- if or (or (getenv  (print "SC4S_LISTEN_CISCO_IOS_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CISCO_IOS_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CISCO_IOS_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CISCO_IOS traffic
            source (s_CISCO_IOS);
            filter(f_is_cisco_asa);
            flags (final);
	    };
{{- end}}

        channel {
        # Listen on the default port (typically 514) for CISCO_IOS traffic
            source (s_DEFAULT);
            filter(f_is_cisco_asa);
            flags(final);
        };
    };

    if {
        filter(f_cisco_ftd);
        rewrite {
            set("cisco_ftd", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("cisco:ftd"));
        };
        parser {p_add_context_splunk(key("cisco_ftd")); };
    } else {       
        rewrite { 
            set("cisco_asa" value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("cisco:asa"));
        };         
        parser { p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
    };
    parser { p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };


{{- /* Check environment variables (and defaults if unset) for sending to the HEC */}}
{{- /* destination. When more destination options are offered in SC4S, this is where */}}
{{- /* output to them will be configured */}}

{{ if (print (getenv "SC4S_DEST_CISCO_ASA_ALT_FILTER")) }}
# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_CISCO_ASA_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_CISCO_ASA_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_CISCO_ASA_FILTERED_ALTERNATES" | regexp.ReplasaLiteral "^" "destination(" | regexp.ReplasaLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CISCO_ASA_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- /* Check environment variables (and defaults if unset) for sending to the local EWMM-format */}}
{{- /* disk archive */}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CISCO_ASA" "no")) }}
    destination(d_archive);
{{- end}}

{{- /* Check environment variables for sending to a global list of alternate destinations */}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplasaLiteral "^" "destination(" | regexp.ReplasaLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- /* Check environment variables for sending to a list of alternate destinations only for this specific source */}}

{{- if (print (getenv "SC4S_DEST_CISCO_ASA_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_CISCO_ASA_ALTERNATES" | regexp.ReplasaLiteral "^" "destination(" | regexp.ReplasaLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_CISCO_ASA_ALT_FILTER")) }}
    };
{{- end }}


# All passes through any matching log path will be final
    flags(flow-control,final);
};