# Juniper JunOS (Structured, RFC5424-compliant)
{{ $context := dict "port_id" "JUNIPER_JUNOS_STRUCTURED" "parser" "common" }}
{{ tmpl.Exec "t/source_network.t" $context }}
# The following is an inline template; we will use this to generate the actual log path
{{ define "log_path" }}
log {
{{- if eq (.) "yes"}}
    source(s_DEFAULT);
    filter(f_is_rfc5424_strict);
    filter(f_juniper_junos_structured);
{{- end}}
{{- if eq (.) "no"}}
    source (s_JUNIPER_JUNOS_STRUCTURED);
{{- end}}

    rewrite {
        set("juniper_junos", value("fields.sc4s_vendor_product"));
    };
    if (program('RT_IDP')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:idp:structured"), index("netids")) };
        parser {p_add_context_splunk(key("juniper_idp_structured")); };
    } elif (program('RT_FLOW')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:firewall:structured"), index("netfw")) };
        parser {p_add_context_splunk(key("juniper_junos_fw_structured")); };
    } elif (program('RT_IDS')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:idp:structured"), index("netids")) };
        parser {p_add_context_splunk(key("juniper_junos_ids_structured")); };
    } elif (program('RT_UTM')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:firewall:structured"), index("netfw")) };
        parser {p_add_context_splunk(key("juniper_junos_utm_structured")); };
    }
# Legacy Netscreen IDP is handled in the "p_rfc3164-juniper-idp.conf" log path
#
#    } elif (program('Jnpr')) {
#        rewrite { r_set_splunk_dest_default(sourcetype("juniper:idp:structured"), index("netids")) };
#        parser {p_add_context_splunk(key("juniper_junos_idp")); };
#        }
    else {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:structured"), index("netops")) };
        parser {p_add_context_splunk(key("juniper_structured")); };
    };

    parser (compliance_meta_by_source);


    #We want to unset the fields we won't need, as this is copied into the
    #disk queue for network destinations. This can be very disk expensive
    #if we don't
    rewrite {
        set("$(template ${fields.sc4s_template} $(template t_JSON_5424))" value("MSG"));
        unset(value("RAWMSG"));
        groupunset(values(".kv.*"));
    };

{{- if ((getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes") | conv.ToBool) or (conv.ToBool (getenv "SC4S_DEST_JUNOS_STRUCTURED_HEC" "no") | conv.ToBool) }}
    destination(d_hec);
{{- end}}


{{- if (getenv "SC4S_ARCHIVE_GLOBAL") or (getenv "SC4S_ARCHIVE_JUNOS_STRUCTURED") }}
    destination(d_archive);
{{- end}}

};
{{- end}}

{{- if or (or (getenv  (print "SC4S_LISTEN_JUNIPER_JUNOS_STRUCTURED_TCP_PORT")) (getenv  (print "SC4S_LISTEN_JUNIPER_JUNOS_STRUCTURED_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_JUNIPER_JUNOS_STRUCTURED_TLS_PORT")) }}
# Listen on the specified dedicated port(s) for JUNIPER_JUNOS_STRUCTURED traffic
{{ tmpl.Exec "log_path" "no" }}
{{- end}}

# Listen on the default port (typically 514) for JUNIPER_JUNOS_STRUCTURED traffic
{{ tmpl.Exec "log_path" "yes" }}
