# Cisco ISE
{{ $context := dict "port_id" "CISCO_ISE" "parser" "common"}}
{{ tmpl.Exec "t/source_network.t" $context }}

#This filter uses a field we set to prevent the original messages before aggregation from being
#sent to Splunk
filter f_cisco_ise_complete{
    match("yes", value("ISE.COMPLETE") type(glob));
};

#This parser adds messages from ISE to a context without sending them
#forward to Splunk
parser ise_grouping {
    csv-parser(
        columns(PID, ISE.num, ISE.seq, MESSAGE)
        delimiters(chars(" "))
        flags(greedy)
    );
    grouping-by(
        scope(program)
        key("$PID")
        trigger("$(+ ${ISE.seq} 1)" == "${ISE.num}")
        sort-key("${ISE.seq}")
        aggregate(
             value("MESSAGE" "$(implode '' $(context-values ${MESSAGE}))")
             value("ISE.COMPLETE" "yes")
        )
        timeout(10)
    );
};

#The syslog message includes a date with nano seconds and TZ which is not in the header
#So must reparse the date
parser ise_event_time {
    csv-parser(
        columns(ISE.DATE, ISE.TIME, ISE.TZ, MESSAGE)
        delimiters(chars(" "))
        flags(greedy)
    );

    date-parser(
            #YYYY- MM-DD hh:mm:ss:xxx +/-zh:zm
            format("%Y-%m-%d %H:%M:%S.%f %z" )
            template("${ISE.DATE} ${ISE.TIME} ${ISE.TZ}")
    );
};
# The following is an inline template; we will use this to generate the actual log path
{{ define "log_path" }}
log {
{{- if eq (.) "yes"}}
    source(s_DEFAULT);
    filter(f_is_rfc3164);
    filter(f_cisco_ise);
{{- end}}
{{- if eq (.) "no"}}
    source (s_CISCO_ISE);
{{- end}}

    parser(ise_grouping);

    if {
        filter(f_cisco_ise_complete);
        parser(ise_event_time);
        rewrite {
            set("cisco_ise", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("cisco:ise:syslog"), index("netauth"))
        };

        parser {p_add_context_splunk(key("cisco_ise")); };
        parser (compliance_meta_by_source);

        #We want to unset the fields we won't need, as this is copied into the
        #disk queue for network destinations. This can be very disk expensive
        #if we don't
        rewrite {
            set("$(template ${fields.sc4s_template} $(template t_msg_only))" value("MSG"));
            unset(value("RAWMSG"));
            unset(value("PROGRAM"));
            unset(value("PID"));
            unset(value("LEGACY_MSGHDR"));
            unset(value("EPOCH"));
            unset(value("VERSION"));
            unset(value("TIMESECFRAC"));
            groupunset(values("ISE.*"));
        };

        destination(d_hec);

    {{- if (getenv "SC4S_ARCHIVE_GLOBAL") or (getenv "SC4S_ARCHIVE_CISCO_ISE") }}
        destination(d_archive);
    {{- end}}

        flags(flow-control);
    };


};
{{- end}}
{{- if (ne (getenv (print "SC4S_LISTEN_CISCO_ISE_TCP_PORT") "no") "no") or (ne (getenv (print "SC4S_LISTEN_CISCO_ISE_UDP_PORT") "no") "no") or (ne (getenv (print "SC4S_LISTEN_CISCO_ISE_TLS_PORT") "no") "no") }}

# Listen on the specified dedicated port(s) for CISCO_ISE traffic
    {{tmpl.Exec "log_path" "no" }}
{{- end}}

# Listen on the default port (typically 514) for CISCO_ISE traffic
{{tmpl.Exec "log_path" "yes" }}
