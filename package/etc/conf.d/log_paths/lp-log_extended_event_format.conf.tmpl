# Common Event Format
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "LEEF" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

parser p_leef1_header {
    csv-parser(
        columns("fields.leef_version", "fields.leef_device_vendor", "fields.leef_device_product", "fields.leef_device_version","fields.EventID", MESSAGE)
        delimiters(chars("|"))
        template(t_legacy_hdr_msg)
        flags(strip-whitespace, escape-none, greedy)
    );
};
parser p_leef2_header {
    csv-parser(
        columns("fields.leef_version", "fields.leef_device_vendor", "fields.leef_device_product", "fields.leef_device_version","fields.EventID",".separator", MESSAGE)
        delimiters(chars("|"))
        flags(strip-whitespace, escape-none, greedy, drop-invalid)
    );
};
#This header is invalid but happens per spec
parser p_leef2alt_header {
    csv-parser(
        columns("fields.leef_version", "fields.leef_device_vendor", "fields.leef_device_product", "fields.leef_device_version","fields.EventID", MESSAGE)
        delimiters(chars("|"))
        flags(strip-whitespace, escape-none, greedy)
    );
};

template t_leef_event {
        template("${.leef.event}");
};


python {

import re
import binascii  
class leef_kv(object):


    def init(self, options):
        self.regex = r"( ?(?:[A-Z]{2,4}T|HAEC|IDLW|MSK|NT|UTC|THA))"
        return True
    
    def parse(self, log_message):
          
        try:
            msg = log_message['MESSAGE'].decode("utf-8")
            # All LEEF message are | separated super structures
            structure = msg.split('|')
            # Indexed fields for Splunk
            log_message['fields.leef_version'] = structure[0]            
            log_message['fields.leef_vendor'] = structure[1]
            log_message['fields.leef_product'] = structure[2]
            log_message['fields.leef_product_version'] = structure[3]
            log_message['fields.leef_EventID'] = structure[4]
            #We just want the event field     
            event = structure[len(structure)-1]                   
            log_message['.leef.event'] = event
            # V1 will always use tab
            if structure[0].startswith("1"):
                separator="\t"
                lv = "1"
            else:
                lv = "2"
                #V2 messages should always provide the sep but some fail do comply
                #with the format spec if they don't assume tab
                if len(structure) == 6 or not structure[5]:
                    separator="\t"
                else:
                    separator=structure[5]
                    if separator.startswith("0"):
                        separator = separator[1:]
            
            
            if separator.startswith("x"):
                hex_sep = f"0{separator.lower()}"
            else:
                hex_sep = f'0x{binascii.b2a_hex(separator.encode("utf-8")).decode("utf-8").lower()}'
            if structure[0].startswith("1"):
                log_message['.splunk.sourcetype'] = f"LEEF:{lv}"
            else:
                log_message['.splunk.sourcetype'] = f"LEEF:{lv}:{hex_sep}"
            log_message['.splunk.source'] = f"{structure[1]}:{structure[2]}"
            log_message['fields.sc4s_vendor_product'] = f"{structure[1]}_{structure[2]}"
            
            pairs = event.split(separator)
            for p in pairs:
                f,v = p.split("=", 1)
                if f == "devTime":
                    log_message[".leef." + f] = re.sub(self.regex, "" , v, 0, re.MULTILINE)
                else:
                    log_message[".leef." + f] = v
        except Exception as e:
            log_message['.fields.leef_exception']=str(e)
            pass

        # return True, other way message is dropped
        return True

};


parser p_leef_kv {
    python(
        class("leef_kv")
    );
};


parser p_leef_devTime {
    date-parser-nofilter(format(
                    '%s.%f',
                    '%s',
                    '%b %d %H:%M:%S',
                    '%b %d %H:%M:%S.%f',
                    '%b %d %Y %H:%M:%S.%f'
                )
                template("${.leef.devTime}")
    );
};


log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_LEEF_TCP_PORT")) (getenv  (print "SC4S_LISTEN_LEEF_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_LEEF_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for leef traffic
            source (s_leef);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for leef traffic
            source (s_DEFAULT);
            filter(f_leef);
            flags(final);
        };
    };

    # LEEF has two offical versions however in the wild we see "hybrid"
    # Syntax where V2 is used but the separator is not provided and assumed
    # to be \t
    parser (p_leef_kv);
    if {
        filter {
            match(".{4,}" value(".leef.devTime"));
        };
        parser (p_leef_devTime);
    };
        
    
    # leef TAs use the source as their bounds in props.conf
    # leef source entries in splunk_metadata.csv should reflect the proper source as well as sourcetype

    rewrite { set("${.splunk.sourcetype}", value(".leef.sourcetype")); };
    parser {
        p_add_context_splunk(key("${fields.leef_vendor}_${fields.leef_product}"));
    };
    if (match("SC4S:unknown" value(".splunk.sourcetype"))) {
        rewrite { set("${.leef.sourcetype}", value(".splunk.sourcetype")); };
    };

    parser (compliance_meta_by_source);

    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_leef_event))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_LEEF_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_leef" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_LEEF_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_LEEF_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

    flags(flow-control,final);
};
