# Common Event Format
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "LEEF" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

parser p_leef1_header {
    csv-parser(
        columns("fields.leef_version", "fields.leef_device_vendor", "fields.leef_device_product", "fields.leef_device_version","fields.EventID", MESSAGE)
        delimiters(chars("|"))
        template(t_legacy_hdr_msg)
        flags(strip-whitespace, escape-none, greedy)
    );
};
parser p_leef2_header {
    csv-parser(
        columns("fields.leef_version", "fields.leef_device_vendor", "fields.leef_device_product", "fields.leef_device_version","fields.EventID",".separator", MESSAGE)
        delimiters(chars("|"))
        flags(strip-whitespace, escape-none, greedy)
    );
};
#This header is invalid but happens per spec
parser p_leef2alt_header {
    csv-parser(
        columns("fields.leef_version", "fields.leef_device_vendor", "fields.leef_device_product", "fields.leef_device_version","fields.EventID", MESSAGE)
        delimiters(chars("|"))
        flags(strip-whitespace, escape-none, greedy)
    );
};

python {
class leef_kv(object):

    import re
    def init(self, options):
        self.regex = r"( ?(?:[A-Z]{2,4}T|HAEC|IDLW|MSK|NT|UTC|THA))"
        return True
    
    def parse(self, log_message):
        try:
            rawsep=log_message['.separator']
            if len(rawsep)==1:
                separator = rawsep.decode('utf-8')
            else:
                separator = rawsep.decode('unicode_escape')
            pairs = log_message['MESSAGE'].decode("utf-8").split(separator)
            for p in pairs:
                f,v = p.split("=", 1)
                if f == "devTime":
                    log_message[".leef." + f] = re.sub(self.regex, "" , v, 0, re.MULTILINE)
                else:
                    log_message[".leef." + f] = v
            
        except Exception as e:
            log_message['.fields.leef_exception']=str(e)
            pass

        # return True, other way message is dropped
        return True

};


parser p_leef_kv {
    python(
        class("leef_kv")
    );
};


parser p_leef_devTime {
    date-parser-nofilter(format(
                    '%s.%f',
                    '%s',
                    '%b %d %H:%M:%S.%f',
                    '%b %d %H:%M:%S',
                    '%b %d %Y %H:%M:%S.%f',
                    '%b %e %Y %H:%M:%S',
                    '%b %e %H:%M:%S.%f',
                    '%b %e %H:%M:%S',
                    '%b %e %Y %H:%M:%S.%f',
                    '%b %e %Y %H:%M:%S'                
                )
                template("${.leef.devTime}")
    );
};


log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_LEEF_TCP_PORT")) (getenv  (print "SC4S_LISTEN_LEEF_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_LEEF_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for leef traffic
            source (s_leef);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for leef traffic
            source (s_DEFAULT);
            filter(f_leef);
            flags(final);
        };
    };

    # LEEF has two offical versions however in the wild we see "hybrid"
    # Syntax where V2 is used but the separator is not provided and assumed
    # to be \t
    if {
        filter {
            match('^LEEF:1.\d+', template('${LEGACY_MSGHDR}${MESSAGE}'))
        };
        parser (p_leef1_header);

        rewrite {
            r_set_splunk_dest_default(sourcetype("LEEF:1"))
        };
        rewrite {
            set("\t" value(".separator"));
        };

    } elif {
        filter {
            match('^LEEF:2.\d+', template('${LEGACY_MSGHDR}${MESSAGE}'))
        };
        if {
            parser (p_leef2_header);
            filter{
                match("^(.|(0x|x)[0-9A-Fa-f]{1,4})$" value(".separator"));
            };            
        } else {
            parser (p_leef2alt_header);
            rewrite {
                set("\t" value(".separator"));
            };
        };
        if {
            filter{
                match("^0x[0-9A-Fa-f]{1,4}" value(".separator"))
            };
            rewrite {
                r_set_splunk_dest_default(sourcetype("LEEF:2:${.separator}"))
            };
        } elif {
            filter{
                match("^x[0-9A-Fa-f]{1,4}" value(".separator"))
            };
            rewrite {
                r_set_splunk_dest_default(sourcetype("LEEF:2:0${.separator}"))
            };
        } else {
            rewrite {
                r_set_splunk_dest_default(sourcetype("LEEF:2:${.separator}"))
            };
        };

    } else {
        rewrite {
            r_set_splunk_dest_default(sourcetype("LEEF"))
        };
    };
    parser (p_leef_kv);
    parser (p_leef_devTime);
    
    rewrite {
        set("${fields.leef_device_vendor}_${fields.leef_device_product}", value("fields.sc4s_vendor_product"));
    };

    # We already have the syslog msg time stamp however that may not be the best one
    # If we have an rt or end field that is best we use the If trick here so if this parser fails
    # We don't get sent to fallback.
    
    # leef TAs use the source as their bounds in props.conf
    # leef source entries in splunk_metadata.csv should reflect the proper source as well as sourcetype

    parser {
        p_add_context_splunk(key("${fields.leef_device_vendor}_${fields.leef_device_product}"));
    };

    parser (compliance_meta_by_source);

    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_LEEF_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_leef" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_LEEF_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_LEEF_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

    flags(flow-control,final);
};
