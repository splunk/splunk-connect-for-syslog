#The template will be used to produce two log paths
#The first log path is linked to the default (shared) 514
{{ if eq (getenv "confgen_sourcedefault") "yes" }}
    source(s_default-ports);
    filter(f_is_rfc3164);
    filter(f_juniper_junos_standard);
{{ end }}
#The second log path will only generate if the value of one OR more port variables is set
{{ if eq (getenv "confgen_sourcedefault") "no" }}
    source {
        dedicated_port(
            tcp_port({{ getenv "SCS_LISTEN_JUNIPER_JUNOS_TCP_PORT" }})
            udp_port({{ getenv "SCS_LISTEN_JUNIPER_JUNOS_UDP_PORT" }})

        )
    };
{{ end }}

    if (program('RT_IDP')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:idp"), index("netids"), template("t_standard"))};
        parser {p_add_context_splunk(key("juniper_idp")); };
    } elif (program('RT_FLOW')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:firewall"), index("netfw"), template("t_standard"))};
        parser {p_add_context_splunk(key("juniper_junos_flow")); };
    } elif (program('RT_IDS')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:idp"), index("netids"), template("t_standard"))};
        parser {p_add_context_splunk(key("juniper_junos_ids")); };
    } elif (program('RT_UTM')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:junos:firewall"), index("netids"), template("t_standard"))};
        parser {p_add_context_splunk(key("juniper_junos_utm")); };
    } elif (program('Juniper')) {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:sslvpn"), index("netfw"), template("t_standard"))};
        parser {p_add_context_splunk(key("juniper_sslvpn")); };
    } else {
        rewrite { r_set_splunk_dest_default(sourcetype("juniper:legacy"), index("netops"), template("t_standard"))};
        parser {p_add_context_splunk(key("juniper_legacy")); };
    };

    destination(d_hec);  #--HEC--

    flags(flow-control);