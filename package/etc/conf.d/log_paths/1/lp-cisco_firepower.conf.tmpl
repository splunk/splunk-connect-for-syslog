# cisco_firepower
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CISCO_FIREPOWER" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_soup_is_cisco_firepower {
  tags("cisco_firepower");
};

log {
    junction {
{{- if or (or (or (getenv  (print "SC4S_LISTEN_" $context.port_id "_TCP_PORT")) (getenv  (print "SC4S_LISTEN_" $context.port_id "_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_" $context.port_id "_TLS_PORT"))) (getenv  (print "SC4S_LISTEN_" $context.port_id "_RFC6587_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CISCO_FIREPOWER traffic
            source (s_CISCO_FIREPOWER);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for CISCO_FIREPOWER traffic
            source (s_DEFAULT);
            filter(f_soup_is_cisco_firepower);
            flags(final);
        };
    };

    if {
        filter{program("SFIMS")};
        rewrite {
            set("cisco_firepower", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("cisco:firepower:syslog"))
        };
        parser { p_add_context_splunk(key("cisco_firepower")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };
    } else {
        rewrite {
            set("cisco_firepower", value("fields.sc4s_vendor_product"));
            subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("cisco_firepower:${.PROGRAM}"),  source("program:${.PROGRAM}"))
        };
        parser { p_add_context_splunk(key("cisco_firepower")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };
    };

{{- if (print (getenv "SC4S_DEST_CISCO_FIREPOWER_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_CISCO_FIREPOWER_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_CISCO_FIREPOWER_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_CISCO_FIREPOWER_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CISCO_FIREPOWER_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CISCO_FIREPOWER" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_CISCO_FIREPOWER_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_CISCO_FIREPOWER_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_CISCO_FIREPOWER_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
