# Fortinet Fortigate and Fortiweb
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "FORTINET" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_fortinet {
      not tags("log_path_known") and
(
    message('devid=\"?F[G|W|6K].+type=\"?(traffic|utm|event)') or
    message('device_id=\"?FV.+type=\"?(traffic|attack|event)'));
};

filter f_fortinet_fortiweb {
    message('device_id=\"?FV.+type=\"?(traffic|attack|event)');
};

log {
    junction {
        channel {
        # Listen on the specified dedicated port(s) for FORTINET traffic
            source (s_FORTINET);
            flags (final);
	    };
        channel {
        # Listen on the default port (typically 514) for FORTINET traffic
            source (s_DEFAULT);
            filter(f_is_rfc3164);
            filter(f_fortinet);
            flags(final);
        };
    };

    parser {
        kv-parser(prefix(".kv.") template("${LEGACY_MSGHDR} ${MSG}"));
    };
    if {
        filter(f_fortinet_fortiweb);
        # Fetch timezone from timezone nv pair and parse unique format (no zero padding, e.g. "-8:00" rather than "-08:00"
        # Reformat to "-08:00"
        rewrite {
            subst('.*([\+-]\d+:\d+).*', $1, value(".kv.timezone"));
            subst('([\+-])(\d)(?=:)(:\d+)', "${1}0${2}${3}", value(".kv.timezone"));
        };
        parser {
            date-parser-nofilter(
                format('%Y-%m-%d:%H:%M:%S%z')
                template("${.kv.date}:${.kv.time}${.kv.timezone}")
            );
        };
    } elif {
        filter { match('.{5}' value (".kv.tz")) };
        parser {
            date-parser-nofilter(
                format('%Y-%m-%d:%H:%M:%S%z')
                template("${.kv.date}:${.kv.time}${.kv.tz}")
            );
        };
    } elif {
        parser {
            date-parser-nofilter(
                format('%Y-%m-%d:%H:%M:%S')
                template("${.kv.date}:${.kv.time}")
            );
        };
    } else {
        rewrite { set("rogue-fortinet", value("fields.sc4s_error")); };
    };

# Fortiweb
    if {
         filter(f_fortinet_fortiweb);
         rewrite {
             set("fortigate_fortiweb", value("fields.sc4s_vendor_product"));
             set("${.kv.devname}", value("HOST"));
         };
         if (match("traffic" value(".kv.type"))) {
             rewrite { r_set_splunk_dest_default(sourcetype("fwb_traffic"))};
             parser {p_add_context_splunk(key("fortinet_fortiweb_traffic")); };
         } elif (match("attack" value(".kv.type"))) {
             rewrite { r_set_splunk_dest_default(sourcetype("fwb_attack"))};
             parser {p_add_context_splunk(key("fortinet_fortiweb_attack")); };
         } elif (match("event" value(".kv.type"))) {
             rewrite { r_set_splunk_dest_default(sourcetype("fwb_event"))};
             parser {p_add_context_splunk(key("fortinet_fortiweb_event")); };
         } else {
             rewrite { r_set_splunk_dest_default(sourcetype("fwb_log"))};
             parser {p_add_context_splunk(key("fortinet_fortiweb_log")); };
         };
#FortiOS
    } else {
         rewrite {
             set("fortigate_fortios", value("fields.sc4s_vendor_product"));
             set("${.kv.devname}", value("HOST"));
         };
         if (match("traffic" value(".kv.type"))) {
            rewrite { r_set_splunk_dest_default(sourcetype("fgt_traffic"))};
            parser {p_add_context_splunk(key("fortinet_fortios_traffic")); };
         } elif (match("utm" value(".kv.type"))) {
            rewrite { r_set_splunk_dest_default(sourcetype("fgt_utm"))};
            parser {p_add_context_splunk(key("fortinet_fortios_utm")); };
         } elif (match("event" value(".kv.type"))) {
            rewrite { r_set_splunk_dest_default(sourcetype("fgt_event"))};
            parser {p_add_context_splunk(key("fortinet_fortios_event")); };
         } else {
            rewrite { r_set_splunk_dest_default(sourcetype("fgt_log"))};
            parser {p_add_context_splunk(key("fortinet_fortios_log")); };
        };
    };

    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };

{{- if (print (getenv "SC4S_DEST_FORTINET_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_FORTINET_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_FORTINET_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_FORTINET_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_FORTINET_HEC" "no")) }}
    destination(d_hec);
{{- end}}


{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_FORTINET" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_FORTINET_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_FORTINET_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_FORTINET_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
