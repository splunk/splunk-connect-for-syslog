# Common Event Format
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CEF" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_soup_is_cef {
    tags("cef");
};

parser p_cef_header {

    kv-parser(prefix(".cef.") template("${.cef.message}")
    );

};

parser p_cef_ts_rt {
    date-parser-nofilter(format(
                '%s.%f',
                '%s',
                '%b %d %H:%M:%S',
                '%b %d %Y %H:%M:%S')
                template("${.cef.rt}")
    );
};
parser p_cef_ts_end {
    date-parser-nofilter(format(
                '%s.%f',
                '%s',
                '%b %d %H:%M:%S',
                '%b %d %Y %H:%M:%S')
                template("${.cef.end}")
    );
};

parser p_cef_class {
    add-contextual-data(
        selector("${fields.cef_device_vendor}_${fields.cef_device_product}_${fields.cef_device_event_class}"),
        database("conf.d/merged/context/splunk_metadata.csv")
        ignore-case(yes)
        prefix(".splunk.")
    );
};

# ===============================================================================================
# CEF Header with message; useful for common event format (CEF)
# ===============================================================================================

template t_cef_hdr_msg {
        template("$(strip $MESSAGE )");
        };

template t_cef_kv {
        template("$(strip $MESSAGE )");
        };        

log {
    junction {
{{- if or (or (or (getenv  (print "SC4S_LISTEN_" $context.port_id "_TCP_PORT")) (getenv  (print "SC4S_LISTEN_" $context.port_id "_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_" $context.port_id "_TLS_PORT"))) (getenv  (print "SC4S_LISTEN_" $context.port_id "_RFC6587_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CEF traffic
            source (s_CEF);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for CEF traffic
            source (s_DEFAULT);
            filter(f_soup_is_cef);
            flags(final);
        };
    };

    rewrite {
        r_set_splunk_dest_default(sourcetype("cef"))
        set("CEF" value("fields.sc4s_syslog_format"));
    };

    parser (p_cef_header);

    rewrite {
        set("${fields.cef_device_vendor}_${fields.cef_device_product}", value("fields.sc4s_vendor_product"));
    };

    # We already have the syslog msg time stamp however that may not be the best one
    # If we have an rt or end field that is best we use the If trick here so if this parser fails
    # We don't get sent to fallback.
    if {
        # 12 digit epoch timestamps are non-standard; when used they often indicate the fields are misused
        # Non-standard strptime formats also choke the syslog-ng date parser, which outputs wildy random timestamps
        # Simply filter and ignore
        filter{
            match('^\d{12}', value('.cef.start')) or match('^\d{12}', value('.cef.end')) or match('^\d{12}', value('.cef.rt'));
        };
    } elif {
        filter{
            match('^.', value('.cef.rt'))
        };
        parser (p_cef_ts_rt);
    } elif {
        filter{
            match('^.', value('.cef.end'))
        };
        parser (p_cef_ts_end);
    } else {
    }; #Do nothing this is allows for both rt and end to be missing and still pass with the message ts

    # CEF TAs use the source as their bounds in props.conf
    # CEF source entries in splunk_metadata.csv should reflect the proper source as well as sourcetype

    parser {
        p_add_context_splunk(key("${fields.cef_device_vendor}_${fields.cef_device_product}"));
    };
    if {
        filter{
            match("Trend Micro_Deep Security Agent" value("fields.sc4s_vendor_product"));
        };
        if {
            filter{
                match("^(10|[2-3][0-9][0-9]|[5-7][0-9][0-9]|8[0-4][0-9]|1[0-9][0-9][0-9][0-9][0-9][0-9])$" value("fields.cef_device_event_class"));
            };      
            rewrite {
                set("intrusion prevention" value("fields.cef_device_event_class"));
            };
        } elif {
            filter{
                match("^(20|21|1[0-9][0-9])$" value("fields.cef_device_event_class"));
            };      
            rewrite {
                set("firewall" value("fields.cef_device_event_class"));
            };
        } elif {
            filter{
                match("^(4[0-9][0-9][0-9][0-9][0-9][0-9])$" value("fields.cef_device_event_class"));
            };      
            rewrite {
                set("antimalware" value("fields.cef_device_event_class"));
            };
        } elif {
            filter{
                match("^(30|2[0-9][0-9][0-9][0-9][0-9][0-9])$" value("fields.cef_device_event_class"));
            };      
            rewrite {
                set("integrity monitoring" value("fields.cef_device_event_class"));
            };
        } elif {
            filter{
                match("^(40|3[0-9][0-9][0-9][0-9][0-9][0-9])$" value("fields.cef_device_event_class"));
            };      
            rewrite {
                set("log inspection" value("fields.cef_device_event_class"));
            };
        } elif {
            filter{
                match("^(5[0-9][0-9][0-9][0-9][0-9][0-9])$" value("fields.cef_device_event_class"));
            };      
            rewrite {
                set("web reputation" value("fields.cef_device_event_class"));
            };
        } elif {
            filter{
                match("^(6[0-9][0-9][0-9][0-9][0-9][0-9])$" value("fields.cef_device_event_class"));
            };      
            rewrite {
                set("app control" value("fields.cef_device_event_class"));
            };
        };      
    } elif {
        filter{
            "${.vectra.module}" eq "cef_account_detection"
        };      
        rewrite {
            set("accountdetect" value("fields.cef_device_event_class"));
        };
    };
    parser(p_cef_class);
    if (match("SC4S:unknown" value(".splunk.sourcetype"))) {
        rewrite { set("cef", value(".splunk.sourcetype")); };
    };

    parser (compliance_meta_by_source);

    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };

{{- if (print (getenv "SC4S_DEST_CEF_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_CEF_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_CEF_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_CEF_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CEF_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CEF" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_CEF_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_CEF_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_CEF_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
