# Cisco ASA
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CISCO_ASA" }}
{{- tmpl.Exec "t/source_network.t" $context }}


log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_CISCO_ASA_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CISCO_ASA_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CISCO_ASA_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CISCO_ASA traffic
            source (s_CISCO_ASA);
            flags (final);
	    };
{{- end}}
{{- if or (or (getenv  (print "SC4S_LISTEN_CISCO_IOS_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CISCO_IOS_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CISCO_IOS_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CISCO_IOS traffic
            source (s_CISCO_IOS);
            filter {
                filter(f_soup_is_cisco_asa)
                or filter(f_soup_is_cisco_ftd);
            };
            flags (final);
	    };
{{- end}}

        channel {
        # Listen on the default port (typically 514) for CISCO_IOS traffic
            source (s_DEFAULT);
            filter {
                filter(f_soup_is_cisco_asa)
                or filter(f_soup_is_cisco_ftd);
            };
            
            flags(final);
        };
    };


{{- /* Check environment variables (and defaults if unset) for sending to the HEC */}}
{{- /* destination. When more destination options are offered in SC4S, this is where */}}
{{- /* output to them will be configured */}}

{{ if (print (getenv "SC4S_DEST_CISCO_ASA_ALT_FILTER")) }}
# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_CISCO_ASA_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_CISCO_ASA_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_CISCO_ASA_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CISCO_ASA_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- /* Check environment variables (and defaults if unset) for sending to the local EWMM-format */}}
{{- /* disk archive */}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CISCO_ASA" "no")) }}
    destination(d_archive);
{{- end}}

{{- /* Check environment variables for sending to a global list of alternate destinations */}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- /* Check environment variables for sending to a list of alternate destinations only for this specific source */}}

{{- if (print (getenv "SC4S_DEST_CISCO_ASA_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_CISCO_ASA_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_CISCO_ASA_ALT_FILTER")) }}
    };
{{- end }}


# All passes through any matching log path will be final
    flags(flow-control,final);
};