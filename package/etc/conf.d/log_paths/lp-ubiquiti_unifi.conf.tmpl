# Ubiquiti unifi
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "UBIQUITI_UNIFI" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_ubiquiti_unifi {
    host('^U[^,]{1,10},[a-z0-9]{9,16},v\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,6}')
    or
    program('^U[^,]{1,10},[a-z0-9]{9,16},v\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,6}')
    or
    match("ubiquiti_unifi_*", value("fields.sc4s_vendor_product") type(glob) );
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_UBIQUITI_UNIFI_TCP_PORT")) (getenv  (print "SC4S_LISTEN_UBIQUITI_UNIFI_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_UBIQUITI_UNIFI_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for UBIQUITI_UNIFI traffic
            source (s_UBIQUITI_UNIFI);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for UBIQUITI_UNIFI traffic
            source (s_DEFAULT);
            filter(f_is_rfc3164);
            filter(f_ubiquiti_unifi);
            flags(final);
        };
    };

    parser {p_add_context_splunk(key("ubiquiti_unifi")); };

    #Firewall
    if {
        filter {
            match("ubiquiti_unifi_fw", value("fields.sc4s_vendor_product") type(glob) );
        };

        rewrite { set("${LEGACY_MSGHDR}${MSG}" value("MSG")); };

        if (match("[^)]\s\S+\skernel:\s[^ll\sheader][^\[\d+.\d+\]]\S+\s\w+:" value("MSG"))) {
            rewrite { r_set_splunk_dest_default(sourcetype("ubnt:threat")) };
            parser {p_add_context_splunk(key("ubiquiti_unifi_threat")); };
        } elif (match("\S+\slinkcheck:" value("MSG"))) {
            rewrite { r_set_splunk_dest_default(sourcetype("ubnt:link")) };
            parser {p_add_context_splunk(key("ubiquiti_unifi_link")); };
        } elif (match("\d+:\d+:\d+\s\S+\ssudo:" value("MSG"))) {
            rewrite { r_set_splunk_dest_default(sourcetype("ubnt:sudo")) };
            parser {p_add_context_splunk(key("ubiquiti_unifi_sudo")); };
        } else {
            rewrite {
                r_set_splunk_dest_default(sourcetype("ubnt:fw"));
            };
            parser {p_add_context_splunk(key("ubiquiti_unifi_fw")); };
        };
    #Switch
    } elif {
        filter {
            host('^(?<model>US[^,]{1,10}),(?<serial>[a-z0-9]{9,16}),(?<firmware>v\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,6})', flags("store-matches"));
        };

        rewrite { set("${LEGACY_MSGHDR}${MSG}" value("MSG")); };

        if (match('hostapd:\s+ath' value("MSG"))) {
            rewrite {
                set("ubiquiti_unifi_wireless", value("fields.sc4s_vendor_product"));
                r_set_splunk_dest_default(sourcetype("ubnt:hostapd"));
                set("${FULLHOST_FROM}", value("HOST"));
            };
            parser {p_add_context_splunk(key("ubiquiti_unifi_wireless")); };
        } elif (match('\d+:\d+:\d+\s\S+\smcad:' value("MSG"))) {
            rewrite {
                set("ubiquiti_unifi_wireless", value("fields.sc4s_vendor_product"));
                r_set_splunk_dest_default(sourcetype("ubnt:mcad"));
                set("${FULLHOST_FROM}", value("HOST"));
            };
            parser {p_add_context_splunk(key("ubiquiti_unifi_wireless")); };
        } else {
            rewrite {
                set("ubiquiti_unifi_switch", value("fields.sc4s_vendor_product"));
                r_set_splunk_dest_default(sourcetype("ubnt:switch"));
                set("${FULLHOST_FROM}",value("HOST"));
                set("${model}", value("fields.model"));
                set("${serial}", value("fields.serial"));
                set("${firmware}", value("fields.firmware"));
            };
            parser {p_add_context_splunk(key("ubiquiti_unifi_switch")); };

        };

    } elif {
        filter {
            program('^(?<model>U\d[^,]{1,10}),(?<serial>[a-z0-9]{9,16}),(?<firmware>v\d{1,2}\.\d{1,2}\.\d{1,2}\.\d{1,6})', flags("store-matches"));
        };
        rewrite {
            set("ubiquiti_unifi_wireless", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("ubnt:wireless"));
            set("${FULLHOST_FROM}",value("HOST"));
            set("${model}", value("fields.model"));
            set("${serial}", value("fields.serial"));
            set("${firmware}", value("fields.firmware"));
        };
       parser {p_add_context_splunk(key("ubiquiti_unifi_wireless")); };

    } elif (match("traputil.c\(696\) " value("MSG"))) {
        rewrite {
            set("ubiquiti_unifi_edge_switch", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("ubnt:edgeswitch"));
            set("${FULLHOST_FROM}", value("HOST"));
        };
       parser {p_add_context_splunk(key("ubiquiti_unifi_edge_switch")); };

    } else {
       rewrite {
        set("ubiquiti_unifi", value("fields.sc4s_vendor_product"));
        r_set_splunk_dest_default(sourcetype("ubnt"));
        set("${FULLHOST_FROM}", value("HOST"));
       };
       parser {p_add_context_splunk(key("ubiquiti_unifi")); };
    };

    parser (compliance_meta_by_source);

    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };

{{- if (print (getenv "SC4S_DEST_UBIQUITI_UNIFI_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_UBIQUITI_UNIFI_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_UBIQUITI_UNIFI_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_UBIQUITI_UNIFI_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_UBIQUITI_UNIFI_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_UBIQUITI_UNIFI" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_UBIQUITI_UNIFI_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_UBIQUITI_UNIFI_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_UBIQUITI_UNIFI_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
