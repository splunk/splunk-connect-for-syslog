# Microfocus ArcSight
{{ $context := dict "port_id" "MICROFOCUS_ARCSIGHT" "parser" "common"}}
{{ tmpl.Exec "t/source_network.t" $context }}

parser p_microfocus_arcsight_header {
    csv-parser(
        columns("fields.sc4s_cef_version", "fields.cef_device_vendor", "fields.cef_device_product", "fields.cef_device_version", "fields.cef_device_event_class", "fields.cef_name", "fields.cef_severity", MESSAGE)
        delimiters(chars("|"))
        flags(strip-whitespace, escape-none, greedy)
    );

    kv-parser(prefix(".cef.") template("t_msg_trim")
    );

};

parser p_microfocus_arcsight_ts_rt {
    date-parser(format("%s") template("${.cef.rt}")
    );
};
parser p_microfocus_arcsight_ts_end {
    date-parser(format("%s") template("${.cef.end}")
    );
};

parser p_microfocus_arcsight_source {
    add-contextual-data(
        selector("${fields.cef_device_vendor}_${fields.cef_device_product}"),
        database("conf.d/context/microfocus_arcsight_source.csv")
        ignore-case(yes)
        prefix(".splunk.")
        default-selector("unknown")
    );
};
# The following is an inline template; we will use this to generate the actual log path
{{ define "log_path" }}
log {
{{- if eq (.) "yes"}}
    source(s_DEFAULT);
    filter(f_is_rfc3164);
    filter(f_microfocus_arcsight);
{{- end}}
{{- if eq (.) "no"}}
    source (s_MICROFOCUS_ARCSIGHT);
{{- end}}

    rewrite {
        set("microfocus_arcsight", value("fields.sc4s_vendor_product"));
        r_set_splunk_dest_default(sourcetype("cef"), index("main"))
    };

    parser {
        p_add_context_splunk(key("cef_{fields.cef_device_vendor}_${fields.cef_device_product}"));
    };

    parser (p_microfocus_arcsight_header);

    # We already have the syslog msg time stamp however that may not be the best one
    # If we have an rt or end field that is best we use the If trick here so if this parser fails
    # We don't get sent to fallback.
    if {
        parser (p_microfocus_arcsight_ts_rt);
    } elif {
        parser (p_microfocus_arcsight_ts_end);
    } else {}; #Do nothing this is allows for both rt and end to be missing and still pass with the message ts

    #CEF TAs use the source as their bounds in props.conf
    parser(p_microfocus_arcsight_source);

    parser (compliance_meta_by_source);

    #We want to unset the fields we won't need, as this is copied into the
    #disk queue for network destinations. This can be very disk expensive
    #if we don't
    rewrite {
        set("$(template ${fields.sc4s_template} $(template t_hdr_msg))" value("MSG"));
        unset(value("RAWMSG"));
        unset(value("PROGRAM"));
        unset(value("LEGACY_MSGHDR"));
        groupunset(values(".cef.*"));
    };

{{- if ((getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes") | conv.ToBool) or (conv.ToBool (getenv "SC4S_DEST_MICROFOCUS_ARCSIGHT_HEC" "no") | conv.ToBool) }}
    destination(d_hec);
{{- end}}

{{- if (getenv "SC4S_ARCHIVE_GLOBAL") or (getenv "SC4S_ARCHIVE_MICROFOCUS_ARCSIGHT") }}
    destination(d_archive);
{{- end}}

    flags(flow-control);

};
{{- end}}

{{- if or (or (getenv  (print "SC4S_LISTEN_MICROFOCUS_ARCSIGHT_TCP_PORT")) (getenv  (print "SC4S_LISTEN_MICROFOCUS_ARCSIGHT_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_MICROFOCUS_ARCSIGHT_TLS_PORT")) }}
# Listen on the specified dedicated port(s) for MICROFOCUS_ARCSIGHT traffic
    {{tmpl.Exec "log_path" "no" }}
{{- end}}

# Listen on the default port (typically 514) for MICROFOCUS_ARCSIGHT traffic
{{tmpl.Exec "log_path" "yes" }}
