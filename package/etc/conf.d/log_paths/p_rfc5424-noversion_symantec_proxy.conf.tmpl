# Symantec Proxy (Bluecoat)
{{ $context := dict "port_id" "SYMANTEC_PROXY" "parser" "common" }}
{{ tmpl.Exec "t/source_network.t" $context }}
# The following is an inline template; we will use this to generate the actual log path
{{ define "log_path" }}
log {
{{- if eq (.) "yes"}}
    source(s_DEFAULT);
    filter(f_is_rfc5424_noversion);
    filter(f_symantec_bluecoat_proxy);
{{- end}}
{{- if eq (.) "no"}}
    source (s_SYMANTEC_PROXY);
{{- end}}

    rewrite {
        set("bluecoat_proxy", value("fields.sc4s_vendor_product"));
        r_set_splunk_dest_default(sourcetype("bluecoat:proxysg:access:kv"), index("netproxy"))
    };

    parser {p_add_context_splunk(key("bluecoat_proxy")); };

    parser (compliance_meta_by_source);


    #We want to unset the fields we won't need, as this is copied into the
    #disk queue for network destinations. This can be very disk expensive
    #if we don't
    rewrite {
        set("$(template ${fields.sc4s_template} $(template t_msg_only))" value("MSG"));
        unset(value("RAWMSG"));
        unset(value("PROGRAM"));
        unset(value("LEGACY_MSGHDR"));
        groupunset(values(".kv.*"));
    };

    destination(d_hec);

{{- if (getenv "SC4S_ARCHIVE_GLOBAL") or (getenv "SC4S_ARCHIVE_SYMANTEC_PROXY") }}
    destination(d_archive);
{{- end}}

    flags(flow-control);
};
{{- end}}
{{- if (ne (getenv (print "SC4S_LISTEN_SYMANTEC_PROXY_TCP_PORT") "no") "no") or (ne (getenv (print "SC4S_LISTEN_SYMANTEC_PROXY_UDP_PORT") "no") "no") or (ne (getenv (print "SC4S_LISTEN_SYMANTEC_PROXY_TLS_PORT") "no") "no") }}
# Listen on the specified dedicated port(s) for SYMANTEC_PROXY traffic
    {{ tmpl.Exec "log_path" "no" }}
{{- end}}

# Listen on the default port (typically 514) for SYMANTEC_PROXY traffic
{{ tmpl.Exec "log_path" "yes" }}
