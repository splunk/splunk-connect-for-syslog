# Cisco IOS
{{ $context := dict "port_id" "CISCO_IOS" "parser" "common" }}
{{ tmpl.Exec "t/source_network.t" $context }}

# The following is an inline template; we will use this to generate the actual log path
{{ define "log_path" }}
log {
{{- if eq (.) "yes" }}
    source(s_DEFAULT);
    filter(f_is_cisco_ios);
{{- end }}
{{- if eq (.) "no" }}
    source (s_CISCO_IOS);
{{- end }}

    rewrite {
        set("cisco_ios", value("fields.sc4s_vendor_product"));
        guess-time-zone();
        r_set_splunk_dest_default(sourcetype("cisco:ios"), index("netops"))
    };
    parser {
        p_add_context_splunk(key("cisco_ios"));
    };

    parser (compliance_meta_by_source);

    #We want to unset the fields we won't need, as this is copied into the
    #disk queue for network destinations. This can be very disk expensive
    #if we don't
    rewrite {
        set("$(template ${fields.sc4s_template} $(template t_msg_only))" value("MSG"));
        unset(value("RAWMSG"));
        unset(value("PROGRAM"));
        unset(value("LEGACY_MSGHDR"));
        groupunset(values(".cisco.*"));
    };

{{- if ((getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes") | conv.ToBool) or (conv.ToBool (getenv "SC4S_DEST_CISCO_IOS_HEC" "no") | conv.ToBool) }}
    destination(d_hec);
{{- end}}

{{- if (getenv "SC4S_ARCHIVE_GLOBAL") or (getenv "SC4S_ARCHIVE_CISCO_IOS") }}
    destination(d_archive);
{{- end}}

    flags(flow-control);
};
{{- end}}

{{- if or (or (getenv  (print "SC4S_LISTEN_CISCO_IOS_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CISCO_IOS_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CISCO_IOS_TLS_PORT")) }}
# Listen on the specified dedicated port(s) for CISCO_IOS traffic
    {{ tmpl.Exec "log_path" "no" }}
{{- end}}

# Listen on the default port (typically 514) for CISCO_IOS traffic
{{ tmpl.Exec "log_path" "yes" }}
