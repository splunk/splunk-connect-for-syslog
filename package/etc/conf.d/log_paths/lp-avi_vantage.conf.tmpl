# AVI_VANTAGE
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "AVI_VANTAGE" "parser" "common" }}
{{- tmpl.Exec "t/source_network.t" $context }}

{{- /* Filters or parsers used by the log path should be declared prior to use */}}
{{- /* above the actual log{} stanza) */}}

filter f_avi_vantage {
  message('Avi-Controller\s');
};
rewrite set_avi_vantage{
    set("avi_vantage" value("fields.sc4s_syslog_format"));
};
filter f_is_avi_vantage{
    match("avi_vantage" value("fields.sc4s_syslog_format"))
};

parser p_avi_vantage{
    channel {
        if{ #for JSON
             filter {
                    message(
                    '^(<\d{1,3}>)([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])((?:[0-9]{4}-[0-9]{2}-[0-9]{2})?(?:[ T][0-9]{2}:[0-9]{2}:[0-9]{2})?(?:[.,][0-9]{3})))\s([[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])\sAvi-Controller.*?({.*})'
                     flags(store-matches));
             };
              parser { date-parser-nofilter(format(
                        '%Y-%m-%d %H:%M:%S,%f'
                        )
                        template("$2"));
                };

                rewrite {
                    set(
                        "${6}",
                        value("HOST")

                    );
                    set(
                        "${7}",
                        value("MESSAGE")
                    );
                };

        }
        elif{
            filter {
                message(
                #'^(<\d{1,3}>)([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])((?:[0-9]{4}-[0-9]{2}-[0-9]{2})?(?:[ T][0-9]{2}:[0-9]{2}:[0-9]{2})?(?:[.,][0-9]{3})))\s([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])\s(.*)'
                #'^(<\d{1,3}>)([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])((?:[0-9]{4}-[0-9]{2}-[0-9]{2})?(?:[ T][0-9]{2}:[0-9]{2}:[0-9]{2})?(?:[.,][0-9]{3})))\s([[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])\s.*?(\[.*)'
                '^(<\d{1,3}>)([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])((?:[0-9]{4}-[0-9]{2}-[0-9]{2})?(?:[ T][0-9]{2}:[0-9]{2}:[0-9]{2})?(?:[.,][0-9]{3})))\s([[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])\sAvi-Controller.*?(\[.*)'
                flags(store-matches));
            };

            parser { date-parser-nofilter(format(
                    '%Y-%m-%d %H:%M:%S,%f'
                    )
                    template("$2"));
            };

            rewrite {
                set(
                    "${6}",
                    value("HOST")

                );
                set(
                    "${7}",
                    value("MESSAGE")
                );
            };
        }
        else{ #for no host
            filter {
                message(
                #'^(<\d{1,3}>)\[([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])((?:[0-9]{4}-[0-9]{2}-[0-9]{2})?(?:[ T][0-9]{2}:[0-9]{2}:[0-9]{2})?(?:[.,][0-9]{3}))).*?(\[.*)'
                '^(<\d{1,3}>)\[([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])((?:[0-9]{4}-[0-9]{2}-[0-9]{2})?(?:[ T][0-9]{2}:[0-9]{2}:[0-9]{2})?(?:[.,][0-9]{3}))):\sAvi-Controller.*?(\[.*)'
                flags(store-matches));
            };
             parser { date-parser-nofilter(format(
                    '%Y-%m-%d %H:%M:%S,%f'
                    )
                    template("$2"));
            };

            rewrite {
                set(
                    "${6}",
                    value("MESSAGE")
                );
            };
        };
    };
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_AVI_VANTAGE_TCP_PORT")) (getenv  (print "SC4S_LISTEN_AVI_VANTAGE_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_AVI_VANTAGE_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for AVI_VANTAGE traffic
            source (s_AVI_VANTAGE);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for AVI_VANTAGE traffic
            source (s_DEFAULT);
            filter(f_is_avi_vantage);
            flags(final);
        };
    };

    rewrite {
        set("avi_vantage", value("fields.sc4s_vendor_product"));
        r_set_splunk_dest_default(sourcetype("avi:events"));
    };
    parser { p_add_context_splunk(key("avi_vantage")); };
    parser (compliance_meta_by_source);

    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };

{{- /* Check environment variables (and defaults if unset) for sending to the HEC */}}
{{- /* destination. When more destination options are offered in SC4S, this is where */}}
{{- /* output to them will be configured */}}

{{ if (print (getenv "SC4S_DEST_AVI_VANTAGE_ALT_FILTER")) }}
# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_AVI_VANTAGE_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_AVI_VANTAGE_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_AVI_VANTAGE_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_AVI_VANTAGE_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- /* Check environment variables (and defaults if unset) for sending to the local EWMM-format */}}
{{- /* disk archive */}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_AVI_VANTAGE" "no")) }}
    destination(d_archive);
{{- end}}

{{- /* Check environment variables for sending to a global list of alternate destinations */}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- /* Check environment variables for sending to a list of alternate destinations only for this specific source */}}

{{- if (print (getenv "SC4S_DEST_AVI_VANTAGE_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_AVI_VANTAGE_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_AVI_VANTAGE_ALT_FILTER")) }}
    };
{{- end }}


# All passes through any matching log path will be final
    flags(flow-control,final);
};
