# Citrix Netscaler ADC
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CITRIX_NETSCALER" "parser" "citrix_netscaler" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_citrix_netscaler {
    match("^citrix_netscaler", value("fields.sc4s_vendor_product"));
};
filter f_citrix_netscaler_message {
    message(
        '^(<\d{1,3}>) ?(?<LEGACY_MSGHDR>(?<CITRIXDATE>\d\d\/\d\d\/\d\d\d\d\:\d\d:\d\d:\d\d) (?<CITRIXTZ>[^ ]{3}+) (?<HOST>[^ ]+) )(?<MESSAGE>.*)'
        flags(store-matches)
    );
};

rewrite r_citrix_netscaler_message {
    set("citrix_netscaler" value("fields.sc4s_syslog_format"));
    set("citrix_netscaler" value("fields.sc4s_vendor_product"));
};

filter f_citrix_netscaler_sdx_message {
    message(
        '^(<\d{1,3}>) ?(?<LEGACY_MSGHDR>(?<CITRIXDATE>\w{1,3} \d{1,2} \d{2}:\d{2}:\d{2}) (svm([^:]+): )(?<HOST>[^ ]+) (?<MESSAGE>.*))'
        flags(store-matches)
    );
};
filter f_citrix_netscaler_sdx_AAAmessage {
    message(
        '^(<\d{1,3}>) ?(?<LEGACY_MSGHDR>(?<CITRIXDATE>\w{1,3} {1,2}\d{1,2} \d{2}:\d{2}:\d{2}) )(?<MESSAGE>\[\d+\]: AAA Message :.*)'
        flags(store-matches)
    );
};

rewrite r_citrix_netscaler_sdx_message {
    set("citrix_netscaler" value("fields.sc4s_syslog_format"));
    set("citrix_netscaler" value("fields.sc4s_vendor_product"));
};
rewrite r_citrix_netscaler_sdx_AAAmessage {
    set("citrix_netscaler" value("fields.sc4s_syslog_format"));
    set("citrix_netscaler" value("fields.sc4s_vendor_product"));
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_CITRIX_NETSCALER_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CITRIX_NETSCALER_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CITRIX_NETSCALER_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CITRIX_NETSCALER traffic
            source (s_CITRIX_NETSCALER);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for CITRIX_NETSCALER traffic
            source (s_DEFAULT);
            filter(f_citrix_netscaler);
            flags(final);
        };
    };

    rewrite {
        set("citrix_netscaler", value("fields.sc4s_vendor_product"));
        r_set_splunk_dest_default(sourcetype("citrix:netscaler:syslog"))
    };

    parser {p_add_context_splunk(key("citrix_netscaler")); };
    parser (compliance_meta_by_source);
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CITRIX_NETSCALER_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CITRIX_NETSCALER" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_CITRIX_NETSCALER_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_CITRIX_NETSCALER_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

    flags(flow-control,final);
};
