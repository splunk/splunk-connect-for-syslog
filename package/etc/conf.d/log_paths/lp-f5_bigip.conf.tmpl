# F5_BIGIP
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "F5_BIGIP" "parser" "common" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_f5_bigip {
    match("^f5_bigip", value("fields.sc4s_vendor_product"))
    or match('^\[F5@12276' value("SDATA"))
    or program('iControlPortal.cgi')
    or program("tmsh")
    or program("mcpd")
    or program("mprov")
    or program("apmd")
    or program("tmm\d?")
    or filter(f_f5_bigip_irule)
    or program('F5')
    or message('^f5_asm=Splunk-F5-ASM');
};

filter f_f5_bigip_irule {
    match(
        '.{1,85}\,f5_irule\='
        template('${LEGACY_MSGHDR}${MESSAGE}')
    );
};

filter f_f5_bigip_message {
    message(
        '^(?i)(<\d+> ?[[:alpha:]]+\s{1,2}\d{1,2} \d\d:\d\d:\d\d )(?:([^\/ ]+)(?:\/))?([^ ]+) +(?:alert|debug|notice|err|error|warning|info|emerg) +?(.*)'
        flags(store-matches)
    );
};

parser p_f5_bigip_message {
    syslog-parser(
        template("$1$3 $4")
        flags(guess-timezone,assume-utf8,{{- if (conv.ToBool (getenv "SC4S_SOURCE_STORE_RAWMSG" "no")) }} store-raw-message {{- end}})
    );
};

parser p_f5_bigip_irule {
    csv-parser(
        columns('HOST','.irule.type')
        delimiters(chars(","))
        template('${LEGACY_MSGHDR}${MESSAGE}')
    );
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_F5_BIGIP_TCP_PORT")) (getenv  (print "SC4S_LISTEN_F5_BIGIP_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_F5_BIGIP_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for F5_BIGIP traffic
            source (s_F5_BIGIP);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for F5_BIGIP traffic
            source (s_DEFAULT);
            filter(f_f5_bigip);
            flags(final);
        };
    };

    if {
        filter{
            program("tmsh")
            or program("mcpd")
            or program("mprov")
            or program("apmd")
            or program("tmm\d?")
        };
        rewrite {
            set("f5_bigip", value("fields.sc4s_vendor_product"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("f5:bigip:syslog"),  source("program:${.PROGRAM}"))
        };
        parser { p_add_context_splunk(key("f5_bigip")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };
    } elif {
        filter {
            program('F5') and match('access_json' value('MSGID'))
        };
        rewrite {
            set("f5_bigip_access_json", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("f5:bigip:ltm:access_json"))
        };
        parser { p_add_context_splunk(key("f5_bigip_access_json")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };
    } elif {
        filter {
            filter(f_f5_bigip_irule)
        };
        parser(p_f5_bigip_irule);
        if {
            filter {
                match('Splunk-iRule-HTTP',value('.irule.type'))                
            };
            rewrite {
                r_set_splunk_dest_default(sourcetype("f5:bigip:ltm:http:irule"))
            };
        } elif {
            filter {
                match('Splunk-iRule-DNS_REQUEST',value('.irule.type'))
            };
            rewrite {
                r_set_splunk_dest_default(sourcetype("f5:bigip:gtm:dns:request:irule"))
            };
        } elif {
            filter {
                match('Splunk-iRule-DNS_RESPONSE',value('.irule.type'))
            };
            rewrite {
                r_set_splunk_dest_default(sourcetype("f5:bigip:gtm:dns:response:irule"))
            };
        } elif {
            filter {
                match('Splunk-iRule-LB_FAILED',value('.irule.type'))                
            };
            rewrite {
                r_set_splunk_dest_default(sourcetype("f5:bigip:ltm:failed:irule"))
            };
        } else {
            rewrite {
                r_set_splunk_dest_default(sourcetype("f5:bigip:irule"))
            };
        };
        rewrite {
            set("f5_bigip_irule", value("fields.sc4s_vendor_product"));
        };
        rewrite {
            #Set both HOST and .splunk.host to allow compliance override
            set("${HOST}" value(".splunk.host")
            );
        };

        parser { p_add_context_splunk(key("f5_bigip_irule")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };
    } elif {
        filter {
            message('^f5_asm=Splunk-F5-ASM')
        };
        rewrite {
            set("f5_bigip_asm", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("f5:bigip:asm:syslog"))
        };
        parser { p_add_context_splunk(key("f5_bigip_asm")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };
    } elif {
    	filter{
	    match('pam_radius_auth', value("MESSAGE")) or
	    match('pam_audit', value("MESSAGE")) or
	    match('pam_audit', value("PROGRAM")) or
	    match('authenticated', value("MESSAGE")) or
	    match('pam_bigip_authz', value("MESSAGE")) or
	    match('mod_auth_pam', value("MESSAGE"))
        };
        rewrite {
            set("f5_bigip", value("fields.sc4s_vendor_product"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("f5:bigip:syslog"),  source("program:${.PROGRAM}"))
        };
        parser { p_add_context_splunk(key("f5_bigip")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };
    } elif {
        filter(f_f5_bigip);
        rewrite {
            set("f5_bigip_nix", value("fields.sc4s_vendor_product"));
            subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("nix:syslog"),  source("program:${.PROGRAM}"))
        };
        parser { p_add_context_splunk(key("f5_bigip")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };
    } else {
        rewrite {
            set("f5_bigip_rogue_message", value("fields.sc4s_vendor_product"));
            set("rogue-f5", value("fields.sc4s_error"));
            r_set_splunk_dest_default(sourcetype("f5:bigip:rogue"))
        };
        parser { p_add_context_splunk(key("f5_bigip")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };
    };

{{- if (print (getenv "SC4S_DEST_F5_BIGIP_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_F5_BIGIP_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_F5_BIGIP_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_F5_BIGIP_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_F5_BIGIP_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_F5_BIGIP" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_F5_BIGIP_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_F5_BIGIP_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_F5_BIGIP_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
