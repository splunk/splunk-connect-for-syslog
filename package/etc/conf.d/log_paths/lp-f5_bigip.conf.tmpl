# F5_BIGIP
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "F5_BIGIP" "parser" "common" }}
{{- tmpl.Exec "t/source_network.t" $context }}

filter f_f5_bigip {
    tags("f5_bigip")
    or "${fields.sc4s_vendor_product}" eq "f5_bigip"
    or match('^\[F5@12276' value("SDATA"))
    or program('iControlPortal.cgi')
    or program('F5')
    or message('^f5_asm=Splunk-F5-ASM');
};

log {
    junction {
{{- if or (or (or (getenv  (print "SC4S_LISTEN_" $context.port_id "_TCP_PORT")) (getenv  (print "SC4S_LISTEN_" $context.port_id "_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_" $context.port_id "_TLS_PORT"))) (getenv  (print "SC4S_LISTEN_" $context.port_id "_RFC6587_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for F5_BIGIP traffic
            source (s_F5_BIGIP);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for F5_BIGIP traffic
            source (s_DEFAULT);
            filter(f_f5_bigip);
            flags(final);
        };
    };

    if {
        filter {
            tags("f5_bigip_irule")
        };
        parser { p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };
    } elif {
        filter {
            program('F5') and match('access_json' value('MSGID'))
        };
        rewrite {
            set("f5_bigip_access_json", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("f5:bigip:ltm:access_json"))
        };
        parser { p_add_context_splunk(key("f5_bigip_access_json")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };
    } elif {
        filter {
            message('^f5_asm=Splunk-F5-ASM')
        };
        rewrite {
            set("f5_bigip_asm", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("f5:bigip:asm:syslog"))
        };
        parser { p_add_context_splunk(key("f5_bigip_asm")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };
    } elif {
        filter{
            program("tmsh") or
            program("mcpd") or
            program("mprov") or
            program("apmd") or
            program("tmm\d?") or
            message("pam_radius_auth|pam_audit|authenticated|pam_bigip_authz|mod_auth_pam")            
        };
        rewrite {
            set("f5_bigip", value("fields.sc4s_vendor_product"));
            set("${PROGRAM}", value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("f5:bigip:syslog"),  source("program:${.PROGRAM}"))
        };
        parser { p_add_context_splunk(key("f5_bigip")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };
    } else {
        rewrite {
            set("f5_bigip_nix", value("fields.sc4s_vendor_product"));
            subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            r_set_splunk_dest_default(sourcetype("nix:syslog"),  source("program:${.PROGRAM}"))
        };
        parser { p_add_context_splunk(key("f5_bigip")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_legacy_hdr_msg))" value("MSG")); };
    };
{{- if (print (getenv "SC4S_DEST_F5_BIGIP_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

    if (filter({{ print (getenv "SC4S_DEST_F5_BIGIP_ALT_FILTER") }})) {
{{- if (print (getenv "SC4S_DEST_F5_BIGIP_FILTERED_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_F5_BIGIP_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
{{- end }}
    }
    else {
{{- end }}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_F5_BIGIP_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_F5_BIGIP" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_F5_BIGIP_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_F5_BIGIP_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_F5_BIGIP_ALT_FILTER")) }}
    };
{{- end }}

    flags(flow-control,final);
};
