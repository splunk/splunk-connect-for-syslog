
parser checkpoint_grouping {
    grouping-by(
        scope(host)
        key("${.kv.product}${.kv.loguid}")
        aggregate(
            value("MESSAGE" "${MESSAGE}")
            value(".cpfinal" "1" )
            inherit-mode(context)
        )
        timeout(2)
    );
};

# Checkpoint
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CHECKPOINT_SPLUNK" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_CHECKPOINT_SPLUNK_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CHECKPOINT_SPLUNK_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CHECKPOINT_SPLUNK_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CHECKPOINT_SPLUNK traffic
            source (s_CHECKPOINT_SPLUNK);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for CHECKPOINT_SPLUNK traffic
            source(s_DEFAULT);
            filter(f_is_rfc3164);
            filter(f_checkpoint_splunk);
            flags(final);
        };
    };

    if {
        parser {
            kv-parser(prefix(".kv.") pair-separator("|") template("${MSGHDR} ${MSG}"));
            date-parser-nofilter(format("%s") template("${.kv.time}"));
        };
        rewrite {
           set("${.kv.hostname}", value("HOST"));
           set("checkpoint_splunk", value("fields.sc4s_vendor_product"));
           r_set_splunk_dest_default(sourcetype("cp_log"), index("netops"))
        };

        
        if {
            parser {p_add_context_splunk(key("checkpoint_splunk")); };

            {{- if (conv.ToBool (getenv "SC4S_LISTEN_CHECKPOINT_SPLUNK_NOISE_CONTROL" "no")) }}
            parser(checkpoint_grouping);
            filter {
                match("1" value(".cpfinal"))
            };
            {{- end }}

            if  {
                filter(f_checkpoint_splunk_NetworkTraffic);
                rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("firewall"), index("netfw"))};
                parser {p_add_context_splunk(key("checkpoint_splunk_firewall")); };
            } elif  {
                filter(f_checkpoint_splunk_Web);
                rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("web"), index("netproxy"))};
                parser {p_add_context_splunk(key("checkpoint_splunk_web")); };
            } elif  {
                filter(f_checkpoint_splunk_NetworkSessions);
                rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("sessions"), index("netops"))};
                parser {p_add_context_splunk(key("checkpoint_splunk_sessions")); };
            } elif  {
                filter(f_checkpoint_splunk_IDS_Malware);
                rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("ids_malware"), index("netids"))};
                parser {p_add_context_splunk(key("checkpoint_splunk_ids")); };
            } elif  {
                filter(f_checkpoint_splunk_IDS);
                rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("ids"), index("netids"))};
                parser {p_add_context_splunk(key("checkpoint_splunk_ids")); };
            } elif  {
                filter(f_checkpoint_splunk_email);
                rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("email"), index("email"))};
                parser {p_add_context_splunk(key("checkpoint_splunk_email")); };
            } elif  {
                filter(f_checkpoint_splunk_DLP);
                rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("firewall"), index("netdlp"))};
                parser {p_add_context_splunk(key("checkpoint_splunk_dlp")); };
            } elif {
                filter(f_checkpoint_splunk_syslog);
                if {
                        parser {
                            syslog-parser(template("${.kv.default_device_message}") flags(guess-timezone, no-hostname));
                            date-parser-nofilter(format("%s") template("${.kv.time}"));
                        };
                };
                
                rewrite {
                        set("${.kv.hostname}", value("HOST"));
                        set("checkpoint_splunk", value("fields.sc4s_vendor_product"));            
                        subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
                        set("${PROGRAM}", value(".PROGRAM"));
                        subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
                    };
                rewrite { r_set_splunk_dest_default(sourcetype("nix:syslog"), index("netops"), source("program:${.PROGRAM}")) };
                parser { p_add_context_splunk(key("checkpoint_os")); };                
            
            };

                parser (compliance_meta_by_source);
                rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };

            {{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CHECKPOINT_SPLUNK_HEC" "no")) }}
                destination(d_hec);
            {{- end}}

            {{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CHECKPOINT_SPLUNK" "no")) }}
                destination(d_archive);
            {{- end}}

            {{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
                {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
            {{- end }}

            {{- if (print (getenv "SC4S_DEST_CHECKPOINT_ALTERNATES")) }}
                {{ getenv "SC4S_DEST_CHECKPOINT_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
            {{- end }}

        };
    } else {
        filter(f_nix_syslog);
        rewrite {
            set("checkpoint_splunk", value("fields.sc4s_vendor_product"));
            subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
        };
        rewrite { r_set_splunk_dest_default(sourcetype("nix:syslog"), index("netops"), source("program:${.PROGRAM}")) };
        parser { p_add_context_splunk(key("checkpoint_os")); };

        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };

    {{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CHECKPOINT_SPLUNK_HEC" "no")) }}
        destination(d_hec);
    {{- end}}

    {{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CHECKPOINT_SPLUNK" "no")) }}
        destination(d_archive);
    {{- end}}

    {{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
    {{- end }}

    {{- if (print (getenv "SC4S_DEST_CHECKPOINT_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_CHECKPOINT_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
    {{- end }}

    };

    flags(flow-control,final);
};
