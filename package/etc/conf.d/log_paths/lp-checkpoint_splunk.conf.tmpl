# Checkpoint
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CHECKPOINT_SPLUNK" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

parser p_checkpoint_format {
    kv-parser(prefix(".kv.") pair-separator("|") template(t_legacy_hdr_msg));
    date-parser-nofilter(format("%s") template("${.kv.time}"));
};

filter f_checkpoint_splunk {
    match('\|(?:origin_sic_name|originsicname)\=[cC][nN]|\|product\=SmartConsole\||\|product\=System Monitor\||\|loguid\={(?:0x[abcdef0-9]+,?){2,6}\}\|' template('$(template t_legacy_hdr_msg)')  ) or
    match('\|product=Syslog\|ifdir=inbound\|loguid=' template('$(template t_legacy_hdr_msg)'));
};

filter f_checkpoint_splunk_alerts {
    match('IOS\h+Profile' value('.kv.product'))
    or match('Device' value('.kv.product'))
};

filter f_checkpoint_splunk_Change {
    match('Application\h+Control' value('.kv.product'))
};

filter f_checkpoint_splunk_DLP {
    match('DLP' value('.kv.product'))
};

filter f_checkpoint_splunk_email {
    match('MTA' value('.kv.product'))
    or match('Anti-Spam' value('.kv.product'))
    or match('Anti\h+Spam' value('.kv.product'))
};

filter f_checkpoint_splunk_IDS {
    match('IPS' value('.kv.product'))
    or match('WIFI' value('.kv.product'))
    or match('Cellular' value('.kv.product'))
};

filter f_checkpoint_splunk_IDS_Malware {
    match('Threat\h+Emulation' value('.kv.product'))
    or match('Anti-Virus' value('.kv.product'))
    or match('Anti-Bot' value('.kv.product'))
    or match('Threat\h+Extraction' value('.kv.product'))
    or match('Anti-Ransomware' value('.kv.product'))
    or match('Anti-Exploit' value('.kv.product'))
    or match('Forensics' value('.kv.product'))
    or match('OS\h+Exploit' value('.kv.product'))
    or (match('Application' value('.kv.product')) and not match('Application Control' value('.kv.product')))
    or match('Text\h+Message' value('.kv.product'))
    or match('Network\h+Access' value('.kv.product'))
    or match('Zero\h+Phishing' value('.kv.product'))
};

filter f_checkpoint_splunk_NetworkSessions {
    match('VPN' value('.kv.product'))
    or match('Mobile' value('.kv.product'))
    or match('VPN' value('.kv.fw_subproduct'))
};

filter f_checkpoint_splunk_NetworkTraffic {
    match('Firewall' value('.kv.product'))
    and not match('VPN' value('.kv.fw_subproduct'))
};
filter f_checkpoint_splunk_Web {
    match('U[rR][lL]\h+\h+Filtering' value('.kv.product'))
};
filter f_checkpoint_splunk_syslog {
    match('Syslog' value('.kv.product'))
};


parser checkpoint_grouping {
    grouping-by(
        scope(host)
        key("${.kv.product}-${.kv.fw_subproduct}-${.kv.loguid}")
        aggregate(
            value("MESSAGE" "${MESSAGE}")
            value(".cpfinal" "1" )
            inherit-mode(last-message)
        )
        timeout(2)
    );
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_CHECKPOINT_SPLUNK_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CHECKPOINT_SPLUNK_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CHECKPOINT_SPLUNK_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CHECKPOINT_SPLUNK traffic
            source (s_CHECKPOINT_SPLUNK);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for CHECKPOINT_SPLUNK traffic
            source(s_DEFAULT);
            filter(f_checkpoint_splunk);
            flags(final);
        };
    };

    if {
        parser(p_checkpoint_format);
        rewrite {
           #The LM is the host that will always be in use so we set and save it
           set("${.kv.hostname}", value("HOST"));
           set("${.kv.hostname}", value("fields.cp_lm"));
        };
        
        if {
            #Get the FW host from the originsicname
            filter {                
                match('^[Cc][Nn]\\?=([^,]+)' value(".kv.originsicname") flags(store-matches));
            };
            rewrite {
                set("$1", value("HOST"));
            };
        } elif {
            #Get the FW host from the origin_sic_name
            filter {                
                match('^[Cc][Nn]\\?=([^,]+)' value(".kv.origin_sic_name") flags(store-matches));
            };
            rewrite {
                set("$1", value("HOST"));
            };
        };        
        # If this device is a v host we need to get the firewall name
        if {
            filter {                
                host('-v_(.*)' flags(store-matches));                
            };
            rewrite {
                set("$1", value("HOST"));
            };
        };            

        rewrite {
           set("checkpoint_splunk", value("fields.sc4s_vendor_product"));
           r_set_splunk_dest_default(sourcetype("cp_log"))
        };
        
        parser {p_add_context_splunk(key("checkpoint_splunk")); };


        if  {
            filter(f_checkpoint_splunk_NetworkTraffic);
            rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("firewall"))};
            parser {p_add_context_splunk(key("checkpoint_splunk_firewall")); };
        } elif  {
            filter(f_checkpoint_splunk_Web);
            rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("web"))};
            parser {p_add_context_splunk(key("checkpoint_splunk_web")); };
        } elif  {
            filter(f_checkpoint_splunk_NetworkSessions);
            rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("sessions"))};
            parser {p_add_context_splunk(key("checkpoint_splunk_sessions")); };
        } elif  {
            filter(f_checkpoint_splunk_IDS_Malware);
            rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("ids_malware"))};
            parser {p_add_context_splunk(key("checkpoint_splunk_ids")); };
        } elif  {
            filter(f_checkpoint_splunk_IDS);
            rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("ids"))};
            parser {p_add_context_splunk(key("checkpoint_splunk_ids")); };
        } elif  {
            filter(f_checkpoint_splunk_email);
            rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("email"))};
            parser {p_add_context_splunk(key("checkpoint_splunk_email")); };
        } elif  {
            filter(f_checkpoint_splunk_DLP);
            rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("firewall"))};
            parser {p_add_context_splunk(key("checkpoint_splunk_dlp")); };
        } elif {
            filter(f_checkpoint_splunk_syslog);
            #parser {
            #    syslog-parser(template("${.kv.default_device_message}") flags(guess-timezone, no-hostname));
            #    date-parser-nofilter(format("%s") template("${.kv.time}"));
            #};
            
            #rewrite {
            #        set("checkpoint_splunk", value("fields.sc4s_vendor_product"));            
            #        subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
            #        set("${PROGRAM}", value(".PROGRAM"));
            #        subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            #    };
            #rewrite { r_set_splunk_dest_default(sourcetype("nix:syslog"),  source("program:${.PROGRAM}")) };
            rewrite { r_set_splunk_dest_default(sourcetype("nix:syslog")) };
            parser { p_add_context_splunk(key("checkpoint_splunk_os")); };                
        } else {
            rewrite { r_set_splunk_dest_default(sourcetype("cp_log"), source("${.kv.product:-Other}"))};
            parser {p_add_context_splunk(key("checkpoint_splunk")); };
        };

        {{- if (conv.ToBool (getenv "SC4S_LISTEN_CHECKPOINT_SPLUNK_NOISE_CONTROL" "no")) }}
        parser(checkpoint_grouping);
        if {
            filter {
                match("1" value(".cpfinal"))
            };
        {{- end }}

        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };

        {{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CHECKPOINT_SPLUNK_HEC" "no")) }}
            destination(d_hec);
        {{- end}}

        {{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CHECKPOINT_SPLUNK" "no")) }}
            destination(d_archive);
        {{- end}}

        {{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
            {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
        {{- end }}

        {{- if (print (getenv "SC4S_DEST_CHECKPOINT_ALTERNATES")) }}
            {{ getenv "SC4S_DEST_CHECKPOINT_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
        {{- end }}

        {{- if (conv.ToBool (getenv "SC4S_LISTEN_CHECKPOINT_SPLUNK_NOISE_CONTROL" "no")) }}
            };
        {{- end }}
    } else {
        rewrite {
            set("checkpoint_splunk", value("fields.sc4s_vendor_product"));
            subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
            set("${PROGRAM}", value(".PROGRAM"));
            subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
        };
        rewrite { r_set_splunk_dest_default(sourcetype("nix:syslog"),  source("program:${.PROGRAM}")) };
        parser { p_add_context_splunk(key("checkpoint_splunk_os")); };

        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };

    {{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CHECKPOINT_SPLUNK_HEC" "no")) }}
        destination(d_hec);
    {{- end}}

    {{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CHECKPOINT_SPLUNK" "no")) }}
        destination(d_archive);
    {{- end}}

    {{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
    {{- end }}

    {{- if (print (getenv "SC4S_DEST_CHECKPOINT_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_CHECKPOINT_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
    {{- end }}

    };

    flags(flow-control,final);
};
