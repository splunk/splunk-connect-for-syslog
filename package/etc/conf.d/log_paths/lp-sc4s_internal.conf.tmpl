log {
    source(s_internal);

    if (match("Log statistics; " value("MESSAGE"))) {

        rewrite { r_set_splunk_dest_default(sourcetype("sc4s:metrics")) };

        parser {p_add_context_splunk(key("sc4s_metrics")); };
        rewrite {
            subst('.*Log statistics; ', '', value("MESSAGE"), flags("utf8" "global"));
            subst('([^= ]+=\x27[^\(]+\(#anon[^,\)]+(?:,[^,]+,[^\)]+)?\)\=\d+\x27(?:, )?)', '', value("MESSAGE"), flags("utf8" "global"));
            subst('(?<Type>[^= ]+)=\x27(?<SourceName>[^\(]+)\((?<SourceId>\S+(?=\)[=,]))(?:,(?<SourceInstance>[^,]+),(?<State>[^\)]+))?\)\=(?<Number>\d+)\x27,? ?',
'{"time": "$S_UNIXTIME","event": "metric","host": "$HOST","index": "${.splunk.index}","source": "internal","sourcetype": "${.splunk.sourcetype}","fields": {"source_name": "${SourceName}","source_instance": "${SourceInstance}","state": "${State}","type": "${Type}","_value": ${Number},"metric_name": "syslogng.${SourceId}"}}
',
                     value("MESSAGE") flags("utf8" "global")
            );
        };

        {{- if eq (getenv "SC4S_DEST_SPLUNK_SC4S_METRICS_HEC" "no") "yes" }}
        destination(d_hecmetrics);

        {{- if eq (getenv "SC4S_DEBUG_STDOUT" "no") "yes" }}
        destination(d_stdout);
        {{- end}}

        {{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
        {{- end }}

        {{- if (print (getenv "SC4S_DEST_SPLUNK_SC4S_METRICS_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_INTERNAL_EVENTS_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
        {{- end }}
        {{- end }}

    } else {

        rewrite { r_set_splunk_dest_default(sourcetype("sc4s:events"))};
        parser {p_add_context_splunk(key("sc4s_events")); };

        if (not match("Destination timeout has elapsed, closing connection; fd=" value("MESSAGE")) and
        not match("Input is valid utf8, but the log message is not tagged as such," value("MESSAGE")) and
        not match("Syslog connection closed; fd=" value("MESSAGE")) and
        not match("Syslog connection accepted; fd=" value("MESSAGE"))) {

        {{- if (print (getenv "SC4S_DEST_SPLUNK_SC4S_EVENTS_ALT_FILTER")) }}

# HEC destination is *not* included by default for filtered destinations

        if (filter({{ print (getenv "SC4S_DEST_SPLUNK_SC4S_EVENTS_ALT_FILTER") }})) {
        {{- if (print (getenv "SC4S_DEST_SPLUNK_SC4S_EVENTS_FILTERED_ALTERNATES")) }}
            {{ getenv "SC4S_DEST_SPLUNK_SC4S_EVENTS_FILTERED_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n            destination(" }});
        {{- end }}
        }
        else {
        {{- end }}

        {{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_SPLUNK_SC4S_EVENTS_HEC" "no")) }}
        destination(d_hec_internal);
        {{- end}}

        {{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
        {{- end }}

        {{- if (print (getenv "SC4S_DEST_SPLUNK_SC4S_EVENTS_ALTERNATES")) }}
        {{ getenv "SC4S_DEST_SPLUNK_SC4S_EVENTS_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n        destination(" }});
        {{- end }}

        {{- if (print (getenv "SC4S_DEST_SPLUNK_SC4S_EVENTS_ALT_FILTER")) }}
            };
        {{- end }}
        };

        {{- if eq (getenv "SC4S_DEBUG_STDOUT" "no") "yes" }}
        destination(d_stdout);
        {{- end}}
    };
    flags(flow-control,final);
};
