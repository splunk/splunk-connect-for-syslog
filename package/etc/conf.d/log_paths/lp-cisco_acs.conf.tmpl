# Cisco ACS
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CISCO_ACS" "parser" "rfc3164" }}
{{- tmpl.Exec "t/source_network.t" $context }}

# This filter uses a field we set to prevent the original messages before aggregation from being
# sent to Splunk

filter f_cisco_acs_complete{
    match("yes", value("ACS.COMPLETE") type(glob));
};

#This grabs the sequence numbers from the event; message gets group-parsed
#if the total number of events (ACS.seq) is greater than 1

parser acs_get_sequence {
    csv-parser(
        columns(PID, ACS.num, ACS.seq, MESSAGE)
        delimiters(chars(" "))
        flags(greedy)
    );
};

#This parser adds messages from ACS to a context without sending them on to Splunk

parser acs_grouping {
    grouping-by(
        scope(program)
        key("$PID")
        trigger("$(+ ${ACS.seq} 1)" == "${ACS.num}")
        sort-key("${ACS.seq}")
        aggregate(
            value("MESSAGE" "$(implode '' $(context-values ${MESSAGE}))")
            value("ACS.COMPLETE" "yes")
        )
        timeout(30)
    );
};

#The syslog message includes a date with milliseconds and TZ which is not in the header
#So must reparse the date

parser acs_event_time {
    csv-parser(
        columns(ACS.DATE, ACS.TIME, ACS.TZ, MESSAGE)
        delimiters(chars(" "))
        flags(greedy)
    );

    date-parser-nofilter(
            #YYYY- MM-DD hh:mm:ss:xxx +/-zh:zm
            format('%Y-%m-%d %H:%M:%S.%f %z')
            template("${ACS.DATE} ${ACS.TIME} ${ACS.TZ}")
    );
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_CISCO_ACS_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CISCO_ACS_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CISCO_ACS_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CISCO_ACS traffic
            source (s_CISCO_ACS);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for CISCO_ACS traffic
            source (s_DEFAULT);
            filter(f_is_rfc3164);
            filter(f_cisco_acs);
            flags(final);
        };
    };

# Do not run the events through the group parser if there is only one event
    parser(acs_get_sequence);
    if (match("1" value("ACS.num"))) {
        rewrite { set("yes" value("ACS.COMPLETE"));
        };
    } else {
        parser(acs_grouping);
    };

    if {
        filter(f_cisco_acs_complete);
        parser(acs_event_time);
        rewrite {
            set("cisco_acs", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("cisco:acs"))
        };

        parser {p_add_context_splunk(key("cisco_acs")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CISCO_ACS_HEC" "no")) }}
        destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CISCO_ACS" "no")) }}
        destination(d_archive);
{{- end}}

        flags(flow-control,final);
    };

};