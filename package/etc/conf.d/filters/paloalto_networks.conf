

log {
    source(s_default-ports);

    filter {tags("pan:log")
            or message(',\d+,(THREAT|TRAFFIC|SYSTEM|CONFIG|HIPWATCH|CORRELATION|USERID),')
        ;};

    # the palo message does not include a program value in the header unfortunatly
    # the use of colon in the message tricks the RFC3164 parser we will re-write the message
    # so the parser will not incorrectly break it apart.
    # while we are at it we will save the mesage type into the program field so parser can find it
    rewrite {
        subst('^([^ ]+ \w+ \d{2} \d{2}:\d{2}:\d{2} [^ ]+)( \d+,[^,]+,[^,]+,)([^,]+)(.*)', '$1 $3:$2$3$4', value("MESSAGE")  );
    };
    parser {
        #basic parsing
        syslog-parser(time-zone(`default-timezone`));
        #we need to actual even time from the field GeneratedTime use csv parser to get it out
        csv-parser(
            columns('FUTURE_USE', 'ReceiveTime', 'SerialNumber', 'Type', 'Subtype', 'FUTURE_USE2', 'GeneratedTime')
            prefix("pan.")
            delimiters(',')
            );
        #2012/04/10 04:39:55
        #parse the date
        date-parser(
                format("%Y/%m/%d %H:%M:%S")
                template("${pan.ReceiveTime}")
                time-zone("Universal")
        );
    };

    #set the source type based on program field and lookup index from the splunk context csv
    if (program('THREAT')) {
        parser {p_add_context_splunk(sourcetype("pan:threat")); };
    } elif (program('TRAFFIC')) {
        parser {p_add_context_splunk(sourcetype("pan:traffic")); };
    } elif (program('SYSTEM')) {
        parser {p_add_context_splunk(sourcetype("pan:system")); };
    } elif (program('CONFIG')) {
        parser {p_add_context_splunk(sourcetype("pan:config")); };
    } elif (program('HIPWATCH')) {
        parser {p_add_context_splunk(sourcetype("pan:hipwatch")); };
    } elif (program('CORRELATION')) {
        parser {p_add_context_splunk(sourcetype("pan:correlation")); };
    } elif (program('USERID')) {
        parser {p_add_context_splunk(sourcetype("pan:userid")); };
    } else {
        parser {p_add_context_splunk(sourcetype("pan:log")); };
    };

    #rewrite the final message for splunk json
    rewrite {r_set_splunk(sourcetype(${.context.sourcetype}) index(${.context.index}) template("t_msg_only")) }; #--HEC--

    destination(d_hec);  #--HEC--

    flags(final);
};
