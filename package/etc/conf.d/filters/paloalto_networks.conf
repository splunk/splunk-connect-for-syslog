

log {
    source(s_default-ports);

    filter { message(',\d+,(THREAT|TRAFFIC|SYSTEM|CONFIG|HIPWATCH|CORRELATION|USERID),')
        ;};

    parser {
        syslog-parser(time-zone(`default-timezone`));
    };

    rewrite  {
           subst('(^.*)(\d+,[^,]+,\d+,)([A-Z]+)(.*)' '$1PA_$3: $2$3$4' value("MSG"));
    };
    #rewrite {
    #    set("MESSAGE", "${LEGACY_MSGHDR}${MESSAGE}");
    #};

    if (program('THREAT')) {
        parser {p_add_context_splunk(sourcetype("pan:threat")); };
    } elif (program('TRAFFIC')) {
        parser {p_add_context_splunk(sourcetype("pan:traffic")); };
    } elif (program('SYSTEM')) {
        parser {p_add_context_splunk(sourcetype("pan:system")); };
    } elif (program('CONFIG')) {
        parser {p_add_context_splunk(sourcetype("pan:config")); };
    } elif (program('HIPWATCH')) {
        parser {p_add_context_splunk(sourcetype("pan:hipwatch")); };
    } elif (program('CORRELATION')) {
        parser {p_add_context_splunk(sourcetype("pan:correlation")); };
    } elif (program('USERID')) {
        parser {p_add_context_splunk(sourcetype("pan:userid")); };
    } else {
        parser {p_add_context_splunk(sourcetype("pan:unknown")); };
    };

    rewrite { r_set_splunk(sourcetype(${.context.sourcetype}) index(${.context.index}) template("t_msg_only")) }; #--HEC--
    rewrite { r_set_splunk(sourcetype(${.context.sourcetype}) index(${.context.index}) template("t_JSON"))}; #--HEC--

    destination(d_hec);  #--HEC--

    flags(final);
};
