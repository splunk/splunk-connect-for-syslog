
template t_sepm {
        template("${ISODATE},${MESSAGE}");
        };
template t_sepm_admin {
        template("${ISODATE}, Info ,${MESSAGE}");
        };

template t_sepm_system {
    template("${ISODATE}, Info ,${MESSAGE}");
    };
template t_sepm_proactive {
    template("${ISODATE},Deleted,${MESSAGE}");
    };
template t_sepm_risk {
    template("${ISODATE},${MESSAGE}");
    };
log {
    source(s_default-ports);

    filter {tags("sepm:log")
            or message(' SymantecServer')
        ;};



    parser {
        #basic parsing
        syslog-parser(time-zone(`default-timezone`));
        #we need to actual even time from the field GeneratedTime use csv parser to get it out
        #csv-parser(
        #    columns('FUTURE_USE', 'ReceiveTime', 'SerialNumber', 'Type', 'Subtype', 'FUTURE_USE2', 'GeneratedTime')
        #    prefix(".pan.")
        #    delimiters(',')
        #    );
        #2012/04/10 04:39:55
        #parse the date
        #date-parser(
        #        format("%Y/%m/%d %H:%M:%S")
        #        template("${.pan.GeneratedTime}")
        #        time-zone("Universal")
        #);
    };


    #set the source type based on program field and lookup index from the splunk context csv
    #rewrite {subst('^[^\:]+\: ?(.*)', '$1', value("MESSAGE"));};

    if (message(' Scan ID:')) {
        parser {p_add_context_splunk(key("symantec:ep:scan:file")); };
        #rewrite for scan
        rewrite {subst('^[^\:]+\: ?(.*)', '$1', value("MESSAGE")  );};
        rewrite {r_set_splunk_basic(template("t_sepm")); };
    } elif (message('^(?=.*?\bSite\b:)(?=.*?\bServer\b:)(?=.*?\bDomain\b:)((?!Admin: |IP: ).)*$')) {
            parser {p_add_context_splunk(key("symantec:ep:agent:file")); };
            rewrite {
                subst('^[^\:]+\: ?(.*)', '$1', value("MESSAGE")  );
            };
            rewrite {r_set_splunk_basic(template("t_sepm")); }; #--HEC--
    } elif (message('^(?=.*?\bSite\b:)(?=.*?\bServer\b:)(?=.*?\bDomain\b:)(?=.*?\bAdmin\b:)(?=.*?\bpolicy\b)((?!Computer name: |Category: ).)*$')) {
        parser {p_add_context_splunk(key("symantec:ep:policy:file")); };
        rewrite {r_set_splunk_basic(template("t_sepm")); };

    }elif (message('^(?=.*?\bSite\b:)(?=.*?\bServer\b:)(?=.*?\bDomain\b:)(?=.*?\bAdmin\b:)((?!Computer name: |Category: |policy ).)*$')) {
          #remove header
#        rewrite {subst('^[^\:]+\: ?(.*)', '$1', value("MESSAGE"));};
#          #check if its scm_admin message
#          #define admin parser
#
#          parser  {
#                      csv-parser(
#                      columns('column1', 'column2', 'column3','column4','column5','column6')
#                      delimiters(chars(",") )
#                      flags(drop-invalid)
#                      );
#                    };


          parser {p_add_context_splunk(key("symantec:ep:admin:file")); };

          rewrite {r_set_splunk_basic(template("t_sepm_admin")); };


    } elif (message('^(?=.*?\bSite\b:)(?=.*?\bServer\b:)((?!Admin: |Domain: ).)*$') ) {
        parser {p_add_context_splunk(key("symantec:ep:scm_system:file")); };
        #rewrite the final message for splunk json
        #sourcetype and index are set in the filter defaults won't be used
#        rewrite { subst('^[^\:]+\: ?(.*)', '$1', value("MESSAGE")  ); };
        rewrite {r_set_splunk_basic(template("t_sepm_system")); };
    } elif (message('^(?=.*?\bCategory\b:)((?!Admin: |Computer Name: ).)*$')) {
        parser {p_add_context_splunk(key("symantec:ep:agt_system:file")); };
        #rewrite the final message for splunk json
        #sourcetype and index are set in the filter defaults won't be usedâ€‹
#        rewrite { subst('^[^\:]+\: ?(.*)', '$1', value("MESSAGE")  ); };
        rewrite {r_set_splunk_basic(template("t_sepm_system")) };
    } elif (message('^(?=.*?\bBegin\b:)(?=.*?\bEnd\b:)(?=.*?\bRule\b:)(?=.*?\bDomain\b:)(?=.*?\bAction Type\b:)(?=.*?\bFile size\b)(?=.*?\bDevice ID\b:)((?!Admin: |Computer Name: | Category: ).)*$')) {
        #still need to match File size (bytes):
        parser {p_add_context_splunk(key("symantec:ep:behavior:file")); };
#        rewrite { subst('^[^\:]+\: ?(.*)', '$1', value("MESSAGE")  ); };
        rewrite {r_set_splunk_basic(template("t_sepm_system")); };

     #here check if its scm_policy
    } elif (message(',Domain: .*,Action: Allowed')) {
        parser {p_add_context_splunk(key("symantec:ep:traffic:file")); };
         rewrite {subst('^[^\:]+\: ?(.*)', '$1', value("MESSAGE"));};
         rewrite {r_set_splunk_basic(template("t_sepm")); };
    } elif (message('^(?=.*?\bIP Address\b:)(?=.*?\bComputer name\b:)(?=.*?\bIntensive Protection Level\b:)(?=.*?\bCertificate issuer\b:)(?=.*?\bCertificate signer\b:)(?=.*?\bCertificate thumbprint\b)(?=.*?\bSigning timestamp\b:)((?!Admin: |Category: |Potential risk found).)*$')) {
        parser {p_add_context_splunk(key("symantec:ep:risk:file")); };
    ##Still can't 100% differentiate between proactive and risk
#        rewrite {
#            subst('^[^\:]+\: ?(.*)', '$1', value("MESSAGE")  );
#        };
        rewrite {r_set_splunk_basic(template("t_sepm_risk")) }; #--HEC--
    } elif (message('^(?=.*?\bComputer name\b:)(?=.*?\bIntensive Protection Level\b:)(?=.*?\bCertificate issuer\b:)(?=.*?\bCertificate signer\b:)(?=.*?\bCertificate thumbprint\b)(?=.*?\bSigning timestamp\b:)((?!Admin: |Category:).)*$')) {
            parser {p_add_context_splunk(key("symantec:ep:proactive:file")); };
#            rewrite {
#                subst('^[^\:]+\: ?(.*)', '$1', value("MESSAGE")  );
#            };
            rewrite {r_set_splunk_basic(template("t_sepm_proactive")); }; #--HEC--

    } else {
        parser {p_add_context_splunk(key("symantec:ep:unknown:file")); };
        rewrite {
            subst('^[^\:]+\: ?(.*)', '$1', value("MESSAGE")  );
        };
        rewrite {r_set_splunk_basic(template("t_sepm")); }; #--HEC--
     };

    #rewrite the final message for splunk json
    #sourcetype and index are set in the filter defaults won't be used
   #rewrite {
   #     subst('^[^\:]+\: ?(.*)', '$1', value("MESSAGE")  );
   # };
   #rewrite {r_set_splunk_basic(template("t_JSON")) }; #--HEC--
   #rewrite  {  set($ISODATE, value("fields.isodate"));};
    #parser {p_add_context_splunk(key("symantec:ep:traffic:file")); };

    destination(d_hec);  #--HEC--

    flags(final);
};
