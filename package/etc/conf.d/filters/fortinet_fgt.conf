
log {
    source(s_default-ports);

    filter {tags("fgt_log")
            or message('devid=\"?F[G|W|6K].+type=\"?(traffic|utm|event)')
        ;};

    # the message does not include a program value in the header unfortunatly
    # the use of colon in the message tricks the RFC3164 parser we will re-write the message
    # so the parser will not incorrectly break it apart.
    # while we are at it we will save the message type into the program field so parser can find it
    rewrite {
        subst('([A-Za-z]+ \d\d \d\d:\d\d:\d\d [^ ]+)(.*devid=\"?F[G|W|6K].+type=\"?)(traffic|utm|event)(.*)', '$1 $3:$2$3$4', value("MESSAGE")  );
    };
    parser {
        #basic parsing
        syslog-parser(time-zone(`default-timezone`));
    };

    #set the source type based on program field and lookup index from the splunk context csv
    if (program('traffic')) {
        parser {p_add_context_splunk(key("fgt_traffic")); };
    } elif (program('utm')) {
        parser {p_add_context_splunk(key("fgt_utm")); };
    } elif (program('event')) {
        parser {p_add_context_splunk(key("fgt_event")); };
    } else {
        parser {p_add_context_splunk(key("fgt_log")); };
    };

    #rewrite the final message for splunk json
    #sourcetype and index are set in the filter defaults won't be used
    rewrite {r_set_splunk_basic(template("t_msg_only")) }; #--HEC--
#    rewrite { r_set_splunk(template("t_JSON"))}; #--HEC--
    destination(d_hec);  #--HEC--

    flags(final);
};
