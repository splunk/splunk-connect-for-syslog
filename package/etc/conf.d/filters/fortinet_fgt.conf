log {
    source(s_default-ports);

    filter {tags("fgt_log")
        or message('devid=\"?F[G|W|6K].+type=\"?(traffic|utm|event)');
    };

    parser {
        kv-parser(prefix(".kv."));
        date-parser(format("%Y-%m-%d:%H:%M:%S") template("${.kv.date}:${.kv.time}"));
    };

    rewrite { set("${.kv.devname}", value("HOST")); };
    rewrite { subst('<\d+>(.*)' "$1" value("MSG")); };

    #set the source type based on program field and lookup index from the splunk context csv
    if (match("traffic" value(".kv.type"))) {
       parser {p_add_context_splunk(key("fgt_traffic")); };
    } elif (match("utm" value(".kv.type"))) {
       parser {p_add_context_splunk(key("fgt_utm")); };
    } elif (match("event" value(".kv.type"))) {
       parser {p_add_context_splunk(key("fgt_event")); };
    } else {
       parser {p_add_context_splunk(key("fgt_log")); };
    };

    rewrite {
        #drop the header
        subst('date=[^ ]+ time=[^ ]+ devname=.+ (devid.*)', '$1', value("MESSAGE"));
        #Strip empty fields because SEDCMD can't when we use event endpoint
        subst('([^\= ]+=(?: |\"\"|-|\"-") ?)', '', value("MESSAGE"));
    };

    #rewrite the final message for splunk json
    #sourcetype and index are set in the filter defaults won't be used
    rewrite {r_set_splunk_basic(template("t_msg_only")) }; #--HEC--
    destination(d_hec);  #--HEC--

    flags(final);
};
