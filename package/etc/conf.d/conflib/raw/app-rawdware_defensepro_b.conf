block parser radware_defensepro_b-parser() {    
 channel {
        #
        filter { 
            message('^(\<\d+>)(\[Device: ([^ ]+) [^\]]+] M_\d+: .*)', flags(store-matches));
        };   
        parser {
            syslog-parser(

                flags(no-hostname, assume-utf8, store-raw-message)
                template("$1 $2")
                );

        };
        
        rewrite {
            set("$3", value('HOST'));
            set("radware_defensepro", value("fields.sc4s_syslog_format"));
            set("radware_defensepro", value("fields.sc4s_vendor_product"));    
            set("t_hdr_msg", value(".splunk.sc4s_template"));
            set("netops", value(".splunk.index"));
            set("SC4S", value(".splunk.source"));
            set("radware:defensepro", value(".splunk.sourcetype"));                  
            #set-tag("noparse");            
        };   

        rewrite { 
            set("yes", 
                value(".dest.global.hec") 
                condition(
                    '$(if ("`SC4S_DEST_SPLUNK_HEC_GLOBAL`" ne "") "`SC4S_DEST_SPLUNK_HEC_GLOBAL`" "yes")' ne "no"
                )
            );            
            set("yes", 
                value(".dest.global.archive") 
                condition(
                    '$(if ("`SC4S_ARCHIVE_GLOBAL`" ne "") "`SC4S_ARCHIVE_GLOBAL`" "no")' ne "no"
                ) 
            );
            set("yes", 
                value(".dest.global.alts") 
                condition(
                    '$(if ("`SC4S_DEST_GLOBAL_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_RADWARE_DEFENSEPRO_ALTERNATES`", 
                value(".dest.select.alts") 
                condition(
                    '$(if ("`SC4S_DEST_RADWARE_DEFENSEPRO_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_RADWARE_DEFENSEPRO_FILTERED_ALTERNATES`", 
                value(".dest.select.filteredalts") 
                condition(
                    '$(if ("`SC4S_DEST_RADWARE_DEFENSEPRO_FILTERED_ALTERNATES`" ne "") "yes" "no")' ne "no"               
                ) 
            );      
        };
                    

        parser {p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template})" value("MSG")); };

   };
};
application radware_defensepro_b[raw-syslog] {
	filter { 
        message('^\<\d+>\[Device: [^ ]+ [^\]]+] M_\d+: ')
        ;
    };	
    parser { radware_defensepro_b-parser(); };   
};



