block parser zscaler_nss_alerts-parser() {    
 channel {
        #
        filter { 
            message('^(\<\d+> ?\w\w\w [ \d]?\d \d\d:\d\d:\d\d) \[([^\]]+)] (ZscalerNSS: .*)', flags(store-matches));
        };   
        parser {
            syslog-parser(

                flags(assume-utf8, guess-timezone, store-raw-message)
                template("$1 $2 $3 $4")
            );

        };
        
        rewrite {
            set("zscaler_nss", value("fields.sc4s_syslog_format"));
            set("zscaler_alerts", value("fields.sc4s_vendor_product"));    
            set("t_hdr_msg", value(".splunk.sc4s_template"));
            set("netops", value(".splunk.index"));
            set("SC4S", value(".splunk.source"));
            set("zscalernss-alerts", value(".splunk.sourcetype"));                  
            #set-tag("noparse");
        };                       

        rewrite { 
            set("yes", 
                value(".dest.global.hec") 
                condition(
                    '$(if ("`SC4S_DEST_SPLUNK_HEC_GLOBAL`" ne "") "`SC4S_DEST_SPLUNK_HEC_GLOBAL`" "yes")' ne "no"
                )
            );            
            set("yes", 
                value(".dest.global.archive") 
                condition(
                    '$(if ("`SC4S_ARCHIVE_GLOBAL`" ne "") "`SC4S_ARCHIVE_GLOBAL`" "no")' ne "no"
                ) 
            );
            set("yes", 
                value(".dest.global.alts") 
                condition(
                    '$(if ("`SC4S_DEST_GLOBAL_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_ZSCALER_NSS_ALTERNATES`", 
                value(".dest.select.alts") 
                condition(
                    '$(if ("`SC4S_DEST_ZSCALER_NSS_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_ZSCALER_NSS_FILTERED_ALTERNATES`", 
                value(".dest.select.filteredalts") 
                condition(
                    '$(if ("`SC4S_DEST_ZSCALER_NSS_FILTERED_ALTERNATES`" ne "") "yes" "no")' ne "no"               
                ) 
            );      
        };

        parser {p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template})" value("MSG")); };

   };
};
application zscaler_nss_alerts[raw-syslog] {
	filter { 
        message('^(\<\d+> ?\w\w\w [ \d]?\d \d\d:\d\d:\d\d) \[([^\]]+)] ZscalerNSS:')
        ;
    };	
    parser { zscaler_nss_alerts-parser(); };   
};



