block parser zscaler_nss_proxy-parser() {    
 channel {
        #
        filter { 
            message('^(?:\<\d+>)? ?(\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d)\s+(.*)', flags(store-matches));
        };   
        parser { 
            date-parser-nofilter(
                format('%Y-%m-%d %T%z')
                template("${1}Z")
            );
        };
        
        rewrite {
            set("$2", value("MESSAGE"));
            set("zscaler_nss", value("fields.sc4s_syslog_format"));
            set("zscaler_web", value("fields.sc4s_vendor_product"));    
            set("netproxy", value(".splunk.index"));
            set("SC4S", value(".splunk.source"));
            set("zscalernss-web", value(".splunk.sourcetype"));                  
            #set-tag("noparse");
        };                       

        parser {
            #basic parsing
            kv-parser(prefix(".kv.") pair-separator("\t") template("${MSG}"));
        };
        
        if (match("dns" value(".kv.product"))) {
            rewrite {        
                set("netdns", value(".splunk.index"));                  
                set("zscalernss-dns", value(".splunk.sourcetype"));                  
                set("zscaler_dns", value("fields.sc4s_vendor_product"));    
            };
        } elif (match("fw" value(".kv.product"))) {
            rewrite {        
                set("netfw", value(".splunk.index"));                  
                set("zscalernss-fw", value(".splunk.sourcetype"));                  
                set("zscaler_fw", value("fields.sc4s_vendor_product"));    
            };
        } elif (match("NSS" value(".kv.product"))) {
            rewrite {        
                set("zscalernss-web", value(".splunk.sourcetype"));                  
                set("zscaler_web", value("fields.sc4s_vendor_product"));    
            };
        } elif (match("audit" value(".kv.product"))) {
            rewrite {        
                set("netops", value(".splunk.index"));                  
                set("zscalernss-zia-audit", value(".splunk.sourcetype"));                  
                set("zscaler_zia_audit", value("fields.sc4s_vendor_product"));    
            };
        } elif (match("sandbox" value(".kv.product"))) {
            rewrite {        
                set("main", value(".splunk.index"));                  
                set("zscalernss-zia-sandbox", value(".splunk.sourcetype"));                  
                set("zscaler_zia_sandbox", value("fields.sc4s_vendor_product"));    
            };
        } else {
            rewrite {        
                set("zscalernss-unknown", value(".splunk.sourcetype"));                  
                set("zscaler_nss", value("fields.sc4s_vendor_product"));    
            };
        };
        rewrite { 
            set("yes", 
                value(".dest.global.hec") 
                condition(
                    '$(if ("`SC4S_DEST_SPLUNK_HEC_GLOBAL`" ne "") "`SC4S_DEST_SPLUNK_HEC_GLOBAL`" "yes")' ne "no"
                )
            );            
            set("yes", 
                value(".dest.global.archive") 
                condition(
                    '$(if ("`SC4S_ARCHIVE_GLOBAL`" ne "") "`SC4S_ARCHIVE_GLOBAL`" "no")' ne "no"
                ) 
            );
            set("yes", 
                value(".dest.global.alts") 
                condition(
                    '$(if ("`SC4S_DEST_GLOBAL_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_ZSCALER_NSS_ALTERNATES`", 
                value(".dest.select.alts") 
                condition(
                    '$(if ("`SC4S_DEST_ZSCALER_NSS_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_ZSCALER_NSS_FILTERED_ALTERNATES`", 
                value(".dest.select.filteredalts") 
                condition(
                    '$(if ("`SC4S_DEST_ZSCALER_NSS_FILTERED_ALTERNATES`" ne "") "yes" "no")' ne "no"               
                ) 
            );      
        };

        parser {p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
        parser (compliance_meta_by_source);
   };
};
application zscaler_nss_proxy[raw-syslog] {
	filter { 
        message('^(?:\<\d+>)? ?\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d\s+')

        ;
    };	
    parser { zscaler_nss_proxy-parser(); };   
};



