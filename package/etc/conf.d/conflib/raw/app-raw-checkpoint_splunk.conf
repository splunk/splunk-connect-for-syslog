rewrite set_raw_raw_cp_splunk{
    set-tag("wireformat:raw_cp_splunk");
};
filter f_is_raw_raw_cp_splunk{
    tags("wireformat:raw_raw_cp_splunk");
};

block parser app-raw-checkpoint_splunk() {
    channel {

        rewrite{
            r_set_splunk_dest_default(
                index('netfw')
                sourcetype('cp_log')
                vendor("checkpoint")
                product("splunk")
            );
        };
        parser {
            kv-parser(prefix(".values.") pair-separator("|") template(t_hdr_msg));

        };
        if {

            parser {
                date-parser-nofilter(format("%s") template("${.values.time}"));
            };

            rewrite {
                set("${.values.hostname}", value("HOST"));
                set("${.values.hostname}", value("fields.cp_lm"));
            };

            if (
                "`SC4S_LISTEN_CHECKPOINT_SPLUNK_OLD_HOST_RULES`" eq "yes")
            {
                if {
                    #Get the FW host from the originsicname
                    parser {
                        regexp-parser(
                            patterns('^[Cc][Nn]\\?=(?<HOST>[^,]+)')
                            template("${.values.originsicname}")
                        );
                    };
                } elif {
                    #Get the FW host from the origin_sic_name
                    parser {
                        regexp-parser(
                            patterns('^[Cc][Nn]\\?=(?<HOST>[^,]+)')
                            template("${.values.origin_sic_name}")
                        );
                    };
                } elif {
                    # If hostname field is not empty, host should be evaluated from there
                    parser {
                        regexp-parser(
                            patterns('(?<HOST>\S+)')
                            template("${.values.hostname}")
                        );
                    };
                };
            } else {
                if {
                    # If hostname field is not empty, host should be evaluated from there
                    parser {
                        regexp-parser(
                            patterns('(?<HOST>\S+)')
                            template("${.values.hostname}")
                        );
                    };
                } elif {
                    #Get the FW host from the originsicname
                    parser {
                        regexp-parser(
                            patterns('^[Cc][Nn]\\?=(?<HOST>[^,]+)')
                            template("${.values.originsicname}")
                        );
                    };
                } elif {
                    #Get the FW host from the origin_sic_name
                    parser {
                        regexp-parser(
                            patterns('^[Cc][Nn]\\?=(?<HOST>[^,]+)')
                            template("${.values.origin_sic_name}")
                        );
                    };
                };
            };
            # If this device is a v host we need to get the firewall name
            if {
                parser {
                    regexp-parser(
                        patterns('-v_(?<HOST>.*)')
                        template("$HOST")
                    );
                };
            };

            if {
                filter {
                    "${.values.product}" eq "Syslog"
                };
                parser {
                    syslog-parser(
                        flags(assume-utf8, no-hostname)
                        template("${.values.default_device_message}")
                        );
                };
                parser {
                    date-parser-nofilter(format("%s") template("${.values.time}"));
                };
                rewrite {

                    r_set_splunk_dest_update_v2(
                        index('netops')
                        source('program:${PROGRAM}')
                        sourcetype('nix:syslog')
                        template('t_hdr_msg')
                    );
                };
            } elif {
                filter {
                    match('Firewall' value('.values.product'))
                    or match('Application\h+Control' value('.values.product'))
                    or match('RAD' value('.values.product'))
                    or match('HTTPS\h+Inspection' value('.values.product'))
                    or match('Compliance\h+Blade' value('.values.product'))
                    or match('^Compliance' value('.values.product'))
                    or match('VPN-1\h+&\h+Fire[wW]all-1' value('.values.product'))
                    or match('Network\h+Security' value('.values.product'))
                    or match('FG\h+VPN-1\h+&\h+FireWall-1' value('.values.product'))
                    or match('QoS' value('.values.product'))
                    and not match('VPN' value('.values.fw_subproduct'))
                };
                rewrite {
                    r_set_splunk_dest_update_v2(
                        class('firewall')
                        index('netfw')
                        source('checkpoint:firewall')
                    );
                };
            } elif  {
                filter {
                    match('U[rR][lL]\h+Filtering' value('.values.product'))
                };
                rewrite {
                    r_set_splunk_dest_update_v2(
                        class('web')
                        index('netproxy')
                        source('checkpoint:web')
                    );
                };
            } elif  {
                filter {
                    match('Scheduled\h+system\h+update' value('.values.product'))
                    or match('WEB_API' value('.values.product'))
                    or match('SmartDefense' value('.values.product'))
                    or match('Smart\h+Defense' value('.values.product'))
                    or match('W[eE][bB]-UI' value('.values.product'))
                    or match('SmartDashboard' value('.values.product'))
                    or match('System\h+Monitor' value('.values.product'))
                    or match('Log\h+Update' value('.values.product'))
                    or match('license-mgmt' value('.values.product'))
                    or match('smart_event' value('.values.product'))
                    or match('SmartConsole' value('.values.product'))
                    or match('SmartEvent\h+Client' value('.values.product'))
                    or match('SmartUpdate' value('.values.product'))
                    or match('SmartView' value('.values.product'))
                    or match('Security\h+Gateway\/Management' value('.values.product'))
                    or match('Smart\h+Defense' value('.values.product'))
                    or match('WEB_API_INTERNAL' value('.values.product'))
                    or match('Eventia\h+Analyzer\h+Client' value('.values.product'))
                    or match('SmartProvisioning\h+Connector' value('.values.product'))
                    or match('SmartLSM\h+Endpoint\h+Security\h+Console' value('.values.product'))
                    or match('SmartLSM' value('.values.product'))
                    or match('ROBO\h+GUI' value('.values.product'))
                    or match('Management\h+Blade' value('.values.product'))
                    or match('Connectra' value('.values.product'))
                    or match('Check\h+Point\h+Security\h+Management\h+Server' value('.values.product'))
                    or match('CLI' value('.values.product'))
                    or match('Check\h+Point\h+GO\h+Password\h+Reset' value('.values.product'))
                    or match('Database\h+Tool' value('.values.product'))
                    or match('cpmidu_update_tool' value('.values.product'))
                    or match('query-database' value('.values.product'))
                };
                rewrite {
                    r_set_splunk_dest_update_v2(
                        class('audit')
                        index('netops')
                        source('checkpoint:audit')
                    );
                };
            } elif  {
                filter {
                    match('Endpoint\h+Management' value('.values.product'))
                    or match('Core' value('.values.product'))
                    or match('Endpoint\h+Compliance' value('.values.product'))
                    or match('MEPP' value('.values.product'))
                    or match('Media\h+Encryption\h+&\h+Port\h+Protection' value('.values.product'))
                    or match('Endpoint\h+Security\h+Console' value('.values.product'))
                    or match('endpoint' value('.values.product'))
                };
                rewrite {
                    r_set_splunk_dest_update_v2(
                        class('endpoint')
                        index('netops')
                        source('checkpoint:endpoint')
                    );
                };
            } elif  {
                filter {
                    match('^VPN$' value('.values.product'))
                    or match('^Mobile$' value('.values.product'))
                    or match('Mobile\h+App' value('.values.product'))
                    or match('^VPN' value('.values.fw_subproduct'))
                    or match('^VPN-1' value('.values.fw_subproduct'))
                    or match('Identity\h+Awareness' value('.values.product'))
                };
                rewrite {
                    r_set_splunk_dest_update_v2(
                        class('sessions')
                        index('netops')
                        source('checkpoint:sessions')
                    );
                };
            } elif  {
                filter {
                    match('IOS\h+Profile' value('.values.product'))
                    or match('iOS\h+Profiles' value('.values.product'))
                    or match('Device' value('.values.product'))
                    or match('WIFI\h+Network' value('.values.product'))
                    or match('Mobile\h+Access' value('.values.product'))
                };
                rewrite {
                    r_set_splunk_dest_update_v2(
                        class('network')
                        index('netops')
                        source('checkpoint:network')
                    );
                };
            } elif  {
                filter {
                    match('Threat\h+Emulation' value('.values.product'))
                    or match('Anti-Virus' value('.values.product'))
                    or match('New\h+Anti\h+Virus' value('.values.product'))
                    or match('Anti-Bot' value('.values.product'))
                    or match('Threat\h+Extraction' value('.values.product'))
                    or match('Anti-Ransomware' value('.values.product'))
                    or match('Anti-Exploit' value('.values.product'))
                    or match('Forensics' value('.values.product'))
                    or match('OS\h+Exploit' value('.values.product'))
                    or match('OS\h+Exploits' value('.values.product'))
                    or (match('Application' value('.values.product')) and not match('Application Control' value('.values.product')))
                    or match('Text\h+Message' value('.values.product'))
                    or match('Network\h+Access' value('.values.product'))
                    or match('Zero\h+Phishing' value('.values.product'))
                    or match('Anti-Malware' value('.values.product'))
                    or match('Anti\h+Malware' value('.values.product'))
                    or match('Anti\h+Malware\h+New\h+Anti\h+Virus' value('.values.product'))
                    or match('New\h+Anti\h+Virus\h+Anti\h+Malware' value('.values.product'))
                };
                rewrite {
                    r_set_splunk_dest_update_v2(
                        class('ids_malware')
                        index('netids')
                        source('checkpoint:ids_malware')
                    );
                };
            } elif  {
                filter {
                    match('IPS' value('.values.product'))
                    or match('W[iI][fF][iI]' value('.values.product'))
                    or match('Cellular' value('.values.product'))
                };
                rewrite {
                    r_set_splunk_dest_update_v2(
                        class('ids')
                        index('netids')
                        source('checkpoint:ids')
                    );
                };
            } elif  {
                filter {
                    match('MTA' value('.values.product'))
                    or match('Anti-Spam' value('.values.product'))
                    or match('Anti\h+Spam' value('.values.product'))
                    or match('Anti-Phishing' value('.values.product'))
                    or match('Anti\h+Phishing' value('.values.product'))
                    or match('Anti-Spam\h+and\h+Email\h+Security' value('.values.product'))
                    or match('Anti\h+Spam\h+and\h+Email\h+Security' value('.values.product'))
                };
                rewrite {
                    r_set_splunk_dest_update_v2(
                        class('email')
                        index('email')
                        source('checkpoint:email')
                    );
                };
            } elif  {
                filter {
                    match('DLP' value('.values.product'))
                };
                rewrite {
                    r_set_splunk_dest_update_v2(
                        class('dlp')
                        index('netfw')
                        source('checkpoint:firewall')
                    );
                };
            } elif {
                filter {
                    match('Syslog' value('.values.product'))
                };
                rewrite {
                    r_set_splunk_dest_update_v2(
                        class('os')
                        index('netops')
                    );
                };
            } else {
                rewrite {
                    r_set_splunk_dest_update_v2(
                        index('netops')
                        source('checkpoint:cp_default')
                    );
                };
            };
        };
        rewrite(set_raw);
        rewrite(set_raw_raw_cp_splunk);
        rewrite(r_set_source_identified);
    };

};
application app-raw-checkpoint_splunk[sc4s-raw-syslog] {
	filter {
        message('^time=\d{10}\|hostname=');
    };	

    parser { app-raw-checkpoint_splunk(); };
};

