block parser f5_bigip_irule_splunk-parser() {    
 channel {
        parser {
            syslog-parser(
                flags(no-hostname, assume-utf8, guess-timezone, store-raw-message)
            );
        };
        rewrite {
            #This is not valid syslog there should only be a MESSAGE field as a result
            set("${LEGACY_MSGHDR}${MESSAGE}" value("MESSAGE"));
            unset(value("LEGACY_MSGHDR"));
            unset(value("PID"));                
            unset(value("PROGRAM"));              
        };
        filter { 
            message('^(?:,|([^,]{2,255}),)?,?f5_irule=(Splunk-[^,]+)', flags(store-matches))
            ;
        };        
        rewrite {
            set("$1", value("HOST") condition( "$1" ne "" ));    
            set("f5_bigip_irule", value("fields.sc4s_syslog_format"));
            set("f5_bigip_irule", value("fields.sc4s_vendor_product"));    
            set("netops", value(".splunk.index"));
            set("f5:hsl", value(".splunk.source"));
            #set-tag("log_path_known");
            #set-tag("noparse");
            #set-tag("f5_bigip");      
            #set-tag("f5_bigip_irule");
            #set-tag("f5_bigip_irule_splunk");   

            set("f5:bigip:irule", value(".splunk.sourcetype"));            
            set("f5:bigip:gtm:dns:request:irule", value(".splunk.sourcetype") condition("$2" eq "Splunk-iRule-DNS_REQUEST"));                
            set("f5:bigip:gtm:dns:response:irule", value(".splunk.sourcetype") condition("$2" eq "Splunk-iRule-DNS_RESPONSE"));                
            set("f5:bigip:ltm:http:irule", value(".splunk.sourcetype") condition("$2" eq "Splunk-iRule-HTTP"));                
            set("f5:bigip:ltm:failed:irule", value(".splunk.sourcetype") condition("$2" eq "Splunk-iRule-LB_FAILED"));                
        };          

        rewrite { 
            set("yes", 
                value(".dest.global.hec") 
                condition(
                    '$(if ("`SC4S_DEST_SPLUNK_HEC_GLOBAL`" ne "") "`SC4S_DEST_SPLUNK_HEC_GLOBAL`" "yes")' ne "no"
                )
            );            
            set("yes", 
                value(".dest.global.archive") 
                condition(
                    '$(if ("`SC4S_ARCHIVE_GLOBAL`" ne "") "`SC4S_ARCHIVE_GLOBAL`" "no")' ne "no"
                ) 
            );
            set("yes", 
                value(".dest.global.alts") 
                condition(
                    '$(if ("`SC4S_DEST_GLOBAL_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_F5_BIGIP_ALTERNATES`", 
                value(".dest.select.alts") 
                condition(
                    '$(if ("`SC4S_DEST_F5_BIGIP_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_F5_BIGIP_FILTERED_ALTERNATES`", 
                value(".dest.select.filteredalts") 
                condition(
                    '$(if ("`SC4S_DEST_F5_BIGIP_FILTERED_ALTERNATES`" ne "") "yes" "no")' ne "no"               
                ) 
            );      
        };

        parser {p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
        parser (compliance_meta_by_source);
  
   };
};
application f5_bigip_irule_splunk[raw-syslog] {
	filter { 
        message('^(?:\<\d+\>)? ?(\w\w\w  ?\d{1,2} \d\d:\d\d:\d\d|\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d[^ ]*) (?:,|([^,]{2,255},))?,?f5_irule=(Splunk-[^,]+)')
        ;
    };	
    parser { f5_bigip_irule_splunk-parser(); };   
};


