block parser checkpoint_splunk-parser() {    
    channel {

        rewrite{
            r_set_splunk_dest_default(
                index('netfw')
                sourcetype('cp_log')
                vendor_product("checkpoint_splunk")
            );              
        };     
        parser {
            kv-parser(prefix(".cp.") pair-separator("|") template(t_hdr_msg));
            
        };
        if (
            "`SC4S_LISTEN_CHECKPOINT_SPLUNK_NOISE_INCOMPLETE_EVENTS`" eq "yes"
            and "${.cp.loguid}" ne ""
            and "${cp.bytes}" eq ""
            and ( "${.cp.product}" eq "Application Control" or "${.cp.product}" eq "Firewall" or "${.cp.product}" eq "URL Filtering")
            and ( "${.cp.rule_action}" eq "Accept" or "${.cp.rule_action}" eq "Inline")
            ){
            rewrite { 
                r_set_splunk_dest_update(
                    vendor_product('null_queue')
                );
            };                        
        } elif {
            if {
                filter { 
                    "`SC4S_LISTEN_CHECKPOINT_SPLUNK_NOISE_CONTROL`" eq "yes"
                    and "${.cp.loguid}" ne ""                    
                    };
                parser {
                    grouping-by(
                        key("${.cp.loguid}")
                        #This looks silly but we have no way of knowing if an event is complete so 
                        #We must make an impossible condition and rely on time out
                        trigger("1" == "2")
                        aggregate(
                            value(".gb.complete" "1")
                            inherit-mode(last-message)
                        )
                        timeout(`SC4S_LISTEN_CHECKPOINT_SPLUNK_NOISE_CONTROL_SECONDS`)
                    );
                };
            } else {
                rewrite {            
                    set("1", value(".gb.complete"));
                };
            };

            parser {
                date-parser-nofilter(format("%s") template("${.cp.time}"));
            };
        
            rewrite {            
                set("${.cp.hostname}", value("HOST"));
                set("${.cp.hostname}", value("fields.cp_lm"));
                set("checkpoint_splunk", value("fields.sc4s_syslog_format"));            
            };                       
                

            if {
                # If hostname field is not empty, host should be evaluated from there
                filter {                
                    match('(\S+)' value(".cp.hostname") flags(store-matches));
                };
                rewrite {
                    set("$1", value("HOST"));
                };
            }  elif {
                #Get the FW host from the originsicname
                filter {                
                    match('^[Cc][Nn]\\?=([^,]+)' value(".cp.originsicname") flags(store-matches));
                };
                rewrite {
                    set("$1", value("HOST"));
                };
            } elif {
                #Get the FW host from the origin_sic_name
                filter {                
                    match('^[Cc][Nn]\\?=([^,]+)' value(".cp.origin_sic_name") flags(store-matches));
                };
                rewrite {
                    set("$1", value("HOST"));
                };
            };        
            # If this device is a v host we need to get the firewall name
            if {
                filter {                
                    host('-v_(.*)' flags(store-matches));                
                };
                rewrite {
                    set("$1", value("HOST"));
                };
            };      

            if {
                filter {
                    "${.cp.product}" eq "Syslog"
                };
                parser {
                    syslog-parser(
                        flags(assume-utf8, no-hostname, store-raw-message)
                        template("${.cp.default_device_message}")
                        );
                };     
                parser {
                    date-parser-nofilter(format("%s") template("${.cp.time}"));
                };           
                rewrite { 

                    r_set_splunk_dest_update(
                        meta_key('checkpoint_splunk')
                        index('netops')
                        source('program:${PROGRAM}')
                        sourcetype('nix:syslog')
                        template('t_hdr_msg')
                    );            
                };             
            } elif {
                filter {
                    match('Firewall' value('.cp.product'))
                    or match('Application\h+Control' value('.cp.product'))
                    or match('RAD' value('.cp.product'))
                    or match('HTTPS\h+Inspection' value('.cp.product'))
                    or match('Compliance\h+Blade' value('.cp.product'))
                    or match('^Compliance' value('.cp.product'))
                    or match('VPN-1\h+&\h+Fire[wW]all-1' value('.cp.product'))
                    or match('Network\h+Security' value('.cp.product'))
                    and not match('VPN' value('.cp.fw_subproduct'))
                };
                rewrite { 
                    r_set_splunk_dest_update(
                        meta_key('checkpoint_splunk_firewall')
                        index('netfw')
                        source('checkpoint:firewall')
                    );
                };
            } elif  {
                filter {
                    match('U[rR][lL]\h+Filtering' value('.cp.product'))
                };
                rewrite { 
                    r_set_splunk_dest_update(
                        meta_key('checkpoint_splunk_web')
                        index('netproxy')
                        source('checkpoint:web')
                    );
                };
            } elif  {
                filter {
                    match('Scheduled\h+system\h+update' value('.cp.product'))
                    or match('WEB_API' value('.cp.product'))
                    or match('SmartDefense' value('.cp.product'))
                    or match('Smart\h+Defense' value('.cp.product'))
                    or match('W[eE][bB]-UI' value('.cp.product'))
                    or match('SmartDashboard' value('.cp.product'))
                    or match('System\h+Monitor' value('.cp.product'))
                    or match('Log\h+Update' value('.cp.product'))
                    or match('license-mgmt' value('.cp.product'))
                    or match('smart_event' value('.cp.product'))
                    or match('SmartConsole' value('.cp.product'))
                    or match('SmartEvent\h+Client' value('.cp.product'))
                    or match('SmartUpdate' value('.cp.product'))
                    or match('SmartView' value('.cp.product'))
                    or match('Security\h+Gateway\/Management' value('.cp.product'))
                    or match('Smart\h+Defense' value('.cp.product'))
                    or match('WEB_API_INTERNAL' value('.cp.product'))
                    or match('Eventia\h+Analyzer\h+Client' value('.cp.product'))
                    or match('SmartProvisioning\h+Connector' value('.cp.product'))
                    or match('SmartLSM\h+Endpoint\h+Security\h+Console' value('.cp.product'))
                    or match('SmartLSM' value('.cp.product'))
                    or match('ROBO\h+GUI' value('.cp.product'))
                    or match('Management\h+Blade' value('.cp.product'))
                    or match('Connectra' value('.cp.product'))
                    or match('Check\h+Point\h+Security\h+Management\h+Server' value('.cp.product'))
                };
                rewrite { 
                    r_set_splunk_dest_update(
                        meta_key('checkpoint_splunk_audit')
                        index('netops')
                        source('checkpoint:audit')
                    );
                };
            } elif  {
                filter {
                    match('Endpoint\h+Management' value('.cp.product'))
                    or match('Core' value('.cp.product'))
                    or match('Endpoint\h+Compliance' value('.cp.product'))
                    or match('MEPP' value('.cp.product'))
                    or match('Media\h+Encryption\h+&\h+Port\h+Protection' value('.cp.product'))
                    or match('Endpoint\h+Security\h+Console' value('.cp.product'))
                };
                rewrite { 
                    r_set_splunk_dest_update(
                        meta_key('checkpoint_splunk_endpoint')
                        index('netops')
                        source('checkpoint:endpoint')
                    );
                };
            } elif  {
                filter {
                    match('^VPN$' value('.cp.product'))
                    or match('^Mobile$' value('.cp.product'))
                    or match('Mobile\h+App' value('.cp.product'))
                    or match('^VPN' value('.cp.fw_subproduct'))
                    or match('^VPN-1' value('.cp.fw_subproduct'))              
                };
                rewrite { 
                    r_set_splunk_dest_update(
                        meta_key('checkpoint_splunk_sessions')
                        index('netops')
                        source('checkpoint:sessions')
                    );
                };
            } elif  {
                filter {
                    match('IOS\h+Profile' value('.cp.product'))
                    or match('iOS\h+Profiles' value('.cp.product'))
                    or match('Device' value('.cp.product'))
                    or match('WIFI\h+Network' value('.cp.product'))
                    or match('Mobile\h+Access' value('.cp.product'))
                };
                rewrite { 
                    r_set_splunk_dest_update(
                        meta_key('checkpoint_splunk_network')
                        index('netops')
                        source('checkpoint:network')
                    );
                };
            } elif  {
                filter {
                    match('Threat\h+Emulation' value('.cp.product'))
                    or match('Anti-Virus' value('.cp.product'))
                    or match('New\h+Anti\h+Virus' value('.cp.product'))
                    or match('Anti-Bot' value('.cp.product'))
                    or match('Threat\h+Extraction' value('.cp.product'))
                    or match('Anti-Ransomware' value('.cp.product'))
                    or match('Anti-Exploit' value('.cp.product'))
                    or match('Forensics' value('.cp.product'))
                    or match('OS\h+Exploit' value('.cp.product'))
                    or match('OS\h+Exploits' value('.cp.product'))
                    or (match('Application' value('.cp.product')) and not match('Application Control' value('.cp.product')))
                    or match('Text\h+Message' value('.cp.product'))
                    or match('Network\h+Access' value('.cp.product'))
                    or match('Zero\h+Phishing' value('.cp.product'))
                    or match('Anti-Malware' value('.cp.product'))
                    or match('Anti\h+Malware' value('.cp.product'))
                    or match('Anti\h+Malware\h+New\h+Anti\h+Virus' value('.cp.product'))
                    or match('New\h+Anti\h+Virus\h+Anti\h+Malware' value('.cp.product'))
                };
                rewrite { 
                    r_set_splunk_dest_update(
                        meta_key('checkpoint_splunk_ids_malware')
                        index('netids')
                        source('checkpoint:ids_malware')
                    );
                };
            } elif  {
                filter {
                    match('IPS' value('.cp.product'))
                    or match('W[iI][fF][iI]' value('.cp.product'))
                    or match('Cellular' value('.cp.product'))
                };
                rewrite { 
                    r_set_splunk_dest_update(
                        meta_key('checkpoint_splunk_ids')
                        index('netids')
                        source('checkpoint:ids')
                    );
                };
            } elif  {
                filter {
                    match('MTA' value('.cp.product'))
                    or match('Anti-Spam' value('.cp.product'))
                    or match('Anti\h+Spam' value('.cp.product'))
                };
                rewrite { 
                    r_set_splunk_dest_update(
                        meta_key('checkpoint_splunk_email')
                        index('email')
                        source('checkpoint:email')
                    );
                };
            } elif  {            
                filter {
                    match('DLP' value('.cp.product'))
                };
                rewrite { 
                    r_set_splunk_dest_update(
                        meta_key('checkpoint_splunk_dlp')
                        index('netfw')
                        source('checkpoint:firewall')
                    );
                };
            } elif {
                filter {
                    match('Syslog' value('.cp.product'))
                };
                rewrite { 
                    r_set_splunk_dest_update(
                        meta_key('checkpoint_splunk_os')
                        index('netops')
                    );
                };
            } else {
                rewrite { 
                    r_set_splunk_dest_update(
                        meta_key('checkpoint_splunk')
                        index('netops')
                        source('checkpoint:cp_default')
                    );
                };
            };
            rewrite { 
                r_set_splunk_dest_update(
                    vendor_product('null_queue')
                    condition("${.gb.complete}" ne "1")
                );
            };            
        };    

        

    };
   
};
application checkpoint_splunk[sc4s-raw-syslog] {
	filter { 
        message('^.{0,64}?time=\d{10}\|hostname=');
    };	

    parser { checkpoint_splunk-parser(); };   
};

