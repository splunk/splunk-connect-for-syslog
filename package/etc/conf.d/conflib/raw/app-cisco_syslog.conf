filter f_cisco_parse_date{
    match(
        '(?<CISCO_TIME_STATUS>[\*\.])?(?:(?<CISCO_DT>\d+-\d+-\d+T\d+:\d+:\d+(?:\.\d+)?(?:Z|[\+-] *\d+:\d+)|[A-Z][a-z]{2} [ 0123]\d(?: \d{4})? \d\d:\d\d:\d\d(?: [AP]M)?(?:[^ :]+)?)(?: (?<STZ>[A-Za-z]{1,4}T))?)'
        flags(store-matches)
        value(".cisco.header")
    )
};
filter f_cisco_parse_host{
    match(
        '(?:[ ]|^\<\d+\>|^)(?<HOST>(?<!\*)(?!\d{4,})(?:[0-9A-Za-z\-]{4,}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}))'
        flags(store-matches)
        value(".cisco.header")
    )
};
parser cisco-parser-ex{
    channel {        
        if {
            filter(f_cisco_parse_host);
        };
        if {
            filter(f_cisco_parse_date);
            if {
                filter {
                    match('^(\*|\.)$' value("CISCO_TIME_STATUS"));
                };
                rewrite { set("cisco reported time error : ${1}" value("fields.cisco_time_error"));};
            };
            parser { date-parser-nofilter(format(
                '%b %d %H:%M:%S.%f',
                '%b %d %H:%M:%S',
                '%b %d %I:%M:%S %p.%f',
                '%b %d %I:%M:%S %p',
                '%b %d %Y %I:%M:%S %p.%f'
                '%b %d %Y %H:%M:%S.%f',
                '%b %d %Y %H:%M:%S',
                '%Y-%m-%dT%T%z',
                )
                template("$CISCO_DT"));
            };
            rewrite {
                set("${CISCO_TIME_STATUS}" value(".cisco.time_status"));
                unset(value("CISCO_TIME_STATUS"));
                unset(value("CISCO_DT"));
                unset(value("1"));
                unset(value("2"));
                unset(value("3"));
                unset(value("4"));
                unset(value("5"));
                unset(value("6"));
            };
        } elif {
            filter {
                match(
                    '(?<=: )(\d\d:\d\d:\d\d|\d+ \d)'
                    value(".cisco.header")
                )            
            };
        } else {
            parser {
                syslog-parser(

                    flags(assume-utf8, guess-timezone, store-raw-message)                    
                );
            }; 
        };
    };
};


block parser cisco_syslog-parser() {    
 channel {
        parser {
	        # split msg and header right before the '%', Cisco messages may
            # have a variable number of ': ' terminated values
            csv-parser(delimiters(chars('') strings(': %'))
                       columns('header', 'payload') 
                       prefix('.cisco.') 
                       flags(greedy, drop-invalid));
        };
        rewrite {
            set("%${.cisco.payload}" value("MESSAGE"));
        };

        filter {
            match(
                '^(%(.+)-([0-7])-([^\: ]+))([: ]) (.*)'
                flags(store-matches)
                value("MESSAGE")
            )
        };
        rewrite {
            set("$1" value(".cisco.identifier"));
            set("$2" value(".cisco.facility"));
            set("$3" value(".cisco.severity"));
            set("$4" value(".cisco.mnemonic"));
            set("$5" value(".cisco.seperator"));
            set("$6" value(".cisco.message"));
        };
        
        parser(cisco-parser-ex);
        
        rewrite {
            r_set_splunk_dest_default(
                index('netops')
                sourcetype('cisco:ios')
                vendor_product("cisco_ios")
            );              
            set("cisco_syslog", value("fields.sc4s_syslog_format"));
        };                       
        
        if {
            parser { app-parser(topic(cisco_syslog)); };
        };   

   };
};
application cisco_syslog[sc4s-raw-syslog] {
	filter { 
        message(': %' type(string) flags(substring));        
        not message('^\<\d+\>1 ')
    };	

    parser { cisco_syslog-parser(); };   

   
};

