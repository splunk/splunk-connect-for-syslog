# template t_vmware_vsphere_cmmdsTimeMachineDump {
#         template("${.metadata.seq}|${.metadata.id}|${.gb.message}");
# };



block parser app-postfilter-vmware_vsphere_cmmdsTimeMachineDump() {
    channel {

        rewrite {
            subst('\.$', '', value('MESSAGE'));
        };

        parser{
            grouping-by(
                scope(host)
                key('$SOURCEIP')
                trigger(message('\\q$'))
                aggregate(
                    tags("agg")
                    value("MESSAGE" "$(implode '' $(list-slice 0:-1 $(context-values ${MESSAGE})))")
                    value("PROGRAM" "${PROGRAM}@1")
                    value("HOST" "${HOST}@1")
                    value(".splunk.sc4s_template", "${.splunk.sc4s_template}@1")
                    value(".splunk.index", "${.splunk.index}@1")
                    value(".splunk.source", "${.splunk.source}@1")
                    value(".splunk.sourcetype", "${.splunk.sourcetype}@1")
                    value("fields.sc4s_vendor", "${fields.sc4s_vendor}@1")
                    value("fields.sc4s_product", "${fields.sc4s_product}@1")
                    value("fields.sc4s_class", "${fields.sc4s_class}@1")
                    value(".metadata.sc4s.countOfParts", "$(context-length)")
                    tags("isStructured")
                    inherit-mode(context)
                )
                timeout(5)
            );
        };

        if {
            filter {
                filter(f_is_agg)
            };
            
            rewrite {
                subst('\q', '', type(string) flags(substring) value('MESSAGE'));
            };
            if {
                parser {
                    csv-parser(
                        columns("timestamp","guid1","value1","value2","guid2","value3","message")
                        prefix(".metadata.")
                        delimiters(',')
                        flags(greedy)
                        #template('${MESSAGE}')
                    );
                    json-parser(
                        prefix('.values.')
                        template('${.metadata.message}')
                    );
                };                
                rewrite {
                    unset(value(".metadata.message"));
                    r_set_splunk_dest_update_v2(
                        template('t_json_values')
                    );                    
                };
            } else {
                rewrite {
                    set(
                        '${.gb.message}',
                        value('MESSAGE')
                    );
                    unset(value(".gb.message"));
                };                
            };
            
        } else {
            rewrite(r_set_dest_splunk_null_queue);            
        };


    };
};
application app-postfilter-vmware_vsphere_cmmdsTimeMachineDump[sc4s-postfilter] {
    filter {
        program('cmmdsTimeMachineDump' type(string))
        and "`SC4S_SOURCE_VMWARE_VSPHERE_GROUPMSG`" eq "yes"

    };

    parser { app-postfilter-vmware_vsphere_cmmdsTimeMachineDump(); };
};
