
parser p_ise_event_time_multi {
    csv-parser(
        columns(DATE, TIME, TZ)
        prefix(".tmp.")
        delimiters(chars(" "))
        template('${.gb.date_seg}')
    );

    date-parser-nofilter(
            #YYYY- MM-DD hh:mm:ss:xxx +/-zh:zm
            format('%Y-%m-%d %H:%M:%S.%f %z')
            template("${.tmp.DATE} ${.tmp.TIME} ${.tmp.TZ}")
    );
};

template t_ise_message {
        template("${PROGRAM} ${.values.serial} 1 0 ${.gb.message}");
};

block parser app-postfilter-cisco_ise() {    
    channel {
            
        parser{
            grouping-by(
                scope(program)
                key("${.values.serial}")
                trigger("$(context-length)" >= "${.values.num}")
                sort-key("${.values.seq}")
                aggregate(
                    value(".gb.complete" "1")
                    value(".gb.message" "$(implode '' $(list-slice 0:-1 $(context-values ${.values.message})))")
                    value("PROGRAM" "${PROGRAM}@1")
                    value(".values.serial" "${.values.serial}@1")
                    value(".gb.date_seg" "$(list-head $(context-values ${.values.message}))")
                    value(".splunk.sc4s_template", "t_ise_message")
                    value("fields.sc4s_merge_count", "$(context-length)")
                    inherit-mode(context)
                )
                timeout(10)
            );
        };

        if {
            parser(p_ise_event_time_multi);
        };
        
        rewrite { 
            r_set_splunk_dest_update(
                vendor_product('null_queue')
                condition("${.gb.complete}" ne "1")
            );
        };


   };
};
application app-postfilter-cisco_ise[sc4s-postfilter] {
	filter { 
        program('CISE_' type(string) flags(prefix))
        and "${.cisco.num}" ne "1";
    };	
    parser { app-postfilter-cisco_ise(); };   
};

