block parser dell_rsa_secureid-parser() {    
 channel {
        rewrite {
            r_set_splunk_dest_default(
                index('netauth')
                sourcetype('rsa:securid:trace')
                vendor_product("dell_rsa_secureid")
            );              
        };       

        if {
            filter{
                message('\.com\.rsa\.');
            };
            parser {
            #basic parsing

                #we need to actual even time from the field GeneratedTime. Use csv-parser to extract it.
                csv-parser(
                    columns("time","ms","host","type")
                    prefix(".rsa.")
                    delimiters(',')
                    );
                #2012/04/10 04:39:55
                #parse the date
                date-parser-nofilter(format(
                        '%Y-%m-%d %H:%M:%S,%f')
                        template("${LEGACY_MSGHDR} ${.rsa.time},${.rsa.ms}")
                );
            };
            # rewrite {
            #     set("${.rsa.host}" value("HOST")
            #     condition( match('^.' value('.rsa.host') )) );
            #     subst('\..*$' , '' , value('HOST'));
            # };
            rewrite {
                r_set_splunk_dest_update(
                    sourcetype('rsa:securid:syslog')
                );
            };
            rewrite {
                r_set_splunk_dest_update(
                    sourcetype('rsa:securid:admin:syslog')
                    condition(match('audit\.admin' value('.rsa.type')))
                );
            };
            rewrite {
                r_set_splunk_dest_update(
                    sourcetype('rsa:securid:system:syslog')
                    condition(match('system\.com\.rsa|,\s+system\.erationsconsole' value('.rsa.type')))
                );
            };
            rewrite {
                r_set_splunk_dest_update(
                    sourcetype('rsa:securid:runtime:syslog')
                    condition(match('audit\.runtime\.com\.rsa' value('.rsa.type')))
                );
            };            
        } elif {
            filter{
                program('...*')
                and not program('at')
                and not program('Caused')
            };
            rewrite {
                subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
                set("${PROGRAM}", value(".PROGRAM"));
                subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
                r_set_splunk_dest_update(
                    sourcetype('nix:syslog')
                );
            };
        } else {
            parser {
                grouping-by(
                    scope(host)
                    key('x')
                    timeout(1)
                    aggregate(
                        value("MESSAGE" "$(implode '\n' $(context-values ${LEGACY_MSGHDR}${MESSAGE}))")
                    )
                );
            };
            rewrite {
                r_set_splunk_dest_update(
                    source('program:${.PROGRAM}')
                    sourcetype('rsa:securid:trace')
                );
            };
        };


   };
};
application dell_rsa_secureid[sc4s-network-source] {
	filter { 
        "${.netsource.sc4s_vendor_product}" eq "dell_rsa_secureid"
        or "${SOURCE}" eq "s_DELL_RSA_SECUREID"

    };	
    parser { dell_rsa_secureid-parser(); };   
};
