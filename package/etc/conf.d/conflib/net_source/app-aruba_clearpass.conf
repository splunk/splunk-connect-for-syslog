block parser aruba_clearpass-parser() {    
 channel {
        rewrite {
            set("aruba_clearpass", value("fields.sc4s_vendor_product"));        
            set("netops", value(".splunk.index"));
            set("SC4S", value(".splunk.source"));
            set("aruba:clearpass", value(".splunk.sourcetype"));
            set("t_hdr_msg", value(".splunk.sc4s_template"));
            #set-tag("log_path_known");
            ##set-tag("aruba_clearpass");      
                  
        }; 


        rewrite { 
            set("yes", 
                value(".dest.global.hec") 
                condition(
                    '$(if ("`SC4S_DEST_SPLUNK_HEC_GLOBAL`" ne "") "`SC4S_DEST_SPLUNK_HEC_GLOBAL`" "yes")' ne "no"
                )
            );            
            set("yes", 
                value(".dest.global.archive") 
                condition(
                    '$(if ("`SC4S_ARCHIVE_GLOBAL`" ne "") "`SC4S_ARCHIVE_GLOBAL`" "no")' ne "no"
                ) 
            );
            set("yes", 
                value(".dest.global.alts") 
                condition(
                    '$(if ("`SC4S_DEST_GLOBAL_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_ARUBA_CLEARPASS_ALTERNATES`", 
                value(".dest.select.alts") 
                condition(
                    '$(if ("`SC4S_DEST_ARUBA_CLEARPASS_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_ARUBA_CLEARPASS_FILTERED_ALTERNATES`", 
                value(".dest.select.filteredalts") 
                condition(
                    '$(if ("`SC4S_DEST_ARUBA_CLEARPASS_FILTERED_ALTERNATES`" ne "") "yes" "no")' ne "no"               
                ) 
            );      
        };
        parser {p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template})" value("MSG")); };

   };
};
application aruba_clearpass[network-source] {
	filter { 
        program('CPPM_' type(string) flags(prefix))
        or "${.netsource.sc4s_vendor_product}" eq "aruba_clearpass"
        or "${SOURCE}" eq "s_ARUBA_CLEARPASS"        
        ;
    };	
    parser { aruba_clearpass-parser(); };   
};


