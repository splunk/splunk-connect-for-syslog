{{- if (getenv (print "SOURCE_SIMPLE_SET")) }}
{{- range split (getenv "SOURCE_SIMPLE_SET" "") "," }}

block parser {{ print "SIMPLE_" (strings.ToUpper .) }}-parser() {    
 channel {
        rewrite {
            set("{{ . }}", value("fields.sc4s_vendor_product"));        
            set("main", value(".splunk.index"));
            set("SC4S", value(".splunk.source"));
            set("sc4s:simple:{{ . }}", value(".splunk.sourcetype"));
            #set-tag("log_path_known");
            ##set-tag("{{ . }}");      
                  
        };       
        if {
            filter{ "${PROGRAM}" ne "" };
            rewrite{
                subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
                set("${PROGRAM}", value(".PROGRAM"));
                subst('^\/(?:[^\/]+\/)+', "" , value(".PROGRAM"));
            };
        };
        
        rewrite {r_set_destinations(group("{{ print "SIMPLE_" (strings.ToUpper .) }}"))};                            
        parser {p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
        parser (compliance_meta_by_source);
        if {
            filter(f_is_rfc5424_strict);
            rewrite { set("$(template ${.splunk.sc4s_template} $(template t_5424_hdr_sdata_msg))" value("MSG")); };
        } else {
            rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };
        };

   };
};
application {{ print "SIMPLE_" (strings.ToUpper .) }}[network-source] {
	filter { 
        "${SOURCE}" eq "s_{{ print "SIMPLE_" (strings.ToUpper .) }}"
    };	
    parser { {{ print "SIMPLE_" (strings.ToUpper .) }}-parser(); };   
};
{{- end }}
{{- end }}
