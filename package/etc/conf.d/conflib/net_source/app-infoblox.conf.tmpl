block parser infoblox-parser() {    
 channel {
        rewrite {
            set("infoblox", value("fields.sc4s_vendor_product"));        
            set("netops", value(".splunk.index"));
            set("SC4S", value(".splunk.source"));
            set("infoblox", value(".splunk.sourcetype"));
            set("t_hdr_msg", value(".splunk.sc4s_template"));
            #set-tag("log_path_known");
            ##set-tag("infoblox");      
                  
        };       

        if {
            filter{program('named' type(string) flags(prefix))};
            rewrite {
                set("netdns", value(".splunk.index"));
                set("infoblox_dns", value("fields.sc4s_vendor_product"));
                set("program:${PROGRAM}", value(".splunk.source"));
                set("infoblox:dns", value(".splunk.sourcetype"));
            };
        } elif {
            filter{program('dhcpd' type(string) flags(prefix))};
            rewrite {
                set("netipam", value(".splunk.index"));
                set("infoblox_dhcp", value("fields.sc4s_vendor_product"));
                set("program:${PROGRAM}", value(".splunk.source"));
                set("infoblox:dhcp", value(".splunk.sourcetype"));
            };
        } elif {
            filter{program('threat-protect-log' type(string) flags(prefix))};
            rewrite {
                set("netids", value(".splunk.index"));
                set("infoblox", value("fields.sc4s_vendor_product"));
                set("program:${PROGRAM}", value(".splunk.source"));
                set("infoblox:threatprotect", value(".splunk.sourcetype"));
                set("$(template ${.splunk.sc4s_template})" value("MSG"));
            };
        } elif {
            filter{message('^\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}(\.\d+)Z\s+\[[^\]]+\]:')};
            rewrite {
                set("infoblox", value("fields.sc4s_vendor_product"));
                set("program:${PROGRAM}", value(".splunk.source"));
                set("infoblox:audit", value(".splunk.sourcetype"));
            };
            parser { p_add_context_splunk(key("infoblox_audit")); };
             rewrite { set("$(template ${.splunk.sc4s_template})" value("MSG")); };
       } else {
            rewrite {
                set("infoblox", value("fields.sc4s_vendor_product"));
                set("program:${PROGRAM}", value(".splunk.source"));
                set("infoblox:port", value(".splunk.sourcetype"));
                subst("^[^\t]+\t", "", value("MESSAGE"), flags("global"));
            };
            rewrite { set("$(template ${.splunk.sc4s_template})" value("MSG")); };
        };

        parser {p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
        parser (compliance_meta_by_source);

   };
};
application infoblox[network-source] {
	filter { 
        ("${.netsource.sc4s_vendor_product}" eq "infoblox"
        or "${SOURCE}" eq "s_INFOBLOX"
        )
        and "${fields.sc4s_syslog_format}" ne "cef" 
        and not program("CEF")
    };	
    parser { infoblox-parser(); };   
};

filter f_soup_is_infoblox {
    "${fields.sc4s_vendor_product}" eq "infoblox";
    or "${fields.sc4s_vendor_product}" eq "infoblox_dhcp";
    or "${fields.sc4s_vendor_product}" eq "infoblox_dns";
};