block parser zscaler_lss-parser() {    
 channel {
        
        if {
            filter {
                match('.' value('.json.ClientZEN'))
                and match('.' value('.json.AppGroup'))
                and match('.' value('.json.Application'))
            };
            rewrite {
                r_set_splunk_dest_default(
                    index("netproxy")
                    sourcetype('zscalerlss-zpa-app')
                    vendor_product("zscaler_lss")
                );                                          
            };           
        } elif {
            filter {
                match('.' value('.json.Exporter'))
                and match('.' value('.json.Customer'))
                and match('.' value('.json.ConnectionID'))
            };
            rewrite {
                r_set_splunk_dest_default(
                    index("netproxy")
                    sourcetype('zscalerlss-zpa-bba')
                    vendor_product("zscaler_lss")
                );                                          
            };                       
        } elif {
            filter {
                match('.' value('.json.Connector'))
                and match('.' value('.json.Customer'))
                and match('.' value('.json.ConnectorGroup'))
            };
            rewrite {
                r_set_splunk_dest_default(
                    index("netproxy")
                    sourcetype('zscalerlss-zpa-connector')
                    vendor_product("zscaler_lss")
                );                                          
            };                       
        } elif {
            filter {
                match('.' value('.json.SAMLAttributes'))
                and match('.' value('.json.Customer'))
            };
            rewrite {
                r_set_splunk_dest_default(
                    index("netproxy")
                    sourcetype('zscalerlss-zpa-auth')
                    vendor_product("zscaler_lss")
                );                                          
            };                       
        };
        parser {
                #.jsonLog.Timestamp Mar 04 20:37:53 2020
            date-parser(
                format('%a %b %d %H:%M:%S %Y',
                       '%a %b %d %k:%M:%S %Y')
                template("${.json.LogTimestamp}")
                flags(guess-timezone)
            );
        };
        

   };
};
application zscaler_lss[json] {
	parser { zscaler_lss-parser(); };   
};

