block parser fireeye_json-parser() {    
 channel {
        filter { 
            message('^fe[a-z]+-\d+\.[a-z]+: ({.*}) *$', flags(store-matches));
        };  
        rewrite {
            set("$MESSAGE", value("RAWMSG"));
            set("$1", value("MESSAGE"));
            set("fe_json", value("fields.sc4s_syslog_format"));
        };                       
        parser {
            json-parser(
                prefix('.json.')
            );
        };
        rewrite {
            r_set_splunk_dest_default(
                index('fireeye')
                sourcetype('fe_json')
                vendor_product("fireeye_json")
                dest_key("FIREEYE")
            );              
            set("hx_json", value(".splunk.sourcetype") condition( "${.json.product}" eq "HX" ));
            set("${.json.alert.host.hostname}", value("HOST") condition( "${.json.alert.host.hostname}" ne ""));                  
        };       
        if {
            filter { "${.json.alert.event_values.processEvent/timestamp}" ne "" };
            parser { 
                date-parser-nofilter(format('%Y-%m-%dT%H:%M:%S.%f%z')
                template("${.json.alert.event_values.processEvent/timestamp}"));
            };
        } elif {
            filter { "${.json.alert.event_at}" ne "" };
            parser { 
                date-parser-nofilter(format('${.json.alert.event_at}')
                template("${.json.alert.event_values.processEvent/timestamp}"));
            };
        } else {};
        
        
   };
};
application fireeye_json[sc4s-syslog] {

    parser { fireeye_json-parser(); };   
};
