block parser f5_bigip_irule_json-parser() {    
 channel {
        rewrite {
            set("f5_bigip_access_json", value("fields.sc4s_vendor_product"));    
            set("f5_bigip_irule_json", value("fields.sc4s_syslog_format"));    
            set("netops", value(".splunk.index"));
            set("SC4S", value(".splunk.source"));
            set("f5:bigip:ltm:access_json", value(".splunk.sourcetype"));
            #set-tag("log_path_known");
            #set-tag("f5_bigip");      
            #set-tag("f5_bigip_access_json");   
        };       
        rewrite { 
            set("yes", 
                value(".dest.global.hec") 
                condition(
                    '$(if ("`SC4S_DEST_SPLUNK_HEC_GLOBAL`" ne "") "`SC4S_DEST_SPLUNK_HEC_GLOBAL`" "yes")' ne "no"
                )
            );            
            set("yes", 
                value(".dest.global.archive") 
                condition(
                    '$(if ("`SC4S_ARCHIVE_GLOBAL`" ne "") "`SC4S_ARCHIVE_GLOBAL`" "no")' ne "no"
                ) 
            );
            set("yes", 
                value(".dest.global.alts") 
                condition(
                    '$(if ("`SC4S_DEST_GLOBAL_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_F5_BIGIP_ALTERNATES`", 
                value(".dest.select.alts") 
                condition(
                    '$(if ("`SC4S_DEST_F5_BIGIP_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_F5_BIGIP_FILTERED_ALTERNATES`", 
                value(".dest.select.filteredalts") 
                condition(
                    '$(if ("`SC4S_DEST_F5_BIGIP_FILTERED_ALTERNATES`" ne "") "yes" "no")' ne "no"               
                ) 
            );      
        };
        parser {p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
        parser (compliance_meta_by_source);
   };
};
application f5_bigip_irule_json[syslog] {
	filter { 
        program('F5' type(string) flags(prefix)) and match('access_json' value('MSGID'))
        ;
    };	
    parser { f5_bigip_irule_json-parser(); };   
};

