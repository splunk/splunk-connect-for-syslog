block parser tanium-parser() {    
 channel {
        if {
            filter{
                match(' Question="([^"]+)"'
                        value('SDATA')
                        flags(store-matches)
                    );
            };  
        };
        rewrite {
            r_set_splunk_dest_default(
                index("epintel")
                sourcetype('tanium')
                vendor_product("tanium")
                template("t_5424_hdr_sdata_msg")
            );            
            set("$1", value(".tanium.question"));
            subst(" ", '', value(".tanium.question"));
            set("tanium:question:$1", value(".splunk.source") condition("$1" ne ""));
            
            set("tanium:inventory", value(".splunk.sourcetype") condition("${.tanium.question}" eq "Splunk Basic Asset"));
            set("tanium:hardware:cpu", value(".splunk.sourcetype") condition("${.tanium.question}" eq "Splunk Hardware CPU"));
            set("tanium:endpoint:processes", value(".splunk.sourcetype") condition("${.tanium.question}" eq "Splunk Running Processes MD5"));
            set("tanium:endpoint:processes:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"process_start\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:endpoint:services", value(".splunk.sourcetype") condition("${.tanium.question}" eq "Splunk Running Services"));
            set("tanium:change:endpoint", value(".splunk.sourcetype") condition("${.tanium.question}" eq "Splunk Integrity Monitor"));
            set("tanium:endpoint:netconn:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"network_connect\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:endpoint:netdisco:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"network_disconnect\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:endpoint:netaccept:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"network_accept\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:endpoint:filecreate:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"file_create\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:endpoint:filewrite:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"file_write\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:endpoint:fileread:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"file_read\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:endpoint:fileopen:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"file_open\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:endpoint:filemove:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"file_move\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:endpoint:filedelete:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"file_delete\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:endpoint:filepermchange:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"file_permission_change\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:endpoint:regcreate:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"registry_create\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:endpoint:regset:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"registry_set\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:updates", value(".splunk.sourcetype") condition("${.tanium.question}" eq "Splunk Patch List Applicability"));
            set("tanium:endpoint:dns:stream", value(".splunk.sourcetype") condition( match('\"event\"\:\"dns_event\"\,\"tanium_computer_id\"' value('SDATA'))));
            set("tanium:ids:netconns", value(".splunk.sourcetype") condition("${.tanium.question}" eq "Splunk Non Approved Established Connections"));
            set("tanium:malware:attack", value(".splunk.sourcetype") condition("${.tanium.question}" eq "Tanium Detect"));
            set("tanium:detect:signals", value(".splunk.sourcetype") condition( match('\"Intel Type\"\:\"tanium-signal\"' value('SDATA'))));
            set("tanium:detect:openioc", value(".splunk.sourcetype") condition( match('\"Intel Type\"\:\"openioc\"' value('SDATA'))));
            set("tanium:detect:yara", value(".splunk.sourcetype") condition( match('\"Intel Type\"\:\"yara\"' value('SDATA'))));
            
            set("t_5424_hdr_sdata_msg", value(".splunk.sc4s_template"));
            #set-tag("log_path_known");
            #set-tag("tanium");      
                  
        };               
        if {
            filter{
                match(' Client-Time-UTC="([^"]+)"'
                        value('SDATA')
                        flags(store-matches)
                    );
            };  
            parser { 
                date-parser-nofilter(format('%Y-%m-%d %H:%M:%S')
                template("$1"));
            };
        };
        
        rewrite {r_set_destinations(group("TANIUM"))};        
        parser {p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template})" value("MSG")); };

   };
};
application tanium[syslog] {
	filter { 
        program('Tanium' type(string) flags(prefix));
    };	
    parser { tanium-parser(); };   
};
