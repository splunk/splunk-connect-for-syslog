block parser mcafee_nsp-parser() {    
 channel {
        rewrite {
            set("mcafee_nsp", value("fields.sc4s_vendor_product"));        
            set("netids", value(".splunk.index"));
            set("SC4S", value(".splunk.source"));
            set("mcafee:nsp", value(".splunk.sourcetype"));
            #set-tag("log_path_known");
            #set-tag("mcafee_nsp");            
        };       
            
        rewrite { 
            set("yes", 
                value(".dest.global.hec") 
                condition(
                    '$(if ("`SC4S_DEST_SPLUNK_HEC_GLOBAL`" ne "") "`SC4S_DEST_SPLUNK_HEC_GLOBAL`" "yes")' ne "no"
                )
            );            
            set("yes", 
                value(".dest.global.archive") 
                condition(
                    '$(if ("`SC4S_ARCHIVE_GLOBAL`" ne "") "`SC4S_ARCHIVE_GLOBAL`" "no")' ne "no"
                ) 
            );
            set("yes", 
                value(".dest.global.alts") 
                condition(
                    '$(if ("`SC4S_DEST_GLOBAL_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_McAfee_NSP_ALTERNATES`", 
                value(".dest.select.alts") 
                condition(
                    '$(if ("`SC4S_DEST_McAfee_NSP_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_McAfee_NSP_FILTERED_ALTERNATES`", 
                value(".dest.select.filteredalts") 
                condition(
                    '$(if ("`SC4S_DEST_McAfee_NSP_FILTERED_ALTERNATES`" ne "") "yes" "no")' ne "no"               
                ) 
            );      
        };
    
        parser {p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
    
        parser (compliance_meta_by_source);

   };
};
application mcafee_nsp[syslog] {
	filter { 
        program('SyslogACLLogForwarder' type(string) flags(prefix))
        or program('SyslogAlertForwarder' type(string) flags(prefix))
        or program('SyslogAuditLogForwarder' type(string) flags(prefix))        
        or program('SyslogFaultForwarder' type(string) flags(prefix));
    };	
    parser { mcafee_nsp-parser(); };   
};

filter f_is_soup_mcafee_nsp{
    "${fields.sc4s_vendor_product}" eq "mcafee_nsp"
};

