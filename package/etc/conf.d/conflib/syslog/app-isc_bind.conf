block parser bind-parser() {    
 channel {
        rewrite {
            r_set_splunk_dest_default(
                index("netdns")
                source("program:named")
                sourcetype('isc:bind')
                vendor_product("isc_bind")
                template("t_hdr_msg")
            );
        };

        if {
            filter{message('^client') and message('\s+query\s+failed\s+')};
            rewrite {
                set("netdns", value(".splunk.index"));
                set("program:named", value(".splunk.source"));
                set("isc:bind:queryerror", value(".splunk.sourcetype"));
            };
        } elif {
            filter{message('^client')};        
            rewrite {
                set("netdns", value(".splunk.index"));
                set("program:named", value(".splunk.source"));
                set("isc:bind:query", value(".splunk.sourcetype"));
            };
        } elif {
            filter{message('^network unreachable resolving')};                
            rewrite {
                set("netdns", value(".splunk.index"));
                set("program:named", value(".splunk.source"));
                set("isc:bind:lameserver", value(".splunk.sourcetype"));
            };
        } elif {
            filter{message('^zone')};                
            rewrite {
                set("netdns", value(".splunk.index"));
                set("program:named", value(".splunk.source"));
                set("isc:bind:transfer", value(".splunk.sourcetype"));
            };
        } else {
            rewrite {
                set("netdns", value(".splunk.index"));
                set("program:named", value(".splunk.source"));
                set("isc:bind:network", value(".splunk.sourcetype"));
            };
        };
        
        rewrite {r_set_destinations(group("NIX_SYSLOG"))};                    
        parser {p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };    
        parser (compliance_meta_by_source);

   };
};
application bind[syslog] {
	filter { 
        program('named' type(string) flags(prefix));
    };	
    parser { bind-parser(); };
    
};