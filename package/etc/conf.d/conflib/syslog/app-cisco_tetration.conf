
python {
import json
class cisco_tetration_json(object):

    def parse(self, log_message):

        try:
            msg = log_message['MESSAGE'].decode("utf-8")
            j = json.loads(msg)
            if 'alertDetails' in j:
                ad = j['alertDetails']
                j['alertDetails'] = json.loads(ad)
                log_message['MESSAGE'] = json.dumps(j)
        except json.JSONDecodeError as e:
            pass
        except Exception as e:
            log_message['fields.cisco_parser_exception']=str(e)
            pass
        return True

};
parser cisco_tetration_json {
    python(
        class("cisco_tetration_json")
    );
};

block parser cisco_Tetration-parser() {    
    channel {
        rewrite {
            r_set_splunk_dest_default(
                index('netops')
                sourcetype('cisco:tetration')
                vendor_product("cisco_tetration")
                template('t_msg_only')
            );                                                                    
        };   
        
        if {
            filter {
                message(
                    '({.*)$'
                    flags(store-matches)
                );
            };
            rewrite {
                set("$1" value("MESSAGE"));
            };
            parser (cisco_tetration_json);
        };

   };
};
application cisco_Tetration[sc4s-syslog] {
	filter { 
        "${fields.sc4s_vendor_product}" eq ""
        and program('Tetration' type(string) flags(prefix));
    };	
    parser { cisco_Tetration-parser(); };   
};

