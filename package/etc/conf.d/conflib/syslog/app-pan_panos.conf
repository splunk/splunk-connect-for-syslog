block parser pan_panos-parser() {    
 channel {
        rewrite {
            r_set_splunk_dest_default(
                index("netops")
                sourcetype('pan:log')
                vendor_product("pan_log")
                dest_key("PALOALTO_PANOS")
            );                         
            set("$HOST", value("fields.pan_forwarder"), condition( program("logforwarder")));             
            set("pan_panos", value("fields.sc4s_syslog_format"));             
        };       


        if (message(',THREAT,' type(string) flags(substring))) {
            parser {
                csv-parser(
                    columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","src_ip","dest_ip","src_translated_ip","dest_translated_ip","rule","src_user","dest_user","app","vsys","src_zone","dest_zone","src_interface","dest_interface","log_forwarding_profile","future_use3","session_id","repeat_count","src_port","dest_port","src_translated_port","dest_translated_port","session_flags","transport","action","misc","threat","raw_category","severity","direction","sequence_number","action_flags","src_location","dest_location","future_use4","content_type","pcap_id","file_hash","cloud_address","url_index","user_agent","file_type","xff","referrer","sender","subject","recipient","report_id","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name")
                    prefix(".pan.")
                    delimiters(',')
                    quote-pairs('""')
                    flags(escape-double-char)
                );
            };
            rewrite {
                r_set_splunk_dest_update(
                    index('netproxy')
                    meta_key('pan_threat')
                    sourcetype('pan:threat')
                );
            };  
        } elif (message(',TRAFFIC,' type(string) flags(substring))) {    
            parser {
                csv-parser(
                    columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","src_ip","dest_ip","src_translated_ip","dest_translated_ip","rule","src_user","dest_user","app","vsys","src_zone","dest_zone","src_interface","dest_interface","log_forwarding_profile","future_use3","session_id","repeat_count","src_port","dest_port","src_translated_port","dest_translated_port","session_flags","transport","action","bytes","bytes_out","bytes_in","packets","start_time","duration","http_category","future_use4","sequence_number","action_flags","src_location","dest_location","future_use5","packets_out","packets_in","session_end_reason","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name")
                    prefix(".pan.")
                    delimiters(',')
                    quote-pairs('""')
                    flags(escape-double-char)
                );
            };
            rewrite {
                r_set_splunk_dest_update(
                        index('netfw')
                        meta_key('pan_traffic')
                        sourcetype('pan:traffic')
                );                
            };  
        } elif (message(',SYSTEM,' type(string) flags(substring))) {    
            parser {
                csv-parser(
                    columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","vsys","event_id","object","future_use3","future_use4","module","severity","description","sequence_number","action_flags","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name")
                    prefix(".pan.")
                    delimiters(',')
                    quote-pairs('""')
                    flags(escape-double-char)
                );
            };
            rewrite {
                r_set_splunk_dest_update(
                        index('netops')
                        meta_key('pan_system')
                        sourcetype('pan:system')
                );
            };  
        } elif (message(',CONFIG,' type(string) flags(substring))) {    
            parser {
                csv-parser(
                    columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","host_name","vsys","command","admin","client","result","configuration_path","sequence_number","action_flags","before_change_detail","after_change_detail","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name")
                    prefix(".pan.")
                    delimiters(',')
                    quote-pairs('""')
                    flags(escape-double-char)
                );
            };
            rewrite {
                r_set_splunk_dest_update(
                    index('netops')
                    meta_key('pan_config')
                    sourcetype('pan:config')
                );
            };  
        } elif (message(',HIPMATCH,' type(string) flags(substring))) {    
            parser {
                csv-parser(
                    columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","src_user","vsys","host_name","os","src_ip","hip_name","hip_count","hip_type","future_use3","future_use4","sequence_number","action_flags","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name")
                    prefix(".pan.")
                    delimiters(',')
                    quote-pairs('""')
                    flags(escape-double-char)
                );
            };
            rewrite {
                r_set_splunk_dest_update(
                    index('epintel')
                    meta_key('pan_hipmatch')
                    sourcetype('pan:hipmatch')
                );
            };  
        } elif (message(',CORRELATION,' type(string) flags(substring))) {    
            parser {
                csv-parser(
                    columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","src_ip","src_user","vsys","category","severity","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name","vsys_id","object","object_id","evidence")
                    prefix(".pan.")
                    delimiters(',')
                    quote-pairs('""')
                    flags(escape-double-char)
                );
            };
			rewrite{
                r_set_splunk_dest_update(
                    meta_key('pan_correlation')
                    sourcetype('pan:correlation')
			    );
            };
        } elif (message(',USERID,' type(string) flags(substring))) {    
            parser {
                csv-parser(
                    columns("future_use1","receive_time","serial_number","type","log_subtype","version","generated_time","vsys","src_ip","source_name","event_id","repeat_count","timeout_threshold","src_port","dest_port","source","source_type","sequence_number","action_flags","devicegroup_level1","devicegroup_level2","devicegroup_level3","devicegroup_level4","vsys_name","dvc_name")
                    prefix(".pan.")
                    delimiters(',')
                    quote-pairs('""')
                    flags(escape-double-char)
                );
            };
            rewrite {
                r_set_splunk_dest_update(
                    index('netauth')
                    meta_key('pan_userid')
                    sourcetype('pan:userid')
                );
            };  
        } elif (message(',GLOBALPROTECT,' type(string) flags(substring))) {    
            rewrite {
                r_set_splunk_dest_update(
                    index('netfw')
                    meta_key('pan_globalprotect')
                    sourcetype('pan:globalprotect')
                );
            };  
        } else { };
        
        # Palo IETF (5424) event is entirely contained in $MESSAGE; for BSD format event needs to be constructed from
        # constituent parts.  LEGACY_MSGHDR is null in IETF so concatenation is a no-op (so no test is needed).

        parser {
            # Parse the date
            # 2012/04/10 04:39:55
            date-parser-nofilter(format(
                    '%Y/%m/%d %H:%M:%S.%f',
                    '%Y/%m/%d %H:%M:%S',
                    '%Y-%m-%dT%H:%M:%S.%f%z',)
                    template("${.pan.generated_time}")
            );
        };

        rewrite {
            set("${.pan.dvc_name}" value("HOST") 
                condition( match('^.' value('.pan.dvc_name') )) );
        };        
      
   };
};
application pan_panos[sc4s-syslog] {
	filter { 
        "${fields.sc4s_syslog_format}" eq "pan_panos"
        or program('logforwarder' type(string))
        or ("${PROGRAM}" eq "" 
            and message('1,' type(string) flags(prefix)) 
            and message('1,[^,]+,[^,]+,[A-Z]+\,')
            )
        ;
    };	
    parser { pan_panos-parser(); };   
};
