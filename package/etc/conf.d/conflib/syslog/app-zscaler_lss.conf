block parser zscaler_lss-parser() {    
 channel {
        parser {
                #.jsonLog.Timestamp Mar 04 20:37:53 2020
                date-parser(
                format('%a %b %d %H:%M:%S %Y',
                       '%a %b %d %k:%M:%S %Y')
                template("${.json.LogTimestamp}")
                flags(guess-timezone)
                );
        };
        rewrite {
            set("zscaler_lss", value("fields.sc4s_vendor_product"));        
            set("netproxy", value(".splunk.index"));
            set("SC4S", value(".splunk.source"));
            set("zscalerlss", value(".splunk.sourcetype"));
            #set-tag("log_path_known");
            ##set-tag("zscaler_lss");      
                  
        };       

        if {
            filter {
                match('.' value('.json.ClientZEN'))
                and match('.' value('.json.AppGroup'))
                and match('.' value('.json.Application'))
            };
            rewrite {
                set("zscalerlss-zpa-app", value(".splunk.sourcetype"));
            };
        } elif {
            filter {
                match('.' value('.json.Exporter'))
                and match('.' value('.json.Customer'))
                and match('.' value('.json.ConnectionID'))
            };
            rewrite {
                set("zscalerlss-zpa-bba", value(".splunk.sourcetype"));
            };
        } elif {
            filter {
                match('.' value('.json.Connector'))
                and match('.' value('.json.Customer'))
                and match('.' value('.json.ConnectorGroup'))
            };
            rewrite {
                set("zscalerlss-zpa-connector", value(".splunk.sourcetype"));
            };
        } elif {
            filter {
                match('.' value('.json.SAMLAttributes'))
                and match('.' value('.json.Customer'))
            };
            rewrite {
                set("zscalerlss-zpa-auth", value(".splunk.sourcetype"));
            };
        } else {
            rewrite {
                set("zscaler_lss_rogue_message", value("fields.sc4s_vendor_product"));
                set("zscaler_lss:rogue", value("fields.sc4s_error"));
                set("zscalerlss-zpa-bba", value(".splunk.sourcetype"));
            };

        };

        rewrite { 
            set("yes", 
                value(".dest.global.hec") 
                condition(
                    '$(if ("`SC4S_DEST_SPLUNK_HEC_GLOBAL`" ne "") "`SC4S_DEST_SPLUNK_HEC_GLOBAL`" "yes")' ne "no"
                )
            );            
            set("yes", 
                value(".dest.global.archive") 
                condition(
                    '$(if ("`SC4S_ARCHIVE_GLOBAL`" ne "") "`SC4S_ARCHIVE_GLOBAL`" "no")' ne "no"
                ) 
            );
            set("yes", 
                value(".dest.global.alts") 
                condition(
                    '$(if ("`SC4S_DEST_GLOBAL_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_ZSCALER_LSS_ALTERNATES`", 
                value(".dest.select.alts") 
                condition(
                    '$(if ("`SC4S_DEST_ZSCALER_LSS_ALTERNATES`" ne "") "yes" "no")' ne "no"
                ) 
            );
            set("`SC4S_DEST_ZSCALER_LSS_FILTERED_ALTERNATES`", 
                value(".dest.select.filteredalts") 
                condition(
                    '$(if ("`SC4S_DEST_ZSCALER_LSS_FILTERED_ALTERNATES`" ne "") "yes" "no")' ne "no"               
                ) 
            );      
        };

        parser {p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
        parser (compliance_meta_by_source);       
   };
};
application zscaler_lss[syslog] {
	filter { 
        filter(f_msg_is_tcp_json);
    };	
    parser { zscaler_lss-parser(); };   
};

