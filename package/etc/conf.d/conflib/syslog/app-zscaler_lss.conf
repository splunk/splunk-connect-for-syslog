block parser zscaler_lss-parser() {    
 channel {
        parser {
                #.jsonLog.Timestamp Mar 04 20:37:53 2020
                date-parser(
                format('%a %b %d %H:%M:%S %Y',
                       '%a %b %d %k:%M:%S %Y')
                template("${.json.LogTimestamp}")
                flags(guess-timezone)
                );
        };
        rewrite {
            r_set_splunk_dest_default(
                index("netproxy")
                source("program:${.PROGRAM}")
                sourcetype('zscalerlss')
                vendor_product("zscaler_lss")
            );                                          
        };           

        if {
            filter {
                match('.' value('.json.ClientZEN'))
                and match('.' value('.json.AppGroup'))
                and match('.' value('.json.Application'))
            };
            rewrite {
                r_set_splunk_dest_update(
                     sourcetype('zscalerlss-zpa-app')
                );
            };
        } elif {
            filter {
                match('.' value('.json.Exporter'))
                and match('.' value('.json.Customer'))
                and match('.' value('.json.ConnectionID'))
            };
            rewrite {
                r_set_splunk_dest_update(
                     sourcetype('zscalerlss-zpa-bba')
                );
            };
        } elif {
            filter {
                match('.' value('.json.Connector'))
                and match('.' value('.json.Customer'))
                and match('.' value('.json.ConnectorGroup'))
            };
            rewrite {
                r_set_splunk_dest_update(
                     sourcetype('zscalerlss-zpa-connector')
                );
            };
        } elif {
            filter {
                match('.' value('.json.SAMLAttributes'))
                and match('.' value('.json.Customer'))
            };
            rewrite {
                r_set_splunk_dest_update(
                     sourcetype('zscalerlss-zpa-auth')
                );
            };
        } else {
            rewrite {
                r_set_splunk_dest_update(
                     meta_key('zscaler_lss_rogue_message')
                     sourcetype('zscalerlss-zpa-bba')
                );
            };
            rewrite {
                set("zscaler_lss:rogue", value("fields.sc4s_error"));                
            };

        };

   };
};
application zscaler_lss[sc4s-syslog] {
	filter { 
        filter(f_msg_is_tcp_json);
    };	
    parser { zscaler_lss-parser(); };   
};

