#This parser adds messages from ACS to a context without sending them on to destination

parser ise_event_time {
    csv-parser(
        columns(DATE, TIME, TZ)
        prefix(".raw.")
        delimiters(chars(" "))        
    );

    date-parser-nofilter(
            #YYYY- MM-DD hh:mm:ss:xxx +/-zh:zm
            format('%Y-%m-%d %H:%M:%S.%f %z')
            template("${.raw.DATE} ${.raw.TIME} ${.raw.TZ}")
    );
};

template t_ise_message {
        template("${PROGRAM} ${.cisco.serial} ${.cisco.seq} ${.cisco.num} ${MESSAGE}");
};

block parser cisco_ise-parser() {    

    channel {
            
        if {
            filter {
                message('^\d+ \d+ \d+ ');
            };
            parser {
                csv-parser(
                    columns(serial, num, seq, message)
                    prefix(".cisco.")
                    delimiters(chars(" "))
                    flags(greedy)
                );                
            
                grouping-by(
                        scope(program)
                        key("${.cisco.serial}")
                        #trigger("$(+ ${.cisco.seq} 1)" == "${.cisco.num}")
                        trigger("1" == "2")
                        sort-key("${.cisco.seq}")
                        aggregate(
                            value("ISODATE" "${ISODATE}@1")
                            value("MESSAGE" "$(implode '' $(context-values ${.cisco.message}))")
                            value("PROGRAM" "${PROGRAM}@1")
                            value(".cisco.serial" "${.cisco.serial}@1")
                            value(".gb.complete" "1")
                            inherit-mode("none")
                        )
                        timeout(5)
                );
                
            };        
            if {
                filter {"${.gb.complete}" eq "1"};
                parser(ise_event_time);
            };

            rewrite(r_set_splunk_default);
            

            rewrite {
                set("t_ise_message", value(".splunk.sc4s_template"));
            };   

        } else {
            rewrite {
                set("t_hdr_msg", value(".splunk.sc4s_template"));
                set("1", value(".gb.complete"));
            };   
        };            
       
        rewrite {
            r_set_splunk_dest_default(
                index('netauth')
                sourcetype('cisco:ise:syslog')
                vendor_product("cisco_ise")
            );                                                                    
        };   
        
        rewrite {r_set_destinations(group("CISCO_ISE"))};                    
        parser {p_add_context_splunk(key("${fields.sc4s_vendor_product}")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template})" value("MSG")); };

        rewrite { 
                set("null_queue", value("fields.sc4s_vendor_product") condition("${.gb.complete}" ne "1"));    
        };


   };
};
application cisco_ise[syslog] {
	filter { 
        program('CISE_' type(string) flags(prefix));
    };	
    parser { cisco_ise-parser(); };   
};

