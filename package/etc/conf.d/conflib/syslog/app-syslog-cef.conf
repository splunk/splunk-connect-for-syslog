parser p_cef_kv {
    python(
        class("parser_cef.cef_kv")
    );
};


parser p_cef_ts_rt {
    date-parser-nofilter(format(
                '%s.%f',
                '%s',
                '%b %d %T',
                '%b %d %T UTC',
                '%b %d %T %Z',
                '%b %d %Y %T',
                '%b %d %Y %T UTC',
                '%b %d %Y %T %Z',
                )
                template("${.values.rt}")
    );
};
parser p_cef_ts_end {
    date-parser-nofilter(format(
                '%s.%f',
                '%s',
                '%b %d %T',
                '%b %d %T UTC',
                '%b %d %T %Z',
                '%b %d %Y %T',
                '%b %d %Y %T UTC',
                '%b %d %Y %T %Z',
                )
                template("${.values.end}")
    );
};

block parser app-syslog-cef() {
 channel {
        rewrite {
            r_set_splunk_dest_default(
                index('main')
                sourcetype('cef')
                vendor("cef")
                product('generic')
            );

        };
        if (message('CEF:0', type('string') flags(prefix))) {
            rewrite{
                unset(value('PROGRAM'));
            };
        };
        if (program('CEF:0', type('string') flags(prefix))) {
            rewrite{
                set('${.values.message}' value('MESSAGE'));
                unset(value('PROGRAM'));
            };
        };
        if {
            parser {
                regexp-parser(
                    prefix(".tmp.")
                    patterns('^(?<preamble>(?!-)[a-zA-Z-\/0-9\.]+).*(?<message>CEF:0.*)')
                );
            };
            rewrite {
                set('${.tmp.message}' value('MESSAGE'));
                set('${.tmp.preamble}' value('HOST'));
            };
        };


        if ("`SC4S_DISABLE_DROP_INVALID_CEF`" eq "yes") {
           parser {
               csv-parser(
                 delimiters(chars('') strings('|'))
                 columns('version', 'device_vendor', 'device_product', 'device_version', 'device_event_class', 'name', 'severity', 'ext')
                 prefix('.metadata.cef.')
                 flags(greedy));
        };
        } elif {
            parser {
	           csv-parser(
                    delimiters(chars('') strings('|'))
                    columns('version', 'device_vendor', 'device_product', 'device_version', 'device_event_class', 'name', 'severity', 'ext')
                    prefix('.metadata.cef.')
                    flags(greedy, drop-invalid));
        };
        } else {};
        parser(p_cef_kv);
        rewrite {
            unset(value('.metadata.cef.ext'));
            set-tag("isStructured");
            r_set_splunk_dest_default(
                vendor('${.metadata.cef.device_vendor}')
                product('${.metadata.cef.device_product}')
                class('${.metadata.cef.device_event_class}')
                template('t_hdr_msg')
            );
        };

        # We already have the syslog msg time stamp however that may not be the best one
        # If we have an rt or end field that is best we use the If trick here so if this parser fails
        # We don't get sent to fallback.
        if {
            # 12 digit epoch timestamps are non-standard; when used they often indicate the fields are misused
            # Non-standard strptime formats also choke the syslog-ng date parser, which outputs wildy random timestamps
            # Simply filter and ignore
            filter{
                match('^\d{12}', value('.values.start')) or match('^\d{12}', value('.values.end')) or match('^\d{12}', value('.values.rt'));
            };
        } elif {
            filter{
                match('^.', value('.values.rt'))
            };
            parser (p_cef_ts_rt);
        } elif {
            filter{
                match('^.', value('.values.end'))
            };
            parser (p_cef_ts_end);
        } else { };

        #Do nothing this is allows for both rt and end to be missing and still pass with the message ts
        rewrite {
            set(
                "${.values.dvchost}",
                value("HOST")
                condition("${.values.dvchost}" ne "")
            );
        };
        # CEF TAs use the source as their bounds in props.conf
        # CEF source entries in splunk_metadata.csv should reflect the proper source as well as sourcetype

        if {
            parser { app-parser(topic(cef)); };
        };


   };
};

application app-syslog-cef-pgm[sc4s-syslog-pgm] {
	filter {
        program('CEF' type(string) flags(prefix));
    };
    parser { app-syslog-cef(); };
};

application app-syslog-cef[sc4s-syslog] {
	filter {
        message('CEF:0' type(string) flags(substring));
    };
    parser { app-syslog-cef(); };
};