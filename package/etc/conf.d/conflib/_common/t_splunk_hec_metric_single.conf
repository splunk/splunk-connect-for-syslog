
python {
import syslogng
import json
from io import StringIO

def splunk_hec_metric_single(log_message):
        logger = syslogng.Logger()
        logger.debug(log_message)
        output = StringIO()

        mb = {}
        mb['time']=log_message.get_as_str('S_UNIXTIME', '', repr='internal')
        mb['host']=log_message.get_as_str('HOST', '').lower()
        mb['source']=log_message.get_as_str('.splunk.source', '')
        mb['sourcetype']=log_message.get_as_str('.splunk.sourcetype', '')
        mb['index']=log_message.get_as_str('.splunk.index', '')
        mb['fields']={}
        for field in log_message.keys():
            dfield = field.decode("utf-8")
            if dfield.startswith('fields.'):
                    sfield=dfield[7:]
                    mb['fields'][sfield]=log_message.get_as_str(field, '', repr='internal')



        rawmetrics = log_message.get_as_str('MESSAGE', '').rstrip(", ").split(", ")
        feed = False
        for rm in rawmetrics:

                metric, locator = rm.split("=", 1)
                if metric != "not_matched":
                        m = mb.copy()

                        locator, value = locator.strip("'").split("=")
                        t, instance = locator.split("(", 1)
                        instance = (
                                instance.rstrip(")")
                                .replace("(", "_")
                                .replace("/services/collector/event", "")
                                .replace(".", "_")
                                .replace(",", ".")
                                .replace(":", "_")
                                .replace("//", "_")
                                .replace("/", "_")
                                .replace("-", "_")
                                .replace("#", "")
                        )

                        result = f"{t}.{instance}.{metric.replace('.', '_')}={value}"
                        m['fields']["metric_name"]=f"spl.sc4syslog.{t}.{instance}.{metric.replace('.', '_')}"
                        m['fields']["_value"] = value
                        if feed:
                                output.write("\n")
                        feed=True
                        output.write(json.dumps(m))

        message = output.getvalue()
        logger.debug(message)
        return message
};

template t_splunk_hec_metric_single {
    template('$(python splunk_hec_metric_single)');
};
