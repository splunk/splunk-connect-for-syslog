#Used to set indexed fields we will always use to global defaults
rewrite r_set_splunk_default {
    channel {
        rewrite
        {
            set("sc4s", value(".splunk.source") condition(not match('^.' value('.splunk.source'))));
            set("sc4s:unknown", value(".splunk.sourcetype") condition(not match('^.' value('.splunk.sourcetype'))));
            set("main", value(".splunk.index") condition(not match('^.' value('.splunk.index'))));

            set("`SC4S_CONTAINER_HOST`", value("fields.sc4s_loghost") condition('`SC4S_CONTAINER_HOST`' ne ""));
            set($DESTPORT, value("fields.sc4s_destport") condition(match('destport' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring)) ));
            set($LOGHOST, value("fields.sc4s_container") condition(match('container' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring)) ));
            set($SOURCEIP, value("fields.sc4s_fromhostip") condition(match('fromhostip' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring)) ));
            set($R_UNIXTIME, value("fields.sc4s_recv_time") condition(match('r_unixtime' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring)) ));
        };

        if ("$PROTO" == 6) {
            rewrite { set("TCP", value("fields.sc4s_proto") condition(match('proto' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring)) )); };
        } elif ("$PROTO" == 17) {
            rewrite { set("UDP", value("fields.sc4s_proto") condition(match('proto' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring)) )); };
        } else {
            rewrite { set($PROTO, value("fields.sc4s_proto") condition(match('proto' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring)) )); };
        };
    };
};
#used by each log-path to set source and sourcetype which may be
#overridden by user defined values
block rewrite r_set_splunk_dest_default(
                              #While the following is not used it remains to prevent breaking changes in content
                              index("main")
                              source("${.splunk.source}")
                              sourcetype("${.splunk.sourcetype}")
                              template('$(if (tags("wireformat:rfc5424")) "t_5424_hdr_sdata_compact" "t_hdr_msg")')
                              tags("default")
                              vendor("${fields.sc4s_vendor}")
                              product("${fields.sc4s_product}")
                              class("${fields.sc4s_class}")
                           ) {
    set("`index`", value(".splunk.index"));
    set("`source`", value(".splunk.source"));
    set("`sourcetype`", value(".splunk.sourcetype"));
    set("`template`", value(".splunk.sc4s_template"));
    set("`vendor`", value("fields.sc4s_vendor") condition('`vendor`' ne ""));
    set("`product`", value("fields.sc4s_product") condition('`product`' ne ""));
    set("`class`", value("fields.sc4s_class") condition('`class`' ne ""));
};


block rewrite r_set_splunk_dest_update(
                              #While the following is not used it remains to prevent breaking changes in content
                              index("${.splunk.index}")
                              source("${.splunk.source}")
                              sourcetype("${.splunk.sourcetype}")
                              template("${.splunk.sc4s_template}")
                              template_hec("${.splunk.sc4s_hec_template}")
                              vendor("${fields.sc4s_vendor}")
                              product("${fields.sc4s_product}")
                              class("${fields.sc4s_class}")
                              tag("")
                              condition("1" eq "1")
                           ) {
    channel {
        if (`condition`){
            rewrite {
                set("`index`", value(".splunk.index"));
                set("`source`", value(".splunk.source"));
                set("`sourcetype`", value(".splunk.sourcetype"));
                set("`template`", value(".splunk.sc4s_template"));
                set("`template_hec`", value(".splunk.sc4s_hec_template"));
                set("`vendor`", value("fields.sc4s_vendor") condition('`vendor`' ne ""));
                set("`product`", value("fields.sc4s_product") condition('`product`' ne ""));
                set("`class`", value("fields.sc4s_class") condition('`class`' ne ""));
            };
        };
        if {
            filter {
                "`vendor`" eq "null"
            };
            rewrite(r_set_dest_splunk_null_queue);
        };
        flags(final);
    };
};

block rewrite r_set_splunk_dest_update_v2(
                              #While the following is not used it remains to prevent breaking changes in content
                              index("${.splunk.index}")
                              source("${.splunk.source}")
                              sourcetype("${.splunk.sourcetype}")
                              template("${.splunk.sc4s_template}")
                              template_hec("${.splunk.sc4s_hec_template}")
                              class("${fields.sc4s_class}")
                              tags("")
                              condition("1" eq "1")
                           ) {
    channel {
        if (`condition`){
            rewrite {
                set("`index`", value(".splunk.index"));
                set("`source`", value(".splunk.source"));
                set("`sourcetype`", value(".splunk.sourcetype"));
                set("`template`", value(".splunk.sc4s_template"));
                set("`template_hec`", value(".splunk.sc4s_hec_template"));
                set("`class`", value("fields.sc4s_class") condition('`class`' ne ""));
            };
        };
        flags(final);
    };
};

rewrite r_set_dest_splunk_null_queue{
    set-tag("dest_splunk:null_queue");
};
#
filter f_is_dest_splunk_null_queue{
    tags("dest_splunk:null_queue");
};
#

rewrite r_set_source_identified{
    set-tag("source_identified");
};
#
filter f_is_source_identified{
    tags("source_identified");
};

filter f_is_agg{
    tags("agg");
};
