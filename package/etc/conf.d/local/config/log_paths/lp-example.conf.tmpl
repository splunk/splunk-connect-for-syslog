# LOCAL_EXAMPLE
# DO NOT MODIFY THIS EXAMPLE DIRECTLY!  It will get overwritten with the shipping example
# version each time SC4S starts. Copy this file to another name for development work.

{{- /* To start, gomplate comments use the C++ style comment syntax you see here, enclosed by */}}
{{- /* curly braces. They will _not_ appear in the final syslog-ng config files.  */}}
{{- /* Comments using this format will be specific to the templating process  */}}

# This comment, on the other hand, _will_ appear in the final syslog-ng config.
# Comments using this style will be relevant to the actual syslog-ng config files,
# independent of the templating process.

{{- /* When creating a real plugin, replace the upper case text "LOCAL_EXAMPLE" throughout */}}
{{- /* this file with a unique string to identify the vendor product.  The string should be */}}
{{- /* of the form "VENDOR_PRODUCT" to signify the manufacturer and product type, and must */}}
{{- /* contain only characters matching this regex: [A-Z\_]+ */}}

{{- /* If any of the "LOCAL_EXAMPLE" variables passed into the environment are set */}}
{{- /* (e.g. TLS, UDP, or TLS), the template generator will build a custom source based */}}
{{- /* on the value of one or more of the set variables. */}}

{{- /* "port_id" is used to generate the port variable to be used. It should match the */}}
{{- /* "core" of the variable name set in the line above.  For example, the "port_id" of */}}
{{- /* "SC4S_LISTEN_LOCAL_EXAMPLE_TCP_PORT" is "LOCAL_EXAMPLE". "parser" can be customized */}}
{{- /* on dedicated ports only. "common" uses the same parser sequence as the default ports */}}
{{- /* and is the most commonly used */}}

{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "LOCAL_EXAMPLE" "parser" "common" }}
{{- tmpl.Exec "t/source_network.t" $context }}

{{- /* Filters or parsers used by the log path should be declared prior to use */}}
{{- /* above the actual log{} stanza) */}}

filter f_local_example {
    program(sc4splugin);
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_LOCAL_EXAMPLE_TCP_PORT")) (getenv  (print "SC4S_LISTEN_LOCAL_EXAMPLE_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_LOCAL_EXAMPLE_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for LOCAL_EXAMPLE traffic
            source (s_LOCAL_EXAMPLE);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for LOCAL_EXAMPLE traffic
            source (s_DEFAULT);
            filter(f_is_rfc3164);
            filter(f_local_example);
            flags(final);
        };
    };

# Set a default sourcetype and index, as well as an appropriate value for the field
# "sc4s_vendor_product".  This field is sent as an indexed field to Splunk,
# and is useful for downstream analysis.

    rewrite {
        set("local_example", value("fields.sc4s_vendor_product"));
        r_set_splunk_dest_default(sourcetype("sc4s:local_example"));
    };

# using the key "local_example" find any customized index,source or sourcetype meta values
    parser { p_add_context_splunk(key("local_example")); };

# using any user-supplied filters, override Splunk metadata based on further hostname
# or CIDR block filters.
    parser (compliance_meta_by_source);

# Prepare the payload for sending to Splunk. This step is done here rather than in the
# destination(s) to ensure that it is performed only once.  If the template value is not overridden,
# the default value (2nd argument) is used.
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };

{{- /* Check environment variables (and defaults if unset) for sending to the HEC */}}
{{- /* destination. When more destination options are offered in SC4S, this is where */}}
{{- /* output to them will be configured */}}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_LOCAL_EXAMPLE_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- /* Check environment variables (and defaults if unset) for sending to the local EWMM-format */}}
{{- /* disk archive */}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_LOCAL_EXAMPLE" "no")) }}
    destination(d_archive);
{{- end}}

{{- /* Check environment variables for sending to a global list of alternate destinations */}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- /* Check environment variables for sending to a list of alternate destinations only for this specific source */}}

{{- if (print (getenv "SC4S_DEST_LOCAL_EXAMPLE_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_LOCAL_EXAMPLE_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}


# All passes through any matching log path will be final
    flags(flow-control,final);
};
