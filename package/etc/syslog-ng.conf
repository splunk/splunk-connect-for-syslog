@version:3.22

# syslog-ng configuration file.
#
# This should behave pretty much like the original syslog on RedHat. But
# it could be configured a lot smarter.
#
# See syslog-ng(8) and syslog-ng.conf(5) for more information.
#

#
# ===============================================================================================
# Global Options
# ===============================================================================================

options {
        log_msg_size (65536);
        flush_lines (0);
        time_reopen (10);
        log_fifo_size (10000);
        chain_hostnames (off);
        use_dns (no);
        use_fqdn (no);
        dns-cache(no);
        create_dirs (no);
        keep-hostname (yes);
};

# ===============================================================================================
# Defaults for remote data collection and transport to Splunk
# Kafka brokers/topics, HEC URL/token, local log directory for UF, sourcetype, and index
# These can be overridden in individual filter (f_*.conf) files
# ===============================================================================================

# ===============================================================================================
# Source driver defaults (which govern the parser used)
# ===============================================================================================
@define splunk-udp-driver "syslog"
@define splunk-tcp-driver "network"

# ===============================================================================================
# Listening ports
# ===============================================================================================
@define udp-listening-port "514"
@define tcp-listening-port "514"

# ===============================================================================================
# UF transport
# ===============================================================================================
@define splunk-log-root "/var/log/syslog-ng/data"
@define splunk-user "splunk"     # owner of the local disk files
@define splunk-group "splunk"    # group of the local disk files

# ===============================================================================================
# Kafka transport
# ===============================================================================================
@define kafka-implementation "kafka-c"
@define splunk-kafka-brokers "127.0.0.1:9092"
@define splunk-kafka-topic "syslog"

# ===============================================================================================
# HEC transport
# ===============================================================================================
@define splunk-hec-url '"https://splunk:8088/services/collector/event"'
@define splunk-hec-token "a778f63a-5dff-4e3c-a72c-a03183659e94"
@define worker-threads 3
# ===============================================================================================
# Splunk metadata (HEC/Kafka transport only)
# ===============================================================================================
@define splunk-sourcetype "syslog:fallback"
@define splunk-index "syslogng_fallback"

# ===============================================================================================
# Default message template
# ===============================================================================================
@define splunk-default-template "t_standard"

# ===============================================================================================
# Data collection parameters, buffers, and Timezone
# ===============================================================================================
@define ip-version 4
@define splunk-max-connections 1000
@define splunk-log-fifo-size 10000
@define splunk-fetch-limit 100
# make sure splunk-window-size >= splunk-max-connections * splunk-fetch-limit
@define splunk-window-size 100000
@define splunk-rcvbuf 425984
@define default-timezone "GMT"

# ===============================================================================================
# Global modules and includes.  All device-specific filters and destinations exist in conf.d
# Order is important; templates must be loaded first
# ===============================================================================================
@include "scl.conf"
@include "conf.d/templates/*.conf"
@include "conf.d/sources/*.conf"
@include "conf.d/blocks/*.conf"
@include "conf.d/destinations/*.conf"

parser p_add_context__sourcetype_pan_traffic {
    add-contextual-data(
        selector("pan:traffic"),
        database("context/splunk_index.csv"),
        prefix(".context.")
    );
};
parser p_add_context__sourcetype_pan_threat {
    add-contextual-data(
        selector("pan:threat"),
        database("context/splunk_index.csv"),
        prefix(".context.")
    );
};

log {
    source(s_default-ports);

    junction {
        channel {
           if {
                parser { syslog-parser(time-zone(`default-timezone`)); };

                filter { message(',\d+,(THREAT|TRAFFIC|SYSTEM|CONFIG|HIPWATCH|CORRELATION|USERID),')
                    ;};

                if (message(',\d+,THREAT,')) {
                    parser(p_add_context__sourcetype_pan_threat);
                    #rewrite { r_set_splunk(vendor("paloalto"))}; #--UF--
                    #destination(d_splunk_logfile);  #--UF--
                    rewrite { r_set_splunk(sourcetype("pan:threat") index(${.context.index}) template("t_everything")) }; #--HEC--
                    destination(d_hec);  #--HEC--
                    #rewrite { r_set_splunk(sourcetype("pan:threat") template("t_everything")) }; #--KAFKA--
                    #destination(d_kafka);  #--KAFKA--
                } elif (message(',\d+,TRAFFIC,')) {
                    parser(p_add_context__sourcetype_pan_traffic);
                    #rewrite { r_set_splunk(vendor("paloalto"))}; #--UF--
                    #destination(d_splunk_logfile);  #--UF--
                    rewrite { r_set_splunk(sourcetype("pan:traffic") index(${.context.index}) template("t_everything")) }; #--HEC--
                    destination(d_hec);  #--HEC--
                    #rewrite { r_set_splunk(sourcetype("pan:traffic") template("t_everything")) }; #--KAFKA--
                    #destination(d_kafka);  #--KAFKA--
                } elif (message(',\d+,SYSTEM,')) {
                    #rewrite { r_set_splunk(vendor("paloalto"))}; #--UF--
                    #destination(d_splunk_logfile);  #--UF--
                    rewrite { r_set_splunk(sourcetype("pan:system") template("t_everything")) }; #--HEC--
                    destination(d_hec);  #--HEC--
                    #rewrite { r_set_splunk(sourcetype("pan:system") template("t_everything")) }; #--KAFKA--
                    #destination(d_kafka);  #--KAFKA--
                    flags(final);
                } elif (message(',\d+,CONFIG,')) {
                    #rewrite { r_set_splunk(vendor("paloalto"))}; #--UF--
                    #destination(d_splunk_logfile);  #--UF--
                    rewrite { r_set_splunk(sourcetype("pan:config") template("t_everything")) }; #--HEC--
                    destination(d_hec);  #--HEC--
                    #rewrite { r_set_splunk(sourcetype("pan:config") template("t_everything")) }; #--KAFKA--
                    #destination(d_kafka);  #--KAFKA--
                } elif (message(',\d+,HIPWATCH,')) {
                    #rewrite { r_set_splunk(vendor("paloalto"))}; #--UF--
                    #destination(d_splunk_logfile);  #--UF--
                    rewrite { r_set_splunk(sourcetype("pan:hipwatch") template("t_everything")) }; #--HEC--
                    destination(d_hec);  #--HEC--
                    #rewrite { r_set_splunk(sourcetype("pan:hipwatch") template("t_everything")) }; #--KAFKA--
                    #destination(d_kafka);  #--KAFKA--
                } elif (message(',\d+,CORRELATION,')) {
                    #rewrite { r_set_splunk(vendor("paloalto"))}; #--UF--
                    #destination(d_splunk_logfile);  #--UF--
                    rewrite { r_set_splunk(sourcetype("pan:correlation") template("t_everything")) }; #--HEC--
                    destination(d_hec);  #--HEC--
                    #rewrite { r_set_splunk(sourcetype("pan:correlation") template("t_everything")) }; #--KAFKA--
                    #destination(d_kafka);  #--KAFKA--
                } elif (message(',\d+,USERID,')) {
                    #rewrite { r_set_splunk(vendor("paloalto"))}; #--UF--
                    #destination(d_splunk_logfile);  #--UF--
                    rewrite { r_set_splunk(sourcetype("pan:userid") template("t_everything")) }; #--HEC--
                    destination(d_hec);  #--HEC--
                    #rewrite { r_set_splunk(sourcetype("pan:userid") template("t_everything")) }; #--KAFKA--
                    #destination(d_kafka);  #--KAFKA--
                } else {
                    #rewrite { r_set_splunk(vendor("paloalto"))}; #--UF--
                    #destination(d_splunk_logfile);  #--UF--
                    rewrite { r_set_splunk(sourcetype("pan:unknown") template("t_everything")) }; #--HEC--
                    destination(d_hec);  #--HEC--
                    #rewrite { r_set_splunk(sourcetype("pan:unknown") template("t_everything")) }; #--KAFKA--
                    #destination(d_kafka);  #--KAFKA--
                };
           flags(final);
           };

        };
        channel {
            #rewrite { r_set_splunk(template("t_msg_only"))}; #--UF--
            #destination(d_splunk_logfile);  #--UF--
            rewrite { r_set_splunk(template("t_JSON"))}; #--HEC--
            destination(d_hec);  #--HEC--
            #rewrite { r_set_splunk(template("t_msg_only"))}; #--KAFKA--
            #destination(d_kafka);  #--KAFKA--
            flags(final);
        };

    };
};


