@version:3.22

# syslog-ng configuration file.
#
# This should behave pretty much like the original syslog on RedHat. But
# it could be configured a lot smarter.
#
# See syslog-ng(8) and syslog-ng.conf(5) for more information.
#

#
# ===============================================================================================
# Global Options
# ===============================================================================================

options {
        log_msg_size (65536);
        flush_lines (100);
        time_reopen (10);
        log_fifo_size (10000);
        chain_hostnames (off);
        use_dns (no);
        use_fqdn (no);
        create_dirs (no);
        keep-hostname (yes);
        create_dirs(yes);
        dir_perm(0750);
        stats-freq(30);
        stats-level(1);
        stats-max-dynamics(2000);
        normalize-hostnames(yes);
        on-error(fallback-to-string);
};

# ===============================================================================================
# Source driver defaults (which govern the parser used)
# ===============================================================================================
@define splunk-udp-driver "syslog"
@define splunk-tcp-driver "network"

# ===============================================================================================
# Listening ports
# ===============================================================================================
@define udp-listening-port "514"
@define tcp-listening-port "514"

# ===============================================================================================
# Splunk metadata (HEC/Kafka transport only)
# ===============================================================================================
@define splunk-sourcetype "syslog:fallback"
@define splunk-index "main"

# ===============================================================================================
# Default message template
# ===============================================================================================
@define splunk-default-template "t_standard"

# ===============================================================================================
# Data collection parameters, buffers, and Timezone
# ===============================================================================================
@define ip-version 4
@define splunk-max-connections 1000
@define splunk-log-fifo-size 180000000
@define splunk-fetch-limit 20000
# make sure splunk-window-size >= splunk-max-connections * splunk-fetch-limit
@define splunk-window-size 20000000
@define splunk-rcvbuf 425984
@define default-timezone "GMT"

# ===============================================================================================
# Global modules and includes.  All device-specific filters and destinations exist in conf.d
# Order is important; templates must be loaded first
# ===============================================================================================
@include "scl.conf"
@include "conf.d/templates/*.conf"
@include "conf.d/sources/*.conf"
@include "conf.d/blocks/*.conf"
@include "conf.d/destinations/*.conf"

log {
    source(s_internal);

    if (match("^Log statistics; " value("MESSAGE"))) {

        parser {p_add_context_splunk(key("syslog-ng:metrics")); };
        rewrite {
            subst('(?:Log statistics; )?(?<Type>[^= ]+)=\x27(?<SourceName>[^\(]+)\((?<SourceId>[^,\)]+)(?:,(?<SourceInstance>[^,]+),(?<State>[^\)]+))?\)\=(?<Number>\d+)\x27(?:, )?',
                    '
                    {"time": "$S_UNIXTIME.$S_MSEC",
                      "event": "metric",
                      "host": "$HOST",
                      "index": "${.splunk.index}",
                      "source": "internal",
                      "sourcetype": "${.splunk.sourcetype}",
                      "fields": {
                         "source_name": "${SourceName}",
                         "source_instance": "${SourceInstance}",
                         "state": "${State}",
                         "type": "${Type}",
                         "_value": ${Number},
                         "metric_name": "syslogng.${SourceId}"
                       }
                     }
                     ',
                     value("MESSAGE") flags("utf8" "global")
                  );
        };
        destination(d_hecmetrics);  #--HEC--
    } else {
        parser {p_add_context_splunk(key("syslog-ng:events")); };
        rewrite {r_set_splunk_basic(template("t_msg_only")) }; #--HEC--
        destination(d_hec);  #--HEC--
    };
    flags(final);
};


@include "conf.d/prefilters/*.conf"
@include "conf.d/filters/*.conf"

@include "conf.d/plugin/*/blocks/*.conf"
@include "conf.d/plugin/*/prefilters/*.conf"
@include "conf.d/plugin/*/filters/*.conf"

log {
    source(s_default-ports);
    parser {p_add_context_splunk(key("syslog-ng:fallback")); };
    rewrite { r_set_splunk(template("t_JSON"))}; #--HEC--
    destination(d_hec);  #--HEC--
    flags(flow-control,fallback);
};


