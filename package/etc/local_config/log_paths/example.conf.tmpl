# LOCAL_EXAMPLE

# When creating a real plugin, replace the upper case text "LOCAL_EXAMPLE" throughout this file with a unique 
# string to identify the vendor product.  The string should be of the form "VENDOR_PRODUCT" to signify the
# manufacturer and product type, and must contain only characters matching this regex: [A-Z\_]+

# If any of the "LOCAL_EXAMPLE" variables passed into the environment are set (e.g. TLS, UDP, or TLS),
# the template generator will build a custom source based on the value of one or more of the set variables.


# "port_id" is used to generate the port variable to be used. It should match the "core" of the variable name
# set in the line above.  For example, the "port_id" of "SC4S_LISTEN_LOCAL_EXAMPLE_TCP_PORT" is "LOCAL_EXAMPLE".
# "parser" can be customized on dedicated ports only
# "common" uses the same parser sequence as the default ports and is the most commonly used


# The following template execution creates a syslog-ng source with one or more dedicated ports for use with this log_path
# The ports used are based on the values of one or more of the environment variables set above.

{{ $context := dict "port_id" "LOCAL_EXAMPLE" "parser" "common" }}
{{ tmpl.Exec "t/source_network.t" $context }}
# The following is an inline template; we will use this to generate the actual log path
{{ define "log_path" }}
log {
{{- if eq (.) "yes"}}
    source(s_DEFAULT);
    filter(f_is_rfc3164);
    filter(f_local_example);
{{- end}}
{{- if eq (.) "no"}}
    source (s_LOCAL_EXAMPLE);
{{- end}}


# The first time this template is used the log_path will be linked to the default port

# Filters should be updated to use the simplest and most effecient logic possible to discard
# the message from this path

# In the second pass through the template a link to the dedicated port is used. This
# normally does not require additional filters


#Set a default sourcetype and index
    
    rewrite { r_set_splunk_dest_default(sourcetype("sc4s:local_example"), index("main"))};
    
#using the key "local_example" find any cutomized index,source or sourcetype meta values
    
    parser {p_add_context_splunk(key("local_example")); };

# Any additional logic needed to process the event before sending to Splunk goes here

# Send it to Splunk

    destination(d_hec);

# Note: We normally do not use the "final" flag; this will allow another plugin to be created that will
# forward events to another system

    flags(flow-control);

};
{{- end}}

{{- if or (or (getenv  (print "SC4S_LISTEN_LOCAL_EXAMPLE_TCP_PORT")) (getenv  (print "SC4S_LISTEN_LOCAL_EXAMPLE_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_LOCAL_EXAMPLE_TLS_PORT")) }}
# Listen on the specified dedicated port(s) for LOCAL_EXAMPLE traffic

{{tmpl.Exec "log_path" "no" }}
{{- end}}

# Listen on the default port (typically 514) for LOCAL_EXAMPLE traffic

{{tmpl.Exec "log_path" "yes" }}
