
source s_{{ port_id }} {
    {%- if port_udp[0] != "disabled" or port_tcp[0] != "disabled"  or port_tls[0] != "disabled" %}
    channel {
        source {
            # List UDP for any format
            {%- for port in port_udp %}
            {%- if port != "disabled" %}
            {%- for i in range(1, port_udp_sockets+1) %}
            network (
                transport("udp")
                so-reuseport(1)
                persist-name("{{ port_id }}_{{ port }}_{{ i }}")
                port({{ port }})
                ip-protocol({{ enable_ipv6 }})
                {%- if port_udp_sorecvbuff >0 %}
                so-rcvbuf({{ port_udp_sorecvbuff }})
                {%- endif %}
                {%- if use_udp_log_iw == True %}
                log-iw-size({{ port_udp_log_iw_size }})
                log-fetch-limit({{ port_udp_log_fetch_limit }})
                {%- endif %}
                keep-hostname(yes)
                keep-timestamp(yes)
                use-dns(no)
                use-fqdn(no)
                chain-hostnames(off)
                flags(validate-utf8, no-parse {%- if store_raw_message %} store-raw-message{% endif %})
            );
            {%- endfor %}
            {%- endif %}
            {%- endfor %}

            # List TCP for any format
            {%- for port in port_tcp %}
            {%- if port != "disabled" %}
            {%- for i in range(1,port_tcp_sockets+1) %}
            network (
                {%- if use_proxy_connect == True %}
                transport("proxied-tcp")
                {%- else %}
                transport("tcp")
                {%- endif %}
                so-reuseport(1)
                port({{ port }})
                persist-name("{{ port_id }}_tcp_{{ port }}_{{ i }}")
                ip-protocol({{ enable_ipv6 }})
                max-connections({{ port_tcp_max_connections }})
                log-iw-size({{ port_tcp_log_iw_size }})
                log-fetch-limit({{ port_tcp_log_fetch_limit }})
                {%- if port_tcp_so_recvbuff >0 %}
                so-rcvbuf({{ port_tcp_so_recvbuff }})
                {%- endif %}
                keep-timestamp(yes)
                use-dns(no)
                use-fqdn(no)
                chain-hostnames(off)
                flags(validate-utf8, no-parse {%- if store_raw_message %} store-raw-message{% endif %})
            );
            {%- endfor %}
            {%- endif %}
            {%- endfor %}

            # List TLS for any format
            {%- for port in port_tls %}
            {%- if port != "disabled" and use_tls %}
            {%- for i in range(1,port_tls_sockets+1) %}
            network (
                {%- if use_proxy_connect == True %}
                transport("proxied-tls")
                {%- else %}
                transport("tls")
                {%- endif %}
                so-reuseport(1)
                port({{ port }})
                persist-name("{{ port_id }}_tls_{{ port }}_{{ i }}")
                ip-protocol({{ enable_ipv6 }})
                max-connections({{ port_tcp_max_connections }})
                log-iw-size({{ port_tcp_log_iw_size }})
                log-fetch-limit({{ port_tcp_log_fetch_limit }})
                {%- if port_tcp_so_recvbuff >0 %}
                so-rcvbuf({{ port_tcp_so_recvbuff }})
                {%- endif %}

                keep-timestamp(yes)
                use-dns(no)
                use-fqdn(no)
                chain-hostnames(off)
                flags(validate-utf8, no-parse {%- if store_raw_message %} store-raw-message{% endif %})
                tls(
                    allow-compress(yes)
                    key-file("{{ tls_dir }}/{{ key_file }}")
                    cert-file("{{ tls_dir }}/{{ cert_file }}")
                    ssl-options({{ port_tls_tls_options }})
                    cipher-suite("{{ port_tls_cipher_suit }}")
                    peer-verify(no)
                )
            );
            {%- endfor %}
            {%- endif %}
            {%- endfor %}
        };

        {%- if vendor and product %}
        parser {
            p_set_netsource_fields(
                vendor('{{ vendor }}')
                product('{{ product }}')
            );
        };
        {%- endif %}
        if {
            if {
                parser {
                    syslog-parser(
                        drop-invalid(yes)
                        flags(syslog-protocol, assume-utf8, no-rfc3164-fallback)
                    );
                };
                rewrite(set_rfc);
                rewrite(set_rfc5424);
            } elif {
                #Because 3164 is not a standard we can't test for conformance. We need to first see if we
                #Have anything that would be better this is not free the more we add here over time the worse perf will get
                #Sadly there is little choice in the matter so pay attention to the regex and hand optimize
                if {
                    filter{
                        message('^\<\d+\>')
                    };

                    if {
                        #3164 has PRI
                        parser {
                            syslog-parser(
                                drop-invalid(yes)
                                flags(assume-utf8, guess-timezone));
                        };
                        rewrite(set_rfc);
                        rewrite(set_rfc3164);
                    };
                    if {
                        filter{
                            host('^slot\d+\/')
                        };
                        if {
                            parser {
                                regexp-parser(
                                    prefix(".tmp.")
                                    template("$HOST")
                                    patterns('^(?<slot>.*)\/(?<host>.*)')
                                );
                            };
                            rewrite {
                                set('${.tmp.slot}' value('.metadata.header.slot'));
                                set('${.tmp.host}' value('HOST'));
                            };
                        };
                    };
                    if {
                        filter(f_is_rfc3164);
                        filter{
                            not host('^[a-zA-Z0-9_\-\.]+$')
                        };
                        rewrite {
                            set("${HOST} $(template t_hdr_msg)" value("MSG"));
                            unset(value("LEGACY_MSGHDR"));
                            unset(value("PID"));
                            unset(value("PROGRAM"));
                            set('$SOURCEIP' value('HOST'));
                        };
                    };

                } elif {
                    #Try raw parsers remind customers these vendors need to improve
                    parser(app-group-sc4s-raw);
                    rewrite{
                        groupunset(values('.tmp.*'));
                    };
                } else {};
            };

            if {
                filter(f_host_is_nil_or_ip);
                if {
                    parser(p_add_context_host);
                };
                {%- if use_namecache == True %}
                if {
                    filter(f_host_is_nil_or_ip);
                    parser(p_host_cache);
                };
                {%- endif %}
                {%- if use_reverse_dns == True %}
                if {
                    filter(f_host_is_nil_or_ip);
                    parser(p_fix_host_resolver);
                };
                {%- endif %}
            };
            rewrite {
                set('$(lowercase "$HOST")' value(HOST));
            };
            {%- if not vendor or not product %}
            {%- if use_vpscache == True %}
            if {
                parser(p_vpst_cache);
            };
            {%- endif %}
            if {
                parser(vendor_product_by_source);
            };
            {%- endif %}

        };
        rewrite {
            groupunset(values('.tmp.*'));
        };

        if {
            filter {
                not filter(f_is_source_identified);
            };
            parser(app-group-sc4s-fallback);
        };

        if {
            filter {
                match("." value(".netsource.sc4s_time_zone") )
            };
            rewrite {
                fix-time-zone("${.netsource.sc4s_time_zone}");
                unset(value(".netsource.sc4s_time_zone"));
            };
        };


        rewrite {
            set($FACILITY, value("fields.sc4s_syslog_facility") condition(match('facility' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring))));
            set($LEVEL, value("fields.sc4s_syslog_severity") condition(match('severity' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring)) ));
        };
    };
    {%- endif %}

    {%- if port_5426[0] != "disabled" or port_5425[0] != "disabled"  or port_6587[0] != "disabled"  %}
    channel {
        source {
            # List UDP for RFC5426
            {%- for port in port_5426 %}
            {%- if port != "disabled" %}
            {%- for i in range(1,port_5426_sockets+1) %}
            syslog (
                transport("udp")
                so-reuseport(1)
                persist-name("{{ port_id }}_5426_{{ port }}_{{ i }}")
                port({{ port }})
                ip-protocol({{ enable_ipv6 }})
                {%- if port_5426_sorecvbuff >0 %}
                so-rcvbuf({{ port_5426_sorecvbuff }})
                {%- endif %}
                keep-hostname(yes)
                keep-timestamp(yes)
                use-dns(no)
                use-fqdn(no)
                chain-hostnames(off)
                flags(validate-utf8)
            );
            {%- endfor %}
            {%- endif %}
            {%- endfor %}

            # List 6587 for any format
            {%- for port in port_6587 %}
            {%- if port != "disabled" %}
            {%- for i in range(1,port_6587_sockets+1) %}
            syslog (
                {%- if use_proxy_connect == True %}
                transport("proxied-tcp")
                {%- else %}
                transport("tcp")
                {%- endif %}
                so-reuseport(1)
                port({{ port }})
                persist-name("{{ port_id }}_6587_{{ port }}_{{ i }}")
                ip-protocol({{ enable_ipv6 }})
                max-connections({{ port_6587_max_connections }})
                log-iw-size({{ port_6587_log_iw_size }})
                log-fetch-limit({{ port_6587_log_fetch_limit }})
                {%- if port_6587_so_recvbuff >0 %}
                so-rcvbuf({{ port_6587_so_recvbuff }})
                {%- endif %}
                keep-timestamp(yes)
                use-dns(no)
                use-fqdn(no)
                chain-hostnames(off)
                flags(validate-utf8)
            );
            {%- endfor %}
            {%- endif %}
            {%- endfor %}

            # List TLS for any format
            {%- for port in port_5425 %}
            {%- if port != "disabled" and use_tls %}
            {%- for i in range(1,port_5425_sockets+1) %}
            syslog (
                {%- if use_proxy_connect == True %}
                transport("proxied-tls")
                {%- else %}
                transport("tls")
                {%- endif %}
                so-reuseport(1)
                port({{ port }})
                persist-name("{{ port_id }}_5425_{{ port }}_{{ i }}")
                ip-protocol({{ enable_ipv6 }})
                max-connections({{ port_5425_max_connections }})
                log-iw-size({{ port_5425_log_iw_size }})
                log-fetch-limit({{ port_5425_log_fetch_limit }})
                {%- if port_5425_so_recvbuff >0 %}
                so-rcvbuf({{ port_5425_so_recvbuff }})
                {%- endif %}
                keep-timestamp(yes)
                use-dns(no)
                use-fqdn(no)
                chain-hostnames(off)
                flags(validate-utf8)
                tls(
                    allow-compress(yes)
                    key-file("{{ tls_dir }}/{{ key_file }}")
                    cert-file("{{ tls_dir }}/{{ cert_file }}")
                    ssl-options({{ port_5425_tls_options }})
                    cipher-suite("{{ port_5425_cipher_suit }}")
                    peer-verify(no)
                )
            );
            {%- endfor %}
            {%- endif %}
            {%- endfor %}
        };
        {%- if vendor and product %}
        parser {
            p_set_netsource_fields(
                vendor('{{ vendor }}')
                product('product')
            );
        };
        {%- endif %}
        rewrite(set_rfc);
        rewrite(set_rfc5424);

        if {
            filter(f_host_is_nil_or_ip);
            if {
                parser(p_add_context_host);
            };
            {%- if use_namecache == True %}
            if {
                filter(f_host_is_nil_or_ip);
                parser(p_host_cache);
            };
            {%- endif %}
            {%- if use_reverse_dns == True %}
            if {
                filter(f_host_is_nil_or_ip);
                parser(p_fix_host_resolver);
            };
            {%- endif %}
        };

        rewrite {
            set('$(lowercase "$HOST")' value(HOST));
        };
        {%- if not vendor or not product %}
        {%- if use_vpscache == True %}
        if {
            parser(p_vpst_cache);
        };
        {%- endif %}
        if {
            parser(vendor_product_by_source);
        };
        {%- endif %}

        if {
            filter(f_is_source_identified);
        } else {
            parser(app-group-sc4s-fallback);
        };

        rewrite {
            set($FACILITY, value("fields.sc4s_syslog_facility") condition(match('facility' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring))));
            set($LEVEL, value("fields.sc4s_syslog_severity") condition(match('severity' template('`SC4S_DEST_SPLUNK_INDEXED_FIELDS`') type(string) flags(substring)) ));
        };
    };
    {%- endif %}
};