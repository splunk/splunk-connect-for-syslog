template t_leef_message {
        template("${PROGRAM}:${MESSAGE}");
        };

template t_leef_event {
        template("${.leef.event}");
};

parser p_leef_kv {
    python(
        class("parser_leef.leef_kv")
    );
};


parser p_leef_devTime {
    date-parser-nofilter(format(
                    '%s.%f',
                    '%s',
                    '%b %d %H:%M:%S',
                    '%b %d %H:%M:%S.%f',
                    '%b %d %Y %H:%M:%S.%f'
                )
                template("${.leef.devTime}")
    );
};


block parser app-syslog-leef() {
 channel {
        rewrite {
            r_set_splunk_dest_default(
                sourcetype('leef')
                vendor("leef")
                product('generic')
            );
            set("t_leef_event", value(".splunk.sc4s_template"));
            set("$(template t_leef_message)" value("MSG"));

        };

        # LEEF has two offical versions however in the wild we see "hybrid"
        # Syntax where V2 is used but the separator is not provided and assumed
        # to be \t
        parser (p_leef_kv);
        if {
            filter {
                match(".{4,}" value(".leef.devTime"));
            };
            parser (p_leef_devTime);
        };


        # leef TAs use the source as their bounds in props.conf
        # leef source entries in splunk_metadata.csv should reflect the proper source as well as sourcetype

        rewrite { set("${.splunk.sourcetype}", value(".leef.sourcetype")); };

        if {
            parser { app-parser(topic(leef)); };
        };

   };
};
application app-syslog-leef[sc4s-syslog-pgm] {
	filter {
        program('LEEF' type(string) flags(prefix));
    };	
    parser { app-syslog-leef(); };
};

